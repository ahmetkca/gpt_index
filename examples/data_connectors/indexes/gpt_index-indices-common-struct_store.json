{"index_struct": {"text": "\nThe summaries of these documents are the condensed versions of the documents that provide an overview of the main points and ideas contained within them. They are typically shorter than the original documents and provide a quick overview of the main topics and ideas.", "doc_id": "c25de6fc-36c5-40aa-bdd6-cbbcfb2d6360", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Init params.\"\"\"\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/common/struct_store/__init__.py", "file_name": "__init__.py"}, "index": 0, "child_indices": [], "ref_doc_id": "c637335013c599b07de054fba07b47ecb86ad3e8", "node_info": null}, "1": {"text": "\"\"\"Common classes for structured operations.\"\"\"\n\nfrom typing import Dict, List, Optional, Sequence\n\nfrom gpt_index.indices.prompt_helper import PromptHelper\nfrom gpt_index.indices.response.builder import ResponseBuilder, TextChunk\nfrom gpt_index.langchain_helpers.chain_wrapper import LLMPredictor\nfrom gpt_index.langchain_helpers.sql_wrapper import SQLDatabase\nfrom gpt_index.prompts.default_prompts import (\n    DEFAULT_REFINE_TABLE_CONTEXT_PROMPT,\n    DEFAULT_TABLE_CONTEXT_PROMPT,\n    DEFAULT_TABLE_CONTEXT_QUERY,\n)\nfrom gpt_index.prompts.prompts import (\n    QuestionAnswerPrompt,\n    RefinePrompt,\n    RefineTableContextPrompt,\n    TableContextPrompt,\n)\nfrom gpt_index.schema import BaseDocument\n\n\nclass SQLContextBuilder:\n    \"\"\"Builder that builds context for a given set of SQL tables.\n\n    Args:\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/common/struct_store/base.py", "file_name": "base.py"}, "index": 1, "child_indices": [], "ref_doc_id": "c708cd82227bc6841cfe95d87f823b3237a44e67", "node_info": null}, "2": {"text": "   Args:\n        sql_database (Optional[SQLDatabase]): SQL database to use,\n        context_builder_prompt (Optional[TableContextPrompt]): A\n            Table Context Prompt (see :ref:`Prompt-Templates`).\n    \"\"\"\n\n    def __init__(\n        self,\n        sql_database: SQLDatabase,\n        llm_predictor: Optional[LLMPredictor] = None,\n        prompt_helper: Optional[PromptHelper] = None,\n        table_context_prompt: Optional[TableContextPrompt] = None,\n        refine_table_context_prompt: Optional[RefineTableContextPrompt] = None,\n        table_context_task: Optional[str] = None,\n    ) -> None:\n        \"\"\"Initialize params.\"\"\"\n        # TODO: take in an", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/common/struct_store/base.py", "file_name": "base.py"}, "index": 2, "child_indices": [], "ref_doc_id": "c708cd82227bc6841cfe95d87f823b3237a44e67", "node_info": null}, "3": {"text": "       # TODO: take in an entire index instead of forming a response builder\n        if sql_database is None:\n            raise ValueError(\"sql_database must be provided.\")\n        self._sql_database = sql_database\n        self._llm_predictor = llm_predictor or LLMPredictor()\n        self._prompt_helper = prompt_helper or PromptHelper.from_llm_predictor(\n            self._llm_predictor\n        )\n        self._table_context_prompt = (\n            table_context_prompt or DEFAULT_TABLE_CONTEXT_PROMPT\n        )\n        self._refine_table_context_prompt = (\n            refine_table_context_prompt or", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/common/struct_store/base.py", "file_name": "base.py"}, "index": 3, "child_indices": [], "ref_doc_id": "c708cd82227bc6841cfe95d87f823b3237a44e67", "node_info": null}, "4": {"text": "      refine_table_context_prompt or DEFAULT_REFINE_TABLE_CONTEXT_PROMPT\n        )\n        self._table_context_task = table_context_task or DEFAULT_TABLE_CONTEXT_QUERY\n\n    def build_all_context_from_documents(\n        self,\n        documents_dict: Dict[str, List[BaseDocument]],\n    ) -> Dict[str, str]:\n        \"\"\"Build context for all tables in the database.\"\"\"\n        context_dict = {}\n        for table_name in self._sql_database.get_table_names():\n            context_dict[table_name] = self.build_table_context_from_documents(\n                documents_dict[table_name], table_name\n            )\n        return context_dict\n\n  ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/common/struct_store/base.py", "file_name": "base.py"}, "index": 4, "child_indices": [], "ref_doc_id": "c708cd82227bc6841cfe95d87f823b3237a44e67", "node_info": null}, "5": {"text": ")\n        return context_dict\n\n    def build_table_context_from_documents(\n        self,\n        documents: Sequence[BaseDocument],\n        table_name: str,\n    ) -> str:\n        \"\"\"Build context from documents for a single table.\"\"\"\n        schema = self._sql_database.get_single_table_info(table_name)\n        prompt_with_schema = QuestionAnswerPrompt.from_prompt(\n            self._table_context_prompt.partial_format(schema=schema)\n        )\n        refine_prompt_with_schema = RefinePrompt.from_prompt(\n            self._refine_table_context_prompt.partial_format(schema=schema)\n        )\n        text_splitter =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/common/struct_store/base.py", "file_name": "base.py"}, "index": 5, "child_indices": [], "ref_doc_id": "c708cd82227bc6841cfe95d87f823b3237a44e67", "node_info": null}, "6": {"text": "  )\n        text_splitter = self._prompt_helper.get_text_splitter_given_prompt(\n            prompt_with_schema, 1\n        )\n        # we use the ResponseBuilder to iteratively go through all texts\n        response_builder = ResponseBuilder(\n            self._prompt_helper,\n            self._llm_predictor,\n            prompt_with_schema,\n            refine_prompt_with_schema,\n        )\n        for doc in documents:\n            text_chunks = text_splitter.split_text(doc.get_text())\n            for text_chunk in text_chunks:\n               ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/common/struct_store/base.py", "file_name": "base.py"}, "index": 6, "child_indices": [], "ref_doc_id": "c708cd82227bc6841cfe95d87f823b3237a44e67", "node_info": null}, "7": {"text": "               response_builder.add_text_chunks([TextChunk(text_chunk)])\n\n        # feed in the \"query_str\" or the task\n        table_context = response_builder.get_response(self._table_context_task)\n        return table_context\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/common/struct_store/base.py", "file_name": "base.py"}, "index": 7, "child_indices": [], "ref_doc_id": "c708cd82227bc6841cfe95d87f823b3237a44e67", "node_info": null}, "8": {"text": "The file gpt_index/indices/common/struct_store/base.py contains the class SQLContextBuilder, which is used to build context for a given set of SQL tables. It takes in an SQL database, a LLMPredictor, a PromptHelper, a TableContextPrompt, a RefineTableContextPrompt, and a TableContextTask as parameters. It then uses the ResponseBuilder to iteratively go through all texts and build context for each table. Finally, it returns the table context.", "doc_id": null, "embedding": null, "extra_info": null, "index": 8, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"8": {"text": "The file gpt_index/indices/common/struct_store/base.py contains the class SQLContextBuilder, which is used to build context for a given set of SQL tables. It takes in an SQL database, a LLMPredictor, a PromptHelper, a TableContextPrompt, a RefineTableContextPrompt, and a TableContextTask as parameters. It then uses the ResponseBuilder to iteratively go through all texts and build context for each table. Finally, it returns the table context.", "doc_id": null, "embedding": null, "extra_info": null, "index": 8, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"c637335013c599b07de054fba07b47ecb86ad3e8": {"text": "\"\"\"Init params.\"\"\"\n", "doc_id": "c637335013c599b07de054fba07b47ecb86ad3e8", "embedding": null, "extra_info": {"file_path": "gpt_index/indices/common/struct_store/__init__.py", "file_name": "__init__.py"}, "__type__": "Document"}, "c708cd82227bc6841cfe95d87f823b3237a44e67": {"text": "\"\"\"Common classes for structured operations.\"\"\"\n\nfrom typing import Dict, List, Optional, Sequence\n\nfrom gpt_index.indices.prompt_helper import PromptHelper\nfrom gpt_index.indices.response.builder import ResponseBuilder, TextChunk\nfrom gpt_index.langchain_helpers.chain_wrapper import LLMPredictor\nfrom gpt_index.langchain_helpers.sql_wrapper import SQLDatabase\nfrom gpt_index.prompts.default_prompts import (\n    DEFAULT_REFINE_TABLE_CONTEXT_PROMPT,\n    DEFAULT_TABLE_CONTEXT_PROMPT,\n    DEFAULT_TABLE_CONTEXT_QUERY,\n)\nfrom gpt_index.prompts.prompts import (\n    QuestionAnswerPrompt,\n    RefinePrompt,\n    RefineTableContextPrompt,\n    TableContextPrompt,\n)\nfrom gpt_index.schema import BaseDocument\n\n\nclass SQLContextBuilder:\n    \"\"\"Builder that builds context for a given set of SQL tables.\n\n    Args:\n        sql_database (Optional[SQLDatabase]): SQL database to use,\n        context_builder_prompt (Optional[TableContextPrompt]): A\n            Table Context Prompt (see :ref:`Prompt-Templates`).\n    \"\"\"\n\n    def __init__(\n        self,\n        sql_database: SQLDatabase,\n        llm_predictor: Optional[LLMPredictor] = None,\n        prompt_helper: Optional[PromptHelper] = None,\n        table_context_prompt: Optional[TableContextPrompt] = None,\n        refine_table_context_prompt: Optional[RefineTableContextPrompt] = None,\n        table_context_task: Optional[str] = None,\n    ) -> None:\n        \"\"\"Initialize params.\"\"\"\n        # TODO: take in an entire index instead of forming a response builder\n        if sql_database is None:\n            raise ValueError(\"sql_database must be provided.\")\n        self._sql_database = sql_database\n        self._llm_predictor = llm_predictor or LLMPredictor()\n        self._prompt_helper = prompt_helper or PromptHelper.from_llm_predictor(\n            self._llm_predictor\n        )\n        self._table_context_prompt = (\n            table_context_prompt or DEFAULT_TABLE_CONTEXT_PROMPT\n        )\n        self._refine_table_context_prompt = (\n            refine_table_context_prompt or DEFAULT_REFINE_TABLE_CONTEXT_PROMPT\n        )\n        self._table_context_task = table_context_task or DEFAULT_TABLE_CONTEXT_QUERY\n\n    def build_all_context_from_documents(\n        self,\n        documents_dict: Dict[str, List[BaseDocument]],\n    ) -> Dict[str, str]:\n        \"\"\"Build context for all tables in the database.\"\"\"\n        context_dict = {}\n        for table_name in self._sql_database.get_table_names():\n            context_dict[table_name] = self.build_table_context_from_documents(\n                documents_dict[table_name], table_name\n            )\n        return context_dict\n\n    def build_table_context_from_documents(\n        self,\n        documents: Sequence[BaseDocument],\n        table_name: str,\n    ) -> str:\n        \"\"\"Build context from documents for a single table.\"\"\"\n        schema = self._sql_database.get_single_table_info(table_name)\n        prompt_with_schema = QuestionAnswerPrompt.from_prompt(\n            self._table_context_prompt.partial_format(schema=schema)\n        )\n        refine_prompt_with_schema = RefinePrompt.from_prompt(\n            self._refine_table_context_prompt.partial_format(schema=schema)\n        )\n        text_splitter = self._prompt_helper.get_text_splitter_given_prompt(\n            prompt_with_schema, 1\n        )\n        # we use the ResponseBuilder to iteratively go through all texts\n        response_builder = ResponseBuilder(\n            self._prompt_helper,\n            self._llm_predictor,\n            prompt_with_schema,\n            refine_prompt_with_schema,\n        )\n        for doc in documents:\n            text_chunks = text_splitter.split_text(doc.get_text())\n            for text_chunk in text_chunks:\n                response_builder.add_text_chunks([TextChunk(text_chunk)])\n\n        # feed in the \"query_str\" or the task\n        table_context = response_builder.get_response(self._table_context_task)\n        return table_context\n", "doc_id": "c708cd82227bc6841cfe95d87f823b3237a44e67", "embedding": null, "extra_info": {"file_path": "gpt_index/indices/common/struct_store/base.py", "file_name": "base.py"}, "__type__": "Document"}, "c25de6fc-36c5-40aa-bdd6-cbbcfb2d6360": {"text": "\nThe summaries of these documents are the condensed versions of the documents that provide an overview of the main points and ideas contained within them. They are typically shorter than the original documents and provide a quick overview of the main topics and ideas.", "doc_id": "c25de6fc-36c5-40aa-bdd6-cbbcfb2d6360", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Init params.\"\"\"\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/common/struct_store/__init__.py", "file_name": "__init__.py"}, "index": 0, "child_indices": [], "ref_doc_id": "c637335013c599b07de054fba07b47ecb86ad3e8", "node_info": null}, "1": {"text": "\"\"\"Common classes for structured operations.\"\"\"\n\nfrom typing import Dict, List, Optional, Sequence\n\nfrom gpt_index.indices.prompt_helper import PromptHelper\nfrom gpt_index.indices.response.builder import ResponseBuilder, TextChunk\nfrom gpt_index.langchain_helpers.chain_wrapper import LLMPredictor\nfrom gpt_index.langchain_helpers.sql_wrapper import SQLDatabase\nfrom gpt_index.prompts.default_prompts import (\n    DEFAULT_REFINE_TABLE_CONTEXT_PROMPT,\n    DEFAULT_TABLE_CONTEXT_PROMPT,\n    DEFAULT_TABLE_CONTEXT_QUERY,\n)\nfrom gpt_index.prompts.prompts import (\n    QuestionAnswerPrompt,\n    RefinePrompt,\n    RefineTableContextPrompt,\n    TableContextPrompt,\n)\nfrom gpt_index.schema import BaseDocument\n\n\nclass SQLContextBuilder:\n    \"\"\"Builder that builds context for a given set of SQL tables.\n\n    Args:\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/common/struct_store/base.py", "file_name": "base.py"}, "index": 1, "child_indices": [], "ref_doc_id": "c708cd82227bc6841cfe95d87f823b3237a44e67", "node_info": null}, "2": {"text": "   Args:\n        sql_database (Optional[SQLDatabase]): SQL database to use,\n        context_builder_prompt (Optional[TableContextPrompt]): A\n            Table Context Prompt (see :ref:`Prompt-Templates`).\n    \"\"\"\n\n    def __init__(\n        self,\n        sql_database: SQLDatabase,\n        llm_predictor: Optional[LLMPredictor] = None,\n        prompt_helper: Optional[PromptHelper] = None,\n        table_context_prompt: Optional[TableContextPrompt] = None,\n        refine_table_context_prompt: Optional[RefineTableContextPrompt] = None,\n        table_context_task: Optional[str] = None,\n    ) -> None:\n        \"\"\"Initialize params.\"\"\"\n        # TODO: take in an", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/common/struct_store/base.py", "file_name": "base.py"}, "index": 2, "child_indices": [], "ref_doc_id": "c708cd82227bc6841cfe95d87f823b3237a44e67", "node_info": null}, "3": {"text": "       # TODO: take in an entire index instead of forming a response builder\n        if sql_database is None:\n            raise ValueError(\"sql_database must be provided.\")\n        self._sql_database = sql_database\n        self._llm_predictor = llm_predictor or LLMPredictor()\n        self._prompt_helper = prompt_helper or PromptHelper.from_llm_predictor(\n            self._llm_predictor\n        )\n        self._table_context_prompt = (\n            table_context_prompt or DEFAULT_TABLE_CONTEXT_PROMPT\n        )\n        self._refine_table_context_prompt = (\n            refine_table_context_prompt or", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/common/struct_store/base.py", "file_name": "base.py"}, "index": 3, "child_indices": [], "ref_doc_id": "c708cd82227bc6841cfe95d87f823b3237a44e67", "node_info": null}, "4": {"text": "      refine_table_context_prompt or DEFAULT_REFINE_TABLE_CONTEXT_PROMPT\n        )\n        self._table_context_task = table_context_task or DEFAULT_TABLE_CONTEXT_QUERY\n\n    def build_all_context_from_documents(\n        self,\n        documents_dict: Dict[str, List[BaseDocument]],\n    ) -> Dict[str, str]:\n        \"\"\"Build context for all tables in the database.\"\"\"\n        context_dict = {}\n        for table_name in self._sql_database.get_table_names():\n            context_dict[table_name] = self.build_table_context_from_documents(\n                documents_dict[table_name], table_name\n            )\n        return context_dict\n\n  ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/common/struct_store/base.py", "file_name": "base.py"}, "index": 4, "child_indices": [], "ref_doc_id": "c708cd82227bc6841cfe95d87f823b3237a44e67", "node_info": null}, "5": {"text": ")\n        return context_dict\n\n    def build_table_context_from_documents(\n        self,\n        documents: Sequence[BaseDocument],\n        table_name: str,\n    ) -> str:\n        \"\"\"Build context from documents for a single table.\"\"\"\n        schema = self._sql_database.get_single_table_info(table_name)\n        prompt_with_schema = QuestionAnswerPrompt.from_prompt(\n            self._table_context_prompt.partial_format(schema=schema)\n        )\n        refine_prompt_with_schema = RefinePrompt.from_prompt(\n            self._refine_table_context_prompt.partial_format(schema=schema)\n        )\n        text_splitter =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/common/struct_store/base.py", "file_name": "base.py"}, "index": 5, "child_indices": [], "ref_doc_id": "c708cd82227bc6841cfe95d87f823b3237a44e67", "node_info": null}, "6": {"text": "  )\n        text_splitter = self._prompt_helper.get_text_splitter_given_prompt(\n            prompt_with_schema, 1\n        )\n        # we use the ResponseBuilder to iteratively go through all texts\n        response_builder = ResponseBuilder(\n            self._prompt_helper,\n            self._llm_predictor,\n            prompt_with_schema,\n            refine_prompt_with_schema,\n        )\n        for doc in documents:\n            text_chunks = text_splitter.split_text(doc.get_text())\n            for text_chunk in text_chunks:\n               ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/common/struct_store/base.py", "file_name": "base.py"}, "index": 6, "child_indices": [], "ref_doc_id": "c708cd82227bc6841cfe95d87f823b3237a44e67", "node_info": null}, "7": {"text": "               response_builder.add_text_chunks([TextChunk(text_chunk)])\n\n        # feed in the \"query_str\" or the task\n        table_context = response_builder.get_response(self._table_context_task)\n        return table_context\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/common/struct_store/base.py", "file_name": "base.py"}, "index": 7, "child_indices": [], "ref_doc_id": "c708cd82227bc6841cfe95d87f823b3237a44e67", "node_info": null}, "8": {"text": "The file gpt_index/indices/common/struct_store/base.py contains the class SQLContextBuilder, which is used to build context for a given set of SQL tables. It takes in an SQL database, a LLMPredictor, a PromptHelper, a TableContextPrompt, a RefineTableContextPrompt, and a TableContextTask as parameters. It then uses the ResponseBuilder to iteratively go through all texts and build context for each table. Finally, it returns the table context.", "doc_id": null, "embedding": null, "extra_info": null, "index": 8, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"8": {"text": "The file gpt_index/indices/common/struct_store/base.py contains the class SQLContextBuilder, which is used to build context for a given set of SQL tables. It takes in an SQL database, a LLMPredictor, a PromptHelper, a TableContextPrompt, a RefineTableContextPrompt, and a TableContextTask as parameters. It then uses the ResponseBuilder to iteratively go through all texts and build context for each table. Finally, it returns the table context.", "doc_id": null, "embedding": null, "extra_info": null, "index": 8, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}