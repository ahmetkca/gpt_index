{"index_struct": {"text": "\nThe README.md document provides an overview of GPTListIndex, a simple list-based data structure used to answer queries. The __init__.py document provides a list of all the classes and functions available in the GPTListIndex module. The base.py document provides the implementation of the GPTListIndex class, including methods for saving and loading the index from disk, inserting and deleting documents from the index, and other related operations.", "doc_id": "ad982400-4b4c-433e-9ae6-e7046961b9a2", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\n\n\ud83d\udd17 GPTListIndex\n\n\n\n\n\nIndex Construction\n\nGPTListIndex is a simple list-based data structure. During index construction, GPTListIndex takes in a dataset of text documents as input, chunks them up into smaller document chunks, and concatenates them into a list. GPT is not called at all during index construction.\n\n\n\n\n\nQuery\n\nDuring query-time, GPT List Index constructs an answer using the _create and refine_ paradigm. An initial answer to the query is constructed using the first text chunk. The answer is then _refined_ through feeding in subsequent text chunks as context. Refinement could mean keeping the original answer, making small edits to the original answer, or rewriting the original answer completely.\n\n**Usage**\n\n```python\nfrom gpt_index import GPTListIndex, SimpleDirectoryReader\n\n\n\n\n\nbuild index\ndocuments = SimpleDirectoryReader('data').load_data()\nindex = GPTListIndex(documents)\n\n\n\n\nsave index\nindex.save_to_disk('index_list.json')\n\n\n\n\nload index from disk\nindex =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/README.md", "file_name": "gpt_index/indices/list/README.md"}, "index": 0, "child_indices": [], "ref_doc_id": "fe7160c00aa003afe9d8f6f6d3352f11c279c10d", "node_info": null}, "1": {"text": "index from disk\nindex = GPTListIndex.load_from_disk('index_list.json')\n\n\n\n\nquery\nresponse = index.query(\"\")\n\n```\n\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/README.md", "file_name": "gpt_index/indices/list/README.md"}, "index": 1, "child_indices": [], "ref_doc_id": "fe7160c00aa003afe9d8f6f6d3352f11c279c10d", "node_info": null}, "2": {"text": "\"\"\"List-based data structures.\"\"\"\n\nfrom gpt_index.indices.list.base import GPTListIndex\n\n__all__ = [\n    \"GPTListIndex\",\n]\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/__init__.py", "file_name": "__init__.py"}, "index": 2, "child_indices": [], "ref_doc_id": "b24c607f33df4130279f81016b5fdc2a22d19fd0", "node_info": null}, "3": {"text": "\"\"\"List index.\n\nA simple data structure where GPT Index iterates through document chunks\nin sequence in order to answer a given query.\n\n\"\"\"\n\nfrom typing import Any, Dict, Optional, Sequence, Type\n\nfrom gpt_index.data_structs.data_structs import IndexList\nfrom gpt_index.indices.base import DOCUMENTS_INPUT, BaseGPTIndex\nfrom gpt_index.indices.query.base import BaseGPTIndexQuery\nfrom gpt_index.indices.query.list.embedding_query import GPTListIndexEmbeddingQuery\nfrom gpt_index.indices.query.list.query import GPTListIndexQuery\nfrom gpt_index.indices.query.schema import QueryMode\nfrom gpt_index.langchain_helpers.chain_wrapper import LLMPredictor\nfrom gpt_index.prompts.default_prompts import DEFAULT_TEXT_QA_PROMPT\nfrom gpt_index.prompts.prompts import QuestionAnswerPrompt\nfrom gpt_index.schema import BaseDocument\n\n# This query is used to summarize the contents of the index.\nGENERATE_TEXT_QUERY =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/base.py", "file_name": "base.py"}, "index": 3, "child_indices": [], "ref_doc_id": "1a2d7ad3d7362260f2d3eae8d83d06e21bd1df97", "node_info": null}, "4": {"text": "contents of the index.\nGENERATE_TEXT_QUERY = \"What is a concise summary of this document?\"\n\n\nclass GPTListIndex(BaseGPTIndex[IndexList]):\n    \"\"\"GPT List Index.\n\n    The list index is a simple data structure where nodes are stored in\n    a sequence. During index construction, the document texts are\n    chunked up, converted to nodes, and stored in a list.\n\n    During query time, the list index iterates through the nodes\n    with some optional filter parameters, and synthesizes an\n    answer from all the nodes.\n\n    Args:\n        text_qa_template (Optional[QuestionAnswerPrompt]): A Question-Answer Prompt\n            (see :ref:`Prompt-Templates`).\n\n    \"\"\"\n\n    index_struct_cls = IndexList\n\n    def __init__(\n        self,\n        documents: Optional[Sequence[DOCUMENTS_INPUT]] = None,\n      ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/base.py", "file_name": "base.py"}, "index": 4, "child_indices": [], "ref_doc_id": "1a2d7ad3d7362260f2d3eae8d83d06e21bd1df97", "node_info": null}, "5": {"text": "= None,\n        index_struct: Optional[IndexList] = None,\n        text_qa_template: Optional[QuestionAnswerPrompt] = None,\n        llm_predictor: Optional[LLMPredictor] = None,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Initialize params.\"\"\"\n        self.text_qa_template = text_qa_template or DEFAULT_TEXT_QA_PROMPT\n        super().__init__(\n            documents=documents,\n            index_struct=index_struct,\n            llm_predictor=llm_predictor,\n            **kwargs,\n        )\n        # NOTE: when building the list index, text_qa_template is not partially\n        # formatted because we don't know the", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/base.py", "file_name": "base.py"}, "index": 5, "child_indices": [], "ref_doc_id": "1a2d7ad3d7362260f2d3eae8d83d06e21bd1df97", "node_info": null}, "6": {"text": "       # formatted because we don't know the query ahead of time.\n        self._text_splitter = self._prompt_helper.get_text_splitter_given_prompt(\n            self.text_qa_template, 1\n        )\n\n    @classmethod\n    def get_query_map(self) -> Dict[str, Type[BaseGPTIndexQuery]]:\n        \"\"\"Get query map.\"\"\"\n        return {\n            QueryMode.DEFAULT: GPTListIndexQuery,\n            QueryMode.EMBEDDING: GPTListIndexEmbeddingQuery,\n        }\n\n    def _build_index_from_documents(\n        self, documents: Sequence[BaseDocument]\n    ) -> IndexList:\n        \"\"\"Build the index from documents.\n\n        Args:\n         ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/base.py", "file_name": "base.py"}, "index": 6, "child_indices": [], "ref_doc_id": "1a2d7ad3d7362260f2d3eae8d83d06e21bd1df97", "node_info": null}, "7": {"text": "    Args:\n            documents (List[BaseDocument]): A list of documents.\n\n        Returns:\n            IndexList: The created list index.\n        \"\"\"\n        text_splitter = self._prompt_helper.get_text_splitter_given_prompt(\n            self.text_qa_template, 1\n        )\n        index_struct = IndexList()\n        for d in documents:\n            nodes = self._get_nodes_from_document(d, text_splitter)\n            for n in nodes:\n                index_struct.add_node(n)\n        return index_struct\n\n    def _insert(self, document: BaseDocument, **insert_kwargs: Any) -> None:\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/base.py", "file_name": "base.py"}, "index": 7, "child_indices": [], "ref_doc_id": "1a2d7ad3d7362260f2d3eae8d83d06e21bd1df97", "node_info": null}, "8": {"text": "Any) -> None:\n        \"\"\"Insert a document.\"\"\"\n        nodes = self._get_nodes_from_document(document, self._text_splitter)\n        for n in nodes:\n            self._index_struct.add_node(n)\n\n    def _delete(self, doc_id: str, **delete_kwargs: Any) -> None:\n        \"\"\"Delete a document.\"\"\"\n        cur_nodes = self._index_struct.nodes\n        nodes_to_keep = [n for n in cur_nodes if n.ref_doc_id != doc_id]\n        self._index_struct.nodes = nodes_to_keep\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/base.py", "file_name": "base.py"}, "index": 8, "child_indices": [], "ref_doc_id": "1a2d7ad3d7362260f2d3eae8d83d06e21bd1df97", "node_info": null}, "9": {"text": "GPTListIndex is a simple list-based data structure used to answer queries. During index construction, GPTListIndex takes in a dataset of text documents as input, chunks them up into smaller document chunks, and concatenates them into a list. During query-time, GPT List Index constructs an answer using the _create and refine_ paradigm. An initial answer to the query is constructed using the first text chunk. The answer is then _refined_ through feeding in subsequent text chunks as context. GPTListIndex also provides methods for saving and loading the index from disk, as well as methods for inserting and deleting documents from the index.", "doc_id": null, "embedding": null, "extra_info": null, "index": 9, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"9": {"text": "GPTListIndex is a simple list-based data structure used to answer queries. During index construction, GPTListIndex takes in a dataset of text documents as input, chunks them up into smaller document chunks, and concatenates them into a list. During query-time, GPT List Index constructs an answer using the _create and refine_ paradigm. An initial answer to the query is constructed using the first text chunk. The answer is then _refined_ through feeding in subsequent text chunks as context. GPTListIndex also provides methods for saving and loading the index from disk, as well as methods for inserting and deleting documents from the index.", "doc_id": null, "embedding": null, "extra_info": null, "index": 9, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"fe7160c00aa003afe9d8f6f6d3352f11c279c10d": {"text": "\n\n\ud83d\udd17 GPTListIndex\n\n\n\n\n\nIndex Construction\n\nGPTListIndex is a simple list-based data structure. During index construction, GPTListIndex takes in a dataset of text documents as input, chunks them up into smaller document chunks, and concatenates them into a list. GPT is not called at all during index construction.\n\n\n\n\n\nQuery\n\nDuring query-time, GPT List Index constructs an answer using the _create and refine_ paradigm. An initial answer to the query is constructed using the first text chunk. The answer is then _refined_ through feeding in subsequent text chunks as context. Refinement could mean keeping the original answer, making small edits to the original answer, or rewriting the original answer completely.\n\n**Usage**\n\n```python\nfrom gpt_index import GPTListIndex, SimpleDirectoryReader\n\n\n\n\n\nbuild index\ndocuments = SimpleDirectoryReader('data').load_data()\nindex = GPTListIndex(documents)\n\n\n\n\nsave index\nindex.save_to_disk('index_list.json')\n\n\n\n\nload index from disk\nindex = GPTListIndex.load_from_disk('index_list.json')\n\n\n\n\nquery\nresponse = index.query(\"\")\n\n```\n\n", "doc_id": "fe7160c00aa003afe9d8f6f6d3352f11c279c10d", "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/README.md", "file_name": "gpt_index/indices/list/README.md"}, "__type__": "Document"}, "b24c607f33df4130279f81016b5fdc2a22d19fd0": {"text": "\"\"\"List-based data structures.\"\"\"\n\nfrom gpt_index.indices.list.base import GPTListIndex\n\n__all__ = [\n    \"GPTListIndex\",\n]\n", "doc_id": "b24c607f33df4130279f81016b5fdc2a22d19fd0", "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/__init__.py", "file_name": "__init__.py"}, "__type__": "Document"}, "1a2d7ad3d7362260f2d3eae8d83d06e21bd1df97": {"text": "\"\"\"List index.\n\nA simple data structure where GPT Index iterates through document chunks\nin sequence in order to answer a given query.\n\n\"\"\"\n\nfrom typing import Any, Dict, Optional, Sequence, Type\n\nfrom gpt_index.data_structs.data_structs import IndexList\nfrom gpt_index.indices.base import DOCUMENTS_INPUT, BaseGPTIndex\nfrom gpt_index.indices.query.base import BaseGPTIndexQuery\nfrom gpt_index.indices.query.list.embedding_query import GPTListIndexEmbeddingQuery\nfrom gpt_index.indices.query.list.query import GPTListIndexQuery\nfrom gpt_index.indices.query.schema import QueryMode\nfrom gpt_index.langchain_helpers.chain_wrapper import LLMPredictor\nfrom gpt_index.prompts.default_prompts import DEFAULT_TEXT_QA_PROMPT\nfrom gpt_index.prompts.prompts import QuestionAnswerPrompt\nfrom gpt_index.schema import BaseDocument\n\n# This query is used to summarize the contents of the index.\nGENERATE_TEXT_QUERY = \"What is a concise summary of this document?\"\n\n\nclass GPTListIndex(BaseGPTIndex[IndexList]):\n    \"\"\"GPT List Index.\n\n    The list index is a simple data structure where nodes are stored in\n    a sequence. During index construction, the document texts are\n    chunked up, converted to nodes, and stored in a list.\n\n    During query time, the list index iterates through the nodes\n    with some optional filter parameters, and synthesizes an\n    answer from all the nodes.\n\n    Args:\n        text_qa_template (Optional[QuestionAnswerPrompt]): A Question-Answer Prompt\n            (see :ref:`Prompt-Templates`).\n\n    \"\"\"\n\n    index_struct_cls = IndexList\n\n    def __init__(\n        self,\n        documents: Optional[Sequence[DOCUMENTS_INPUT]] = None,\n        index_struct: Optional[IndexList] = None,\n        text_qa_template: Optional[QuestionAnswerPrompt] = None,\n        llm_predictor: Optional[LLMPredictor] = None,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Initialize params.\"\"\"\n        self.text_qa_template = text_qa_template or DEFAULT_TEXT_QA_PROMPT\n        super().__init__(\n            documents=documents,\n            index_struct=index_struct,\n            llm_predictor=llm_predictor,\n            **kwargs,\n        )\n        # NOTE: when building the list index, text_qa_template is not partially\n        # formatted because we don't know the query ahead of time.\n        self._text_splitter = self._prompt_helper.get_text_splitter_given_prompt(\n            self.text_qa_template, 1\n        )\n\n    @classmethod\n    def get_query_map(self) -> Dict[str, Type[BaseGPTIndexQuery]]:\n        \"\"\"Get query map.\"\"\"\n        return {\n            QueryMode.DEFAULT: GPTListIndexQuery,\n            QueryMode.EMBEDDING: GPTListIndexEmbeddingQuery,\n        }\n\n    def _build_index_from_documents(\n        self, documents: Sequence[BaseDocument]\n    ) -> IndexList:\n        \"\"\"Build the index from documents.\n\n        Args:\n            documents (List[BaseDocument]): A list of documents.\n\n        Returns:\n            IndexList: The created list index.\n        \"\"\"\n        text_splitter = self._prompt_helper.get_text_splitter_given_prompt(\n            self.text_qa_template, 1\n        )\n        index_struct = IndexList()\n        for d in documents:\n            nodes = self._get_nodes_from_document(d, text_splitter)\n            for n in nodes:\n                index_struct.add_node(n)\n        return index_struct\n\n    def _insert(self, document: BaseDocument, **insert_kwargs: Any) -> None:\n        \"\"\"Insert a document.\"\"\"\n        nodes = self._get_nodes_from_document(document, self._text_splitter)\n        for n in nodes:\n            self._index_struct.add_node(n)\n\n    def _delete(self, doc_id: str, **delete_kwargs: Any) -> None:\n        \"\"\"Delete a document.\"\"\"\n        cur_nodes = self._index_struct.nodes\n        nodes_to_keep = [n for n in cur_nodes if n.ref_doc_id != doc_id]\n        self._index_struct.nodes = nodes_to_keep\n", "doc_id": "1a2d7ad3d7362260f2d3eae8d83d06e21bd1df97", "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/base.py", "file_name": "base.py"}, "__type__": "Document"}, "ad982400-4b4c-433e-9ae6-e7046961b9a2": {"text": "\nThe README.md document provides an overview of GPTListIndex, a simple list-based data structure used to answer queries. The __init__.py document provides a list of all the classes and functions available in the GPTListIndex module. The base.py document provides the implementation of the GPTListIndex class, including methods for saving and loading the index from disk, inserting and deleting documents from the index, and other related operations.", "doc_id": "ad982400-4b4c-433e-9ae6-e7046961b9a2", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\n\n\ud83d\udd17 GPTListIndex\n\n\n\n\n\nIndex Construction\n\nGPTListIndex is a simple list-based data structure. During index construction, GPTListIndex takes in a dataset of text documents as input, chunks them up into smaller document chunks, and concatenates them into a list. GPT is not called at all during index construction.\n\n\n\n\n\nQuery\n\nDuring query-time, GPT List Index constructs an answer using the _create and refine_ paradigm. An initial answer to the query is constructed using the first text chunk. The answer is then _refined_ through feeding in subsequent text chunks as context. Refinement could mean keeping the original answer, making small edits to the original answer, or rewriting the original answer completely.\n\n**Usage**\n\n```python\nfrom gpt_index import GPTListIndex, SimpleDirectoryReader\n\n\n\n\n\nbuild index\ndocuments = SimpleDirectoryReader('data').load_data()\nindex = GPTListIndex(documents)\n\n\n\n\nsave index\nindex.save_to_disk('index_list.json')\n\n\n\n\nload index from disk\nindex =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/README.md", "file_name": "gpt_index/indices/list/README.md"}, "index": 0, "child_indices": [], "ref_doc_id": "fe7160c00aa003afe9d8f6f6d3352f11c279c10d", "node_info": null}, "1": {"text": "index from disk\nindex = GPTListIndex.load_from_disk('index_list.json')\n\n\n\n\nquery\nresponse = index.query(\"\")\n\n```\n\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/README.md", "file_name": "gpt_index/indices/list/README.md"}, "index": 1, "child_indices": [], "ref_doc_id": "fe7160c00aa003afe9d8f6f6d3352f11c279c10d", "node_info": null}, "2": {"text": "\"\"\"List-based data structures.\"\"\"\n\nfrom gpt_index.indices.list.base import GPTListIndex\n\n__all__ = [\n    \"GPTListIndex\",\n]\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/__init__.py", "file_name": "__init__.py"}, "index": 2, "child_indices": [], "ref_doc_id": "b24c607f33df4130279f81016b5fdc2a22d19fd0", "node_info": null}, "3": {"text": "\"\"\"List index.\n\nA simple data structure where GPT Index iterates through document chunks\nin sequence in order to answer a given query.\n\n\"\"\"\n\nfrom typing import Any, Dict, Optional, Sequence, Type\n\nfrom gpt_index.data_structs.data_structs import IndexList\nfrom gpt_index.indices.base import DOCUMENTS_INPUT, BaseGPTIndex\nfrom gpt_index.indices.query.base import BaseGPTIndexQuery\nfrom gpt_index.indices.query.list.embedding_query import GPTListIndexEmbeddingQuery\nfrom gpt_index.indices.query.list.query import GPTListIndexQuery\nfrom gpt_index.indices.query.schema import QueryMode\nfrom gpt_index.langchain_helpers.chain_wrapper import LLMPredictor\nfrom gpt_index.prompts.default_prompts import DEFAULT_TEXT_QA_PROMPT\nfrom gpt_index.prompts.prompts import QuestionAnswerPrompt\nfrom gpt_index.schema import BaseDocument\n\n# This query is used to summarize the contents of the index.\nGENERATE_TEXT_QUERY =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/base.py", "file_name": "base.py"}, "index": 3, "child_indices": [], "ref_doc_id": "1a2d7ad3d7362260f2d3eae8d83d06e21bd1df97", "node_info": null}, "4": {"text": "contents of the index.\nGENERATE_TEXT_QUERY = \"What is a concise summary of this document?\"\n\n\nclass GPTListIndex(BaseGPTIndex[IndexList]):\n    \"\"\"GPT List Index.\n\n    The list index is a simple data structure where nodes are stored in\n    a sequence. During index construction, the document texts are\n    chunked up, converted to nodes, and stored in a list.\n\n    During query time, the list index iterates through the nodes\n    with some optional filter parameters, and synthesizes an\n    answer from all the nodes.\n\n    Args:\n        text_qa_template (Optional[QuestionAnswerPrompt]): A Question-Answer Prompt\n            (see :ref:`Prompt-Templates`).\n\n    \"\"\"\n\n    index_struct_cls = IndexList\n\n    def __init__(\n        self,\n        documents: Optional[Sequence[DOCUMENTS_INPUT]] = None,\n      ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/base.py", "file_name": "base.py"}, "index": 4, "child_indices": [], "ref_doc_id": "1a2d7ad3d7362260f2d3eae8d83d06e21bd1df97", "node_info": null}, "5": {"text": "= None,\n        index_struct: Optional[IndexList] = None,\n        text_qa_template: Optional[QuestionAnswerPrompt] = None,\n        llm_predictor: Optional[LLMPredictor] = None,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Initialize params.\"\"\"\n        self.text_qa_template = text_qa_template or DEFAULT_TEXT_QA_PROMPT\n        super().__init__(\n            documents=documents,\n            index_struct=index_struct,\n            llm_predictor=llm_predictor,\n            **kwargs,\n        )\n        # NOTE: when building the list index, text_qa_template is not partially\n        # formatted because we don't know the", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/base.py", "file_name": "base.py"}, "index": 5, "child_indices": [], "ref_doc_id": "1a2d7ad3d7362260f2d3eae8d83d06e21bd1df97", "node_info": null}, "6": {"text": "       # formatted because we don't know the query ahead of time.\n        self._text_splitter = self._prompt_helper.get_text_splitter_given_prompt(\n            self.text_qa_template, 1\n        )\n\n    @classmethod\n    def get_query_map(self) -> Dict[str, Type[BaseGPTIndexQuery]]:\n        \"\"\"Get query map.\"\"\"\n        return {\n            QueryMode.DEFAULT: GPTListIndexQuery,\n            QueryMode.EMBEDDING: GPTListIndexEmbeddingQuery,\n        }\n\n    def _build_index_from_documents(\n        self, documents: Sequence[BaseDocument]\n    ) -> IndexList:\n        \"\"\"Build the index from documents.\n\n        Args:\n         ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/base.py", "file_name": "base.py"}, "index": 6, "child_indices": [], "ref_doc_id": "1a2d7ad3d7362260f2d3eae8d83d06e21bd1df97", "node_info": null}, "7": {"text": "    Args:\n            documents (List[BaseDocument]): A list of documents.\n\n        Returns:\n            IndexList: The created list index.\n        \"\"\"\n        text_splitter = self._prompt_helper.get_text_splitter_given_prompt(\n            self.text_qa_template, 1\n        )\n        index_struct = IndexList()\n        for d in documents:\n            nodes = self._get_nodes_from_document(d, text_splitter)\n            for n in nodes:\n                index_struct.add_node(n)\n        return index_struct\n\n    def _insert(self, document: BaseDocument, **insert_kwargs: Any) -> None:\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/base.py", "file_name": "base.py"}, "index": 7, "child_indices": [], "ref_doc_id": "1a2d7ad3d7362260f2d3eae8d83d06e21bd1df97", "node_info": null}, "8": {"text": "Any) -> None:\n        \"\"\"Insert a document.\"\"\"\n        nodes = self._get_nodes_from_document(document, self._text_splitter)\n        for n in nodes:\n            self._index_struct.add_node(n)\n\n    def _delete(self, doc_id: str, **delete_kwargs: Any) -> None:\n        \"\"\"Delete a document.\"\"\"\n        cur_nodes = self._index_struct.nodes\n        nodes_to_keep = [n for n in cur_nodes if n.ref_doc_id != doc_id]\n        self._index_struct.nodes = nodes_to_keep\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/base.py", "file_name": "base.py"}, "index": 8, "child_indices": [], "ref_doc_id": "1a2d7ad3d7362260f2d3eae8d83d06e21bd1df97", "node_info": null}, "9": {"text": "GPTListIndex is a simple list-based data structure used to answer queries. During index construction, GPTListIndex takes in a dataset of text documents as input, chunks them up into smaller document chunks, and concatenates them into a list. During query-time, GPT List Index constructs an answer using the _create and refine_ paradigm. An initial answer to the query is constructed using the first text chunk. The answer is then _refined_ through feeding in subsequent text chunks as context. GPTListIndex also provides methods for saving and loading the index from disk, as well as methods for inserting and deleting documents from the index.", "doc_id": null, "embedding": null, "extra_info": null, "index": 9, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"9": {"text": "GPTListIndex is a simple list-based data structure used to answer queries. During index construction, GPTListIndex takes in a dataset of text documents as input, chunks them up into smaller document chunks, and concatenates them into a list. During query-time, GPT List Index constructs an answer using the _create and refine_ paradigm. An initial answer to the query is constructed using the first text chunk. The answer is then _refined_ through feeding in subsequent text chunks as context. GPTListIndex also provides methods for saving and loading the index from disk, as well as methods for inserting and deleting documents from the index.", "doc_id": null, "embedding": null, "extra_info": null, "index": 9, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}