{"index_struct": {"text": "\nThe GPTListIndexEmbeddingQuery is a query for GPTListIndex that uses an embedding model to retrieve the top-k nodes by embedding similarity to the query. GPTListIndexQuery is a query for GPTListIndex that traverses each node in sequence and synthesizes a response across all nodes. Both classes take arguments such as text_qa_template, refine_template, index_struct, similarity_top_k, and embed_model.", "doc_id": "e861a077-37cb-467a-a6f5-d1f20e870fa1", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Query classes for list indices.\"\"\"\n\nfrom gpt_index.indices.query.list.embedding_query import GPTListIndexEmbeddingQuery\nfrom gpt_index.indices.query.list.query import GPTListIndexQuery\n\n__all__ = [\"GPTListIndexEmbeddingQuery\", \"GPTListIndexQuery\"]\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/__init__.py", "file_name": "__init__.py"}, "index": 0, "child_indices": [], "ref_doc_id": "795cc1c5df2839027cbf4cb474d8acb4cddbd939", "node_info": null}, "1": {"text": "\"\"\"Embedding query for list index.\"\"\"\nimport logging\nfrom typing import Any, List, Optional, Tuple\n\nfrom gpt_index.data_structs.data_structs import IndexList, Node\nfrom gpt_index.embeddings.base import BaseEmbedding\nfrom gpt_index.indices.query.embedding_utils import (\n    SimilarityTracker,\n    get_top_k_embeddings,\n)\nfrom gpt_index.indices.query.list.query import BaseGPTListIndexQuery\n\n\nclass GPTListIndexEmbeddingQuery(BaseGPTListIndexQuery):\n    \"\"\"GPTListIndex query.\n\n    An embedding-based query for GPTListIndex, which traverses\n    each node in sequence and retrieves top-k nodes by\n    embedding similarity to the query.\n    Set when `mode=\"embedding\"` in `query` method of `GPTListIndex`.\n\n    .. code-block:: python\n\n        response = index.query(\"<query_str>\", mode=\"embedding\")\n\n    See", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/embedding_query.py", "file_name": "embedding_query.py"}, "index": 1, "child_indices": [], "ref_doc_id": "e71bcbd161ee6d598676e20c22af9f62e8b11045", "node_info": null}, "2": {"text": "mode=\"embedding\")\n\n    See BaseGPTListIndexQuery for arguments.\n\n    \"\"\"\n\n    def __init__(\n        self,\n        index_struct: IndexList,\n        similarity_top_k: Optional[int] = 1,\n        embed_model: Optional[BaseEmbedding] = None,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Initialize params.\"\"\"\n        super().__init__(\n            index_struct=index_struct,\n            embed_model=embed_model,\n            **kwargs,\n        )\n        self.similarity_top_k = similarity_top_k\n\n    def _get_nodes_for_response(\n        self,\n        query_str:", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/embedding_query.py", "file_name": "embedding_query.py"}, "index": 2, "child_indices": [], "ref_doc_id": "e71bcbd161ee6d598676e20c22af9f62e8b11045", "node_info": null}, "3": {"text": "  self,\n        query_str: str,\n        similarity_tracker: Optional[SimilarityTracker] = None,\n    ) -> List[Node]:\n        \"\"\"Get nodes for response.\"\"\"\n        nodes = self.index_struct.nodes\n        # top k nodes\n        query_embedding, node_embeddings = self._get_embeddings(query_str, nodes)\n\n        top_similarities, top_idxs = get_top_k_embeddings(\n            self._embed_model,\n            query_embedding,\n            node_embeddings,\n            similarity_top_k=self.similarity_top_k,\n            embedding_ids=list(range(len(nodes))),\n        )\n\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/embedding_query.py", "file_name": "embedding_query.py"}, "index": 3, "child_indices": [], "ref_doc_id": "e71bcbd161ee6d598676e20c22af9f62e8b11045", "node_info": null}, "4": {"text": "       )\n\n        top_k_nodes = [nodes[i] for i in top_idxs]\n\n        if similarity_tracker is not None:\n            for node, similarity in zip(top_k_nodes, top_similarities):\n                similarity_tracker.add(node, similarity)\n\n        logging.debug(f\"> Top {len(top_idxs)} nodes:\\n\")\n        nl = \"\\n\"\n        logging.debug(f\"{ nl.join([n.get_text() for n in top_k_nodes]) }\")\n        return top_k_nodes\n\n    def _get_embeddings(\n        self, query_str: str, nodes: List[Node]\n    ) -> Tuple[List[float], List[List[float]]]:\n        \"\"\"Get top", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/embedding_query.py", "file_name": "embedding_query.py"}, "index": 4, "child_indices": [], "ref_doc_id": "e71bcbd161ee6d598676e20c22af9f62e8b11045", "node_info": null}, "5": {"text": "       \"\"\"Get top nodes by similarity to the query.\"\"\"\n        query_embedding = self._embed_model.get_query_embedding(query_str)\n        node_embeddings: List[List[float]] = []\n        for node in self.index_struct.nodes:\n            if node.embedding is not None:\n                text_embedding = node.embedding\n            else:\n                text_embedding = self._embed_model.get_text_embedding(node.get_text())\n                node.embedding = text_embedding\n\n            node_embeddings.append(text_embedding)\n        return query_embedding, node_embeddings\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/embedding_query.py", "file_name": "embedding_query.py"}, "index": 5, "child_indices": [], "ref_doc_id": "e71bcbd161ee6d598676e20c22af9f62e8b11045", "node_info": null}, "6": {"text": "\"\"\"Default query for GPTListIndex.\"\"\"\nfrom typing import List, Optional\n\nfrom gpt_index.data_structs.data_structs import IndexList, Node\nfrom gpt_index.indices.query.base import BaseGPTIndexQuery\nfrom gpt_index.indices.query.embedding_utils import SimilarityTracker\n\n\nclass BaseGPTListIndexQuery(BaseGPTIndexQuery[IndexList]):\n    \"\"\"GPTListIndex query.\n\n    Arguments are shared among subclasses.\n\n    Args:\n        text_qa_template (Optional[QuestionAnswerPrompt]): A Question Answering Prompt\n            (see :ref:`Prompt-Templates`).\n        refine_template (Optional[RefinePrompt]): A Refinement Prompt\n            (see :ref:`Prompt-Templates`).\n\n    \"\"\"\n\n\nclass GPTListIndexQuery(BaseGPTListIndexQuery):\n    \"\"\"GPTListIndex query.\n\n    The default query mode for GPTListIndex, which traverses\n ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/query.py", "file_name": "query.py"}, "index": 6, "child_indices": [], "ref_doc_id": "bd6aa1b66d7aceaee608581629f7c7cb293929b2", "node_info": null}, "7": {"text": "The default query mode for GPTListIndex, which traverses\n    each node in sequence and synthesizes a response across all nodes\n    (with an optional keyword filter).\n    Set when `mode=\"default\"` in `query` method of `GPTListIndex`.\n\n    .. code-block:: python\n\n        response = index.query(\"<query_str>\", mode=\"default\")\n\n    See BaseGPTListIndexQuery for arguments.\n\n    \"\"\"\n\n    def _get_nodes_for_response(\n        self,\n        query_str: str,\n        similarity_tracker: Optional[SimilarityTracker] = None,\n    ) -> List[Node]:\n        \"\"\"Get nodes for response.\"\"\"\n        return self.index_struct.nodes\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/query.py", "file_name": "query.py"}, "index": 7, "child_indices": [], "ref_doc_id": "bd6aa1b66d7aceaee608581629f7c7cb293929b2", "node_info": null}, "8": {"text": "This code file contains two classes, GPTListIndexEmbeddingQuery and GPTListIndexQuery, which are used to query a GPTListIndex. GPTListIndexEmbeddingQuery uses an embedding model to retrieve top-k nodes by embedding similarity to the query, while GPTListIndexQuery traverses each node in sequence and synthesizes a response across all nodes. Both classes take arguments such as text_qa_template, refine_template, index_struct, similarity_top_k, and embed_model.", "doc_id": null, "embedding": null, "extra_info": null, "index": 8, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"8": {"text": "This code file contains two classes, GPTListIndexEmbeddingQuery and GPTListIndexQuery, which are used to query a GPTListIndex. GPTListIndexEmbeddingQuery uses an embedding model to retrieve top-k nodes by embedding similarity to the query, while GPTListIndexQuery traverses each node in sequence and synthesizes a response across all nodes. Both classes take arguments such as text_qa_template, refine_template, index_struct, similarity_top_k, and embed_model.", "doc_id": null, "embedding": null, "extra_info": null, "index": 8, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"795cc1c5df2839027cbf4cb474d8acb4cddbd939": {"text": "\"\"\"Query classes for list indices.\"\"\"\n\nfrom gpt_index.indices.query.list.embedding_query import GPTListIndexEmbeddingQuery\nfrom gpt_index.indices.query.list.query import GPTListIndexQuery\n\n__all__ = [\"GPTListIndexEmbeddingQuery\", \"GPTListIndexQuery\"]\n", "doc_id": "795cc1c5df2839027cbf4cb474d8acb4cddbd939", "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/__init__.py", "file_name": "__init__.py"}, "__type__": "Document"}, "e71bcbd161ee6d598676e20c22af9f62e8b11045": {"text": "\"\"\"Embedding query for list index.\"\"\"\nimport logging\nfrom typing import Any, List, Optional, Tuple\n\nfrom gpt_index.data_structs.data_structs import IndexList, Node\nfrom gpt_index.embeddings.base import BaseEmbedding\nfrom gpt_index.indices.query.embedding_utils import (\n    SimilarityTracker,\n    get_top_k_embeddings,\n)\nfrom gpt_index.indices.query.list.query import BaseGPTListIndexQuery\n\n\nclass GPTListIndexEmbeddingQuery(BaseGPTListIndexQuery):\n    \"\"\"GPTListIndex query.\n\n    An embedding-based query for GPTListIndex, which traverses\n    each node in sequence and retrieves top-k nodes by\n    embedding similarity to the query.\n    Set when `mode=\"embedding\"` in `query` method of `GPTListIndex`.\n\n    .. code-block:: python\n\n        response = index.query(\"<query_str>\", mode=\"embedding\")\n\n    See BaseGPTListIndexQuery for arguments.\n\n    \"\"\"\n\n    def __init__(\n        self,\n        index_struct: IndexList,\n        similarity_top_k: Optional[int] = 1,\n        embed_model: Optional[BaseEmbedding] = None,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Initialize params.\"\"\"\n        super().__init__(\n            index_struct=index_struct,\n            embed_model=embed_model,\n            **kwargs,\n        )\n        self.similarity_top_k = similarity_top_k\n\n    def _get_nodes_for_response(\n        self,\n        query_str: str,\n        similarity_tracker: Optional[SimilarityTracker] = None,\n    ) -> List[Node]:\n        \"\"\"Get nodes for response.\"\"\"\n        nodes = self.index_struct.nodes\n        # top k nodes\n        query_embedding, node_embeddings = self._get_embeddings(query_str, nodes)\n\n        top_similarities, top_idxs = get_top_k_embeddings(\n            self._embed_model,\n            query_embedding,\n            node_embeddings,\n            similarity_top_k=self.similarity_top_k,\n            embedding_ids=list(range(len(nodes))),\n        )\n\n        top_k_nodes = [nodes[i] for i in top_idxs]\n\n        if similarity_tracker is not None:\n            for node, similarity in zip(top_k_nodes, top_similarities):\n                similarity_tracker.add(node, similarity)\n\n        logging.debug(f\"> Top {len(top_idxs)} nodes:\\n\")\n        nl = \"\\n\"\n        logging.debug(f\"{ nl.join([n.get_text() for n in top_k_nodes]) }\")\n        return top_k_nodes\n\n    def _get_embeddings(\n        self, query_str: str, nodes: List[Node]\n    ) -> Tuple[List[float], List[List[float]]]:\n        \"\"\"Get top nodes by similarity to the query.\"\"\"\n        query_embedding = self._embed_model.get_query_embedding(query_str)\n        node_embeddings: List[List[float]] = []\n        for node in self.index_struct.nodes:\n            if node.embedding is not None:\n                text_embedding = node.embedding\n            else:\n                text_embedding = self._embed_model.get_text_embedding(node.get_text())\n                node.embedding = text_embedding\n\n            node_embeddings.append(text_embedding)\n        return query_embedding, node_embeddings\n", "doc_id": "e71bcbd161ee6d598676e20c22af9f62e8b11045", "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/embedding_query.py", "file_name": "embedding_query.py"}, "__type__": "Document"}, "bd6aa1b66d7aceaee608581629f7c7cb293929b2": {"text": "\"\"\"Default query for GPTListIndex.\"\"\"\nfrom typing import List, Optional\n\nfrom gpt_index.data_structs.data_structs import IndexList, Node\nfrom gpt_index.indices.query.base import BaseGPTIndexQuery\nfrom gpt_index.indices.query.embedding_utils import SimilarityTracker\n\n\nclass BaseGPTListIndexQuery(BaseGPTIndexQuery[IndexList]):\n    \"\"\"GPTListIndex query.\n\n    Arguments are shared among subclasses.\n\n    Args:\n        text_qa_template (Optional[QuestionAnswerPrompt]): A Question Answering Prompt\n            (see :ref:`Prompt-Templates`).\n        refine_template (Optional[RefinePrompt]): A Refinement Prompt\n            (see :ref:`Prompt-Templates`).\n\n    \"\"\"\n\n\nclass GPTListIndexQuery(BaseGPTListIndexQuery):\n    \"\"\"GPTListIndex query.\n\n    The default query mode for GPTListIndex, which traverses\n    each node in sequence and synthesizes a response across all nodes\n    (with an optional keyword filter).\n    Set when `mode=\"default\"` in `query` method of `GPTListIndex`.\n\n    .. code-block:: python\n\n        response = index.query(\"<query_str>\", mode=\"default\")\n\n    See BaseGPTListIndexQuery for arguments.\n\n    \"\"\"\n\n    def _get_nodes_for_response(\n        self,\n        query_str: str,\n        similarity_tracker: Optional[SimilarityTracker] = None,\n    ) -> List[Node]:\n        \"\"\"Get nodes for response.\"\"\"\n        return self.index_struct.nodes\n", "doc_id": "bd6aa1b66d7aceaee608581629f7c7cb293929b2", "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/query.py", "file_name": "query.py"}, "__type__": "Document"}, "e861a077-37cb-467a-a6f5-d1f20e870fa1": {"text": "\nThe GPTListIndexEmbeddingQuery is a query for GPTListIndex that uses an embedding model to retrieve the top-k nodes by embedding similarity to the query. GPTListIndexQuery is a query for GPTListIndex that traverses each node in sequence and synthesizes a response across all nodes. Both classes take arguments such as text_qa_template, refine_template, index_struct, similarity_top_k, and embed_model.", "doc_id": "e861a077-37cb-467a-a6f5-d1f20e870fa1", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Query classes for list indices.\"\"\"\n\nfrom gpt_index.indices.query.list.embedding_query import GPTListIndexEmbeddingQuery\nfrom gpt_index.indices.query.list.query import GPTListIndexQuery\n\n__all__ = [\"GPTListIndexEmbeddingQuery\", \"GPTListIndexQuery\"]\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/__init__.py", "file_name": "__init__.py"}, "index": 0, "child_indices": [], "ref_doc_id": "795cc1c5df2839027cbf4cb474d8acb4cddbd939", "node_info": null}, "1": {"text": "\"\"\"Embedding query for list index.\"\"\"\nimport logging\nfrom typing import Any, List, Optional, Tuple\n\nfrom gpt_index.data_structs.data_structs import IndexList, Node\nfrom gpt_index.embeddings.base import BaseEmbedding\nfrom gpt_index.indices.query.embedding_utils import (\n    SimilarityTracker,\n    get_top_k_embeddings,\n)\nfrom gpt_index.indices.query.list.query import BaseGPTListIndexQuery\n\n\nclass GPTListIndexEmbeddingQuery(BaseGPTListIndexQuery):\n    \"\"\"GPTListIndex query.\n\n    An embedding-based query for GPTListIndex, which traverses\n    each node in sequence and retrieves top-k nodes by\n    embedding similarity to the query.\n    Set when `mode=\"embedding\"` in `query` method of `GPTListIndex`.\n\n    .. code-block:: python\n\n        response = index.query(\"<query_str>\", mode=\"embedding\")\n\n    See", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/embedding_query.py", "file_name": "embedding_query.py"}, "index": 1, "child_indices": [], "ref_doc_id": "e71bcbd161ee6d598676e20c22af9f62e8b11045", "node_info": null}, "2": {"text": "mode=\"embedding\")\n\n    See BaseGPTListIndexQuery for arguments.\n\n    \"\"\"\n\n    def __init__(\n        self,\n        index_struct: IndexList,\n        similarity_top_k: Optional[int] = 1,\n        embed_model: Optional[BaseEmbedding] = None,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Initialize params.\"\"\"\n        super().__init__(\n            index_struct=index_struct,\n            embed_model=embed_model,\n            **kwargs,\n        )\n        self.similarity_top_k = similarity_top_k\n\n    def _get_nodes_for_response(\n        self,\n        query_str:", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/embedding_query.py", "file_name": "embedding_query.py"}, "index": 2, "child_indices": [], "ref_doc_id": "e71bcbd161ee6d598676e20c22af9f62e8b11045", "node_info": null}, "3": {"text": "  self,\n        query_str: str,\n        similarity_tracker: Optional[SimilarityTracker] = None,\n    ) -> List[Node]:\n        \"\"\"Get nodes for response.\"\"\"\n        nodes = self.index_struct.nodes\n        # top k nodes\n        query_embedding, node_embeddings = self._get_embeddings(query_str, nodes)\n\n        top_similarities, top_idxs = get_top_k_embeddings(\n            self._embed_model,\n            query_embedding,\n            node_embeddings,\n            similarity_top_k=self.similarity_top_k,\n            embedding_ids=list(range(len(nodes))),\n        )\n\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/embedding_query.py", "file_name": "embedding_query.py"}, "index": 3, "child_indices": [], "ref_doc_id": "e71bcbd161ee6d598676e20c22af9f62e8b11045", "node_info": null}, "4": {"text": "       )\n\n        top_k_nodes = [nodes[i] for i in top_idxs]\n\n        if similarity_tracker is not None:\n            for node, similarity in zip(top_k_nodes, top_similarities):\n                similarity_tracker.add(node, similarity)\n\n        logging.debug(f\"> Top {len(top_idxs)} nodes:\\n\")\n        nl = \"\\n\"\n        logging.debug(f\"{ nl.join([n.get_text() for n in top_k_nodes]) }\")\n        return top_k_nodes\n\n    def _get_embeddings(\n        self, query_str: str, nodes: List[Node]\n    ) -> Tuple[List[float], List[List[float]]]:\n        \"\"\"Get top", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/embedding_query.py", "file_name": "embedding_query.py"}, "index": 4, "child_indices": [], "ref_doc_id": "e71bcbd161ee6d598676e20c22af9f62e8b11045", "node_info": null}, "5": {"text": "       \"\"\"Get top nodes by similarity to the query.\"\"\"\n        query_embedding = self._embed_model.get_query_embedding(query_str)\n        node_embeddings: List[List[float]] = []\n        for node in self.index_struct.nodes:\n            if node.embedding is not None:\n                text_embedding = node.embedding\n            else:\n                text_embedding = self._embed_model.get_text_embedding(node.get_text())\n                node.embedding = text_embedding\n\n            node_embeddings.append(text_embedding)\n        return query_embedding, node_embeddings\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/embedding_query.py", "file_name": "embedding_query.py"}, "index": 5, "child_indices": [], "ref_doc_id": "e71bcbd161ee6d598676e20c22af9f62e8b11045", "node_info": null}, "6": {"text": "\"\"\"Default query for GPTListIndex.\"\"\"\nfrom typing import List, Optional\n\nfrom gpt_index.data_structs.data_structs import IndexList, Node\nfrom gpt_index.indices.query.base import BaseGPTIndexQuery\nfrom gpt_index.indices.query.embedding_utils import SimilarityTracker\n\n\nclass BaseGPTListIndexQuery(BaseGPTIndexQuery[IndexList]):\n    \"\"\"GPTListIndex query.\n\n    Arguments are shared among subclasses.\n\n    Args:\n        text_qa_template (Optional[QuestionAnswerPrompt]): A Question Answering Prompt\n            (see :ref:`Prompt-Templates`).\n        refine_template (Optional[RefinePrompt]): A Refinement Prompt\n            (see :ref:`Prompt-Templates`).\n\n    \"\"\"\n\n\nclass GPTListIndexQuery(BaseGPTListIndexQuery):\n    \"\"\"GPTListIndex query.\n\n    The default query mode for GPTListIndex, which traverses\n ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/query.py", "file_name": "query.py"}, "index": 6, "child_indices": [], "ref_doc_id": "bd6aa1b66d7aceaee608581629f7c7cb293929b2", "node_info": null}, "7": {"text": "The default query mode for GPTListIndex, which traverses\n    each node in sequence and synthesizes a response across all nodes\n    (with an optional keyword filter).\n    Set when `mode=\"default\"` in `query` method of `GPTListIndex`.\n\n    .. code-block:: python\n\n        response = index.query(\"<query_str>\", mode=\"default\")\n\n    See BaseGPTListIndexQuery for arguments.\n\n    \"\"\"\n\n    def _get_nodes_for_response(\n        self,\n        query_str: str,\n        similarity_tracker: Optional[SimilarityTracker] = None,\n    ) -> List[Node]:\n        \"\"\"Get nodes for response.\"\"\"\n        return self.index_struct.nodes\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/query.py", "file_name": "query.py"}, "index": 7, "child_indices": [], "ref_doc_id": "bd6aa1b66d7aceaee608581629f7c7cb293929b2", "node_info": null}, "8": {"text": "This code file contains two classes, GPTListIndexEmbeddingQuery and GPTListIndexQuery, which are used to query a GPTListIndex. GPTListIndexEmbeddingQuery uses an embedding model to retrieve top-k nodes by embedding similarity to the query, while GPTListIndexQuery traverses each node in sequence and synthesizes a response across all nodes. Both classes take arguments such as text_qa_template, refine_template, index_struct, similarity_top_k, and embed_model.", "doc_id": null, "embedding": null, "extra_info": null, "index": 8, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"8": {"text": "This code file contains two classes, GPTListIndexEmbeddingQuery and GPTListIndexQuery, which are used to query a GPTListIndex. GPTListIndexEmbeddingQuery uses an embedding model to retrieve top-k nodes by embedding similarity to the query, while GPTListIndexQuery traverses each node in sequence and synthesizes a response across all nodes. Both classes take arguments such as text_qa_template, refine_template, index_struct, similarity_top_k, and embed_model.", "doc_id": null, "embedding": null, "extra_info": null, "index": 8, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}