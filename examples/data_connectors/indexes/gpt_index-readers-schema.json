{"index_struct": {"text": "\n__init__.py: This is an initialization file used to set up the environment for the other files.\n\nbase.py: This file contains a class called Document which is used to connect to data sources and contains methods to get the Document type, convert the struct to LangChain document format, and convert the struct from LangChain document format.", "doc_id": "b41de870-6672-4afc-9d1c-9e4a1bd83404", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Init file.\"\"\"\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/schema/__init__.py", "file_name": "__init__.py"}, "index": 0, "child_indices": [], "ref_doc_id": "1d4640565ae2765d9ca96a509dc9809217f62f2f", "node_info": null}, "1": {"text": "\"\"\"Base schema for readers.\"\"\"\nfrom dataclasses import dataclass\n\nfrom langchain.docstore.document import Document as LCDocument\n\nfrom gpt_index.schema import BaseDocument\n\n\n@dataclass\nclass Document(BaseDocument):\n    \"\"\"Generic interface for a data document.\n\n    This document connects to data sources.\n\n    \"\"\"\n\n    def __post_init__(self) -> None:\n        \"\"\"Post init.\"\"\"\n        if self.text is None:\n            raise ValueError(\"text field not set.\")\n\n    @classmethod\n    def get_type(cls) -> str:\n        \"\"\"Get Document type.\"\"\"\n        return \"Document\"\n\n    def to_langchain_format(self) -> LCDocument:\n        \"\"\"Convert struct to LangChain document format.\"\"\"\n        metadata = self.extra_info or {}\n        return LCDocument(page_content=self.text, metadata=metadata)\n\n   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/schema/base.py", "file_name": "base.py"}, "index": 1, "child_indices": [], "ref_doc_id": "753bf93eae607ae72cccb26ebc7ec69ede6abb9e", "node_info": null}, "2": {"text": "metadata=metadata)\n\n    @classmethod\n    def from_langchain_format(cls, doc: LCDocument) -> \"Document\":\n        \"\"\"Convert struct from LangChain document format.\"\"\"\n        return cls(text=doc.page_content, extra_info=doc.metadata)\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/schema/base.py", "file_name": "base.py"}, "index": 2, "child_indices": [], "ref_doc_id": "753bf93eae607ae72cccb26ebc7ec69ede6abb9e", "node_info": null}, "3": {"text": "This code file contains two files, __init__.py and base.py, which are used to create a generic interface for a data document. The __init__.py file is an init file, while the base.py file contains a class called Document which is used to connect to data sources. It also contains methods to get the Document type, convert the struct to LangChain document format, and convert the struct from LangChain document format.", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"3": {"text": "This code file contains two files, __init__.py and base.py, which are used to create a generic interface for a data document. The __init__.py file is an init file, while the base.py file contains a class called Document which is used to connect to data sources. It also contains methods to get the Document type, convert the struct to LangChain document format, and convert the struct from LangChain document format.", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"1d4640565ae2765d9ca96a509dc9809217f62f2f": {"text": "\"\"\"Init file.\"\"\"\n", "doc_id": "1d4640565ae2765d9ca96a509dc9809217f62f2f", "embedding": null, "extra_info": {"file_path": "gpt_index/readers/schema/__init__.py", "file_name": "__init__.py"}, "__type__": "Document"}, "753bf93eae607ae72cccb26ebc7ec69ede6abb9e": {"text": "\"\"\"Base schema for readers.\"\"\"\nfrom dataclasses import dataclass\n\nfrom langchain.docstore.document import Document as LCDocument\n\nfrom gpt_index.schema import BaseDocument\n\n\n@dataclass\nclass Document(BaseDocument):\n    \"\"\"Generic interface for a data document.\n\n    This document connects to data sources.\n\n    \"\"\"\n\n    def __post_init__(self) -> None:\n        \"\"\"Post init.\"\"\"\n        if self.text is None:\n            raise ValueError(\"text field not set.\")\n\n    @classmethod\n    def get_type(cls) -> str:\n        \"\"\"Get Document type.\"\"\"\n        return \"Document\"\n\n    def to_langchain_format(self) -> LCDocument:\n        \"\"\"Convert struct to LangChain document format.\"\"\"\n        metadata = self.extra_info or {}\n        return LCDocument(page_content=self.text, metadata=metadata)\n\n    @classmethod\n    def from_langchain_format(cls, doc: LCDocument) -> \"Document\":\n        \"\"\"Convert struct from LangChain document format.\"\"\"\n        return cls(text=doc.page_content, extra_info=doc.metadata)\n", "doc_id": "753bf93eae607ae72cccb26ebc7ec69ede6abb9e", "embedding": null, "extra_info": {"file_path": "gpt_index/readers/schema/base.py", "file_name": "base.py"}, "__type__": "Document"}, "b41de870-6672-4afc-9d1c-9e4a1bd83404": {"text": "\n__init__.py: This is an initialization file used to set up the environment for the other files.\n\nbase.py: This file contains a class called Document which is used to connect to data sources and contains methods to get the Document type, convert the struct to LangChain document format, and convert the struct from LangChain document format.", "doc_id": "b41de870-6672-4afc-9d1c-9e4a1bd83404", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Init file.\"\"\"\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/schema/__init__.py", "file_name": "__init__.py"}, "index": 0, "child_indices": [], "ref_doc_id": "1d4640565ae2765d9ca96a509dc9809217f62f2f", "node_info": null}, "1": {"text": "\"\"\"Base schema for readers.\"\"\"\nfrom dataclasses import dataclass\n\nfrom langchain.docstore.document import Document as LCDocument\n\nfrom gpt_index.schema import BaseDocument\n\n\n@dataclass\nclass Document(BaseDocument):\n    \"\"\"Generic interface for a data document.\n\n    This document connects to data sources.\n\n    \"\"\"\n\n    def __post_init__(self) -> None:\n        \"\"\"Post init.\"\"\"\n        if self.text is None:\n            raise ValueError(\"text field not set.\")\n\n    @classmethod\n    def get_type(cls) -> str:\n        \"\"\"Get Document type.\"\"\"\n        return \"Document\"\n\n    def to_langchain_format(self) -> LCDocument:\n        \"\"\"Convert struct to LangChain document format.\"\"\"\n        metadata = self.extra_info or {}\n        return LCDocument(page_content=self.text, metadata=metadata)\n\n   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/schema/base.py", "file_name": "base.py"}, "index": 1, "child_indices": [], "ref_doc_id": "753bf93eae607ae72cccb26ebc7ec69ede6abb9e", "node_info": null}, "2": {"text": "metadata=metadata)\n\n    @classmethod\n    def from_langchain_format(cls, doc: LCDocument) -> \"Document\":\n        \"\"\"Convert struct from LangChain document format.\"\"\"\n        return cls(text=doc.page_content, extra_info=doc.metadata)\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/schema/base.py", "file_name": "base.py"}, "index": 2, "child_indices": [], "ref_doc_id": "753bf93eae607ae72cccb26ebc7ec69ede6abb9e", "node_info": null}, "3": {"text": "This code file contains two files, __init__.py and base.py, which are used to create a generic interface for a data document. The __init__.py file is an init file, while the base.py file contains a class called Document which is used to connect to data sources. It also contains methods to get the Document type, convert the struct to LangChain document format, and convert the struct from LangChain document format.", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"3": {"text": "This code file contains two files, __init__.py and base.py, which are used to create a generic interface for a data document. The __init__.py file is an init file, while the base.py file contains a class called Document which is used to connect to data sources. It also contains methods to get the Document type, convert the struct to LangChain document format, and convert the struct from LangChain document format.", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}