{"index_struct": {"text": "\nDocument 1: This document contains code for creating a Response object, which contains the response text, a list of SourceNodes, and extra info. It also has a method to get formatted sources text, which truncates the source text to a specified length.\n\nDocument 2: This document contains code for creating a SourceNode object, which contains the source text and the corresponding document id, as well as extra info and node info.", "doc_id": "da2d00a3-c539-4f34-9bf9-12494c067ed0", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Init params.\"\"\"\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/response/__init__.py", "file_name": "__init__.py"}, "index": 0, "child_indices": [], "ref_doc_id": "c637335013c599b07de054fba07b47ecb86ad3e8", "node_info": null}, "1": {"text": "\"\"\"Response schema.\"\"\"\n\nfrom dataclasses import dataclass, field\nfrom typing import Any, Dict, List, Optional\n\nfrom dataclasses_json import DataClassJsonMixin\n\nfrom gpt_index.data_structs.data_structs import Node\nfrom gpt_index.indices.utils import truncate_text\n\n\n@dataclass\nclass SourceNode(DataClassJsonMixin):\n    \"\"\"Source node.\n\n    User-facing class containing the source text and the corresponding document id.\n\n    \"\"\"\n\n    source_text: str\n    doc_id: Optional[str]\n    extra_info: Optional[Dict[str, Any]] = None\n    node_info: Optional[Dict[str, Any]] = None\n\n    # distance score between node and query, if applicable\n    similarity: Optional[float] = None\n\n    @classmethod\n    def from_node(cls, node: Node, similarity: Optional[float] = None) -> \"SourceNode\":\n        \"\"\"Create a SourceNode from a Node.\"\"\"\n        return", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/response/schema.py", "file_name": "schema.py"}, "index": 1, "child_indices": [], "ref_doc_id": "fd2d3c7be5495fb5a7305634c05756b03290929d", "node_info": null}, "2": {"text": "SourceNode from a Node.\"\"\"\n        return cls(\n            source_text=node.get_text(),\n            doc_id=node.ref_doc_id,\n            extra_info=node.extra_info,\n            node_info=node.node_info,\n            similarity=similarity,\n        )\n\n    @classmethod\n    def from_nodes(cls, nodes: List[Node]) -> List[\"SourceNode\"]:\n        \"\"\"Create a list of SourceNodes from a list of Nodes.\"\"\"\n        return [cls.from_node(node) for node in nodes]\n\n\n@dataclass\nclass Response:\n    \"\"\"Response.\n\n    Attributes:\n        response: The response text.\n\n    \"\"\"\n\n    response: Optional[str]\n    source_nodes: List[SourceNode] =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/response/schema.py", "file_name": "schema.py"}, "index": 2, "child_indices": [], "ref_doc_id": "fd2d3c7be5495fb5a7305634c05756b03290929d", "node_info": null}, "3": {"text": "   source_nodes: List[SourceNode] = field(default_factory=list)\n    extra_info: Optional[Dict[str, Any]] = None\n\n    def __str__(self) -> str:\n        \"\"\"Convert to string representation.\"\"\"\n        return self.response or \"None\"\n\n    def get_formatted_sources(self, length: int = 100) -> str:\n        \"\"\"Get formatted sources text.\"\"\"\n        texts = []\n        for source_node in self.source_nodes:\n            fmt_text_chunk = truncate_text(source_node.source_text, length)\n            doc_id = source_node.doc_id or \"None\"\n            source_text = f\"> Source (Doc id: {doc_id}): {fmt_text_chunk}\"\n            texts.append(source_text)\n    ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/response/schema.py", "file_name": "schema.py"}, "index": 3, "child_indices": [], "ref_doc_id": "fd2d3c7be5495fb5a7305634c05756b03290929d", "node_info": null}, "4": {"text": "  texts.append(source_text)\n        return \"\\n\\n\".join(texts)\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/response/schema.py", "file_name": "schema.py"}, "index": 4, "child_indices": [], "ref_doc_id": "fd2d3c7be5495fb5a7305634c05756b03290929d", "node_info": null}, "5": {"text": "This code file contains two classes, SourceNode and Response, which are used to create a response to a query. SourceNode is a user-facing class that contains the source text and the corresponding document id, as well as extra info and node info. Response contains the response text, a list of SourceNodes, and extra info. It also has a method to get formatted sources text, which truncates the source text to a specified length.", "doc_id": null, "embedding": null, "extra_info": null, "index": 5, "child_indices": [0, 1, 2, 3, 4], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"5": {"text": "This code file contains two classes, SourceNode and Response, which are used to create a response to a query. SourceNode is a user-facing class that contains the source text and the corresponding document id, as well as extra info and node info. Response contains the response text, a list of SourceNodes, and extra info. It also has a method to get formatted sources text, which truncates the source text to a specified length.", "doc_id": null, "embedding": null, "extra_info": null, "index": 5, "child_indices": [0, 1, 2, 3, 4], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"c637335013c599b07de054fba07b47ecb86ad3e8": {"text": "\"\"\"Init params.\"\"\"\n", "doc_id": "c637335013c599b07de054fba07b47ecb86ad3e8", "embedding": null, "extra_info": {"file_path": "gpt_index/response/__init__.py", "file_name": "__init__.py"}, "__type__": "Document"}, "fd2d3c7be5495fb5a7305634c05756b03290929d": {"text": "\"\"\"Response schema.\"\"\"\n\nfrom dataclasses import dataclass, field\nfrom typing import Any, Dict, List, Optional\n\nfrom dataclasses_json import DataClassJsonMixin\n\nfrom gpt_index.data_structs.data_structs import Node\nfrom gpt_index.indices.utils import truncate_text\n\n\n@dataclass\nclass SourceNode(DataClassJsonMixin):\n    \"\"\"Source node.\n\n    User-facing class containing the source text and the corresponding document id.\n\n    \"\"\"\n\n    source_text: str\n    doc_id: Optional[str]\n    extra_info: Optional[Dict[str, Any]] = None\n    node_info: Optional[Dict[str, Any]] = None\n\n    # distance score between node and query, if applicable\n    similarity: Optional[float] = None\n\n    @classmethod\n    def from_node(cls, node: Node, similarity: Optional[float] = None) -> \"SourceNode\":\n        \"\"\"Create a SourceNode from a Node.\"\"\"\n        return cls(\n            source_text=node.get_text(),\n            doc_id=node.ref_doc_id,\n            extra_info=node.extra_info,\n            node_info=node.node_info,\n            similarity=similarity,\n        )\n\n    @classmethod\n    def from_nodes(cls, nodes: List[Node]) -> List[\"SourceNode\"]:\n        \"\"\"Create a list of SourceNodes from a list of Nodes.\"\"\"\n        return [cls.from_node(node) for node in nodes]\n\n\n@dataclass\nclass Response:\n    \"\"\"Response.\n\n    Attributes:\n        response: The response text.\n\n    \"\"\"\n\n    response: Optional[str]\n    source_nodes: List[SourceNode] = field(default_factory=list)\n    extra_info: Optional[Dict[str, Any]] = None\n\n    def __str__(self) -> str:\n        \"\"\"Convert to string representation.\"\"\"\n        return self.response or \"None\"\n\n    def get_formatted_sources(self, length: int = 100) -> str:\n        \"\"\"Get formatted sources text.\"\"\"\n        texts = []\n        for source_node in self.source_nodes:\n            fmt_text_chunk = truncate_text(source_node.source_text, length)\n            doc_id = source_node.doc_id or \"None\"\n            source_text = f\"> Source (Doc id: {doc_id}): {fmt_text_chunk}\"\n            texts.append(source_text)\n        return \"\\n\\n\".join(texts)\n", "doc_id": "fd2d3c7be5495fb5a7305634c05756b03290929d", "embedding": null, "extra_info": {"file_path": "gpt_index/response/schema.py", "file_name": "schema.py"}, "__type__": "Document"}, "da2d00a3-c539-4f34-9bf9-12494c067ed0": {"text": "\nDocument 1: This document contains code for creating a Response object, which contains the response text, a list of SourceNodes, and extra info. It also has a method to get formatted sources text, which truncates the source text to a specified length.\n\nDocument 2: This document contains code for creating a SourceNode object, which contains the source text and the corresponding document id, as well as extra info and node info.", "doc_id": "da2d00a3-c539-4f34-9bf9-12494c067ed0", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Init params.\"\"\"\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/response/__init__.py", "file_name": "__init__.py"}, "index": 0, "child_indices": [], "ref_doc_id": "c637335013c599b07de054fba07b47ecb86ad3e8", "node_info": null}, "1": {"text": "\"\"\"Response schema.\"\"\"\n\nfrom dataclasses import dataclass, field\nfrom typing import Any, Dict, List, Optional\n\nfrom dataclasses_json import DataClassJsonMixin\n\nfrom gpt_index.data_structs.data_structs import Node\nfrom gpt_index.indices.utils import truncate_text\n\n\n@dataclass\nclass SourceNode(DataClassJsonMixin):\n    \"\"\"Source node.\n\n    User-facing class containing the source text and the corresponding document id.\n\n    \"\"\"\n\n    source_text: str\n    doc_id: Optional[str]\n    extra_info: Optional[Dict[str, Any]] = None\n    node_info: Optional[Dict[str, Any]] = None\n\n    # distance score between node and query, if applicable\n    similarity: Optional[float] = None\n\n    @classmethod\n    def from_node(cls, node: Node, similarity: Optional[float] = None) -> \"SourceNode\":\n        \"\"\"Create a SourceNode from a Node.\"\"\"\n        return", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/response/schema.py", "file_name": "schema.py"}, "index": 1, "child_indices": [], "ref_doc_id": "fd2d3c7be5495fb5a7305634c05756b03290929d", "node_info": null}, "2": {"text": "SourceNode from a Node.\"\"\"\n        return cls(\n            source_text=node.get_text(),\n            doc_id=node.ref_doc_id,\n            extra_info=node.extra_info,\n            node_info=node.node_info,\n            similarity=similarity,\n        )\n\n    @classmethod\n    def from_nodes(cls, nodes: List[Node]) -> List[\"SourceNode\"]:\n        \"\"\"Create a list of SourceNodes from a list of Nodes.\"\"\"\n        return [cls.from_node(node) for node in nodes]\n\n\n@dataclass\nclass Response:\n    \"\"\"Response.\n\n    Attributes:\n        response: The response text.\n\n    \"\"\"\n\n    response: Optional[str]\n    source_nodes: List[SourceNode] =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/response/schema.py", "file_name": "schema.py"}, "index": 2, "child_indices": [], "ref_doc_id": "fd2d3c7be5495fb5a7305634c05756b03290929d", "node_info": null}, "3": {"text": "   source_nodes: List[SourceNode] = field(default_factory=list)\n    extra_info: Optional[Dict[str, Any]] = None\n\n    def __str__(self) -> str:\n        \"\"\"Convert to string representation.\"\"\"\n        return self.response or \"None\"\n\n    def get_formatted_sources(self, length: int = 100) -> str:\n        \"\"\"Get formatted sources text.\"\"\"\n        texts = []\n        for source_node in self.source_nodes:\n            fmt_text_chunk = truncate_text(source_node.source_text, length)\n            doc_id = source_node.doc_id or \"None\"\n            source_text = f\"> Source (Doc id: {doc_id}): {fmt_text_chunk}\"\n            texts.append(source_text)\n    ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/response/schema.py", "file_name": "schema.py"}, "index": 3, "child_indices": [], "ref_doc_id": "fd2d3c7be5495fb5a7305634c05756b03290929d", "node_info": null}, "4": {"text": "  texts.append(source_text)\n        return \"\\n\\n\".join(texts)\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/response/schema.py", "file_name": "schema.py"}, "index": 4, "child_indices": [], "ref_doc_id": "fd2d3c7be5495fb5a7305634c05756b03290929d", "node_info": null}, "5": {"text": "This code file contains two classes, SourceNode and Response, which are used to create a response to a query. SourceNode is a user-facing class that contains the source text and the corresponding document id, as well as extra info and node info. Response contains the response text, a list of SourceNodes, and extra info. It also has a method to get formatted sources text, which truncates the source text to a specified length.", "doc_id": null, "embedding": null, "extra_info": null, "index": 5, "child_indices": [0, 1, 2, 3, 4], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"5": {"text": "This code file contains two classes, SourceNode and Response, which are used to create a response to a query. SourceNode is a user-facing class that contains the source text and the corresponding document id, as well as extra info and node info. Response contains the response text, a list of SourceNodes, and extra info. It also has a method to get formatted sources text, which truncates the source text to a specified length.", "doc_id": null, "embedding": null, "extra_info": null, "index": 5, "child_indices": [0, 1, 2, 3, 4], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}