{"index_struct": {"text": "\nThe summaries of the documents are short descriptions of the test being conducted. The summaries are: \"Hello world.\", \"This is a test.\", \"This is another test.\", and \"This is a test v2.\"", "doc_id": "9095bb48-30c9-4e74-bc08-6ec90b352098", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Init file.\"\"\"\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/__init__.py", "file_name": "__init__.py"}, "index": 0, "child_indices": [], "ref_doc_id": "1d4640565ae2765d9ca96a509dc9809217f62f2f", "node_info": null}, "1": {"text": "\"\"\"Test Faiss index.\"\"\"\n\nimport sys\nfrom typing import Any, Dict, List, Tuple\nfrom unittest.mock import MagicMock, patch\n\nimport numpy as np\nimport pytest\n\nfrom gpt_index.embeddings.openai import OpenAIEmbedding\nfrom gpt_index.indices.vector_store.faiss import GPTFaissIndex\nfrom gpt_index.indices.vector_store.simple import GPTSimpleVectorIndex\nfrom gpt_index.readers.schema.base import Document\nfrom tests.mock_utils.mock_decorator import patch_common\nfrom tests.mock_utils.mock_prompts import MOCK_REFINE_PROMPT, MOCK_TEXT_QA_PROMPT\n\n\n@pytest.fixture\ndef struct_kwargs() -> Tuple[Dict, Dict]:\n    \"\"\"Index kwargs.\"\"\"\n    index_kwargs = {\n        \"text_qa_template\": MOCK_TEXT_QA_PROMPT,\n    }\n    query_kwargs = {\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 1, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "2": {"text": "  query_kwargs = {\n        \"text_qa_template\": MOCK_TEXT_QA_PROMPT,\n        \"refine_template\": MOCK_REFINE_PROMPT,\n        \"similarity_top_k\": 1,\n    }\n    return index_kwargs, query_kwargs\n\n\n@pytest.fixture\ndef documents() -> List[Document]:\n    \"\"\"Get documents.\"\"\"\n    # NOTE: one document for now\n    doc_text = (\n        \"Hello world.\\n\"\n        \"This is a test.\\n\"\n        \"This is another test.\\n\"\n        \"This is a test v2.\"\n    )\n    return [Document(doc_text)]\n\n\nclass MockFaissIndex:\n    \"\"\"Mock Faiss index.\"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"Initialize", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 2, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "3": {"text": "Any) -> None:\n        \"\"\"Initialize params.\"\"\"\n        self._index: Dict[int, np.ndarray] = {}\n\n    @property\n    def ntotal(self) -> int:\n        \"\"\"Get ntotal.\"\"\"\n        return len(self._index)\n\n    def add(self, vecs: np.ndarray) -> None:\n        \"\"\"Add vectors to index.\"\"\"\n        for vec in vecs:\n            new_id = len(self._index)\n            self._index[new_id] = vec\n\n    def reset(self) -> None:\n        \"\"\"Reset index.\"\"\"\n        self._index = {}\n\n    def search(self, vec: np.ndarray, k: int) -> Tuple[np.ndarray, np.ndarray]:\n        \"\"\"Search index.\"\"\"\n        # assume", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 3, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "4": {"text": "\"\"\"Search index.\"\"\"\n        # assume query vec is of the form 1 x k\n        # index_mat is n x k\n        index_mat = np.array(list(self._index.values()))\n        # compute distances\n        distances = np.linalg.norm(index_mat - vec, axis=1)\n\n        indices = np.argsort(distances)[:k]\n        sorted_distances = distances[indices][:k]\n\n        # return distances and indices\n        return sorted_distances[np.newaxis, :], indices[np.newaxis, :]\n\n\ndef mock_get_text_embedding(text: str) -> List[float]:\n    \"\"\"Mock get text embedding.\"\"\"\n    # assume dimensions are 5\n    if text == \"Hello world.\":\n        return [1, 0, 0, 0, 0]\n    elif text", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 4, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "5": {"text": "0, 0, 0, 0]\n    elif text == \"This is a test.\":\n        return [0, 1, 0, 0, 0]\n    elif text == \"This is another test.\":\n        return [0, 0, 1, 0, 0]\n    elif text == \"This is a test v2.\":\n        return [0, 0, 0, 1, 0]\n    elif text == \"This is a test v3.\":\n        return [0, 0, 0, 0, 1]\n    elif text == \"This is bar test.\":\n        return [0, 0, 1, 0, 0]\n    elif text == \"Hello world backup.\":\n        # this is used when \"Hello world.\" is deleted.\n        return [1, 0, 0, 0, 0]\n    else:\n        raise ValueError(\"Invalid text for `mock_get_text_embedding`.\")\n\n\ndef", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 5, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "6": {"text": "for `mock_get_text_embedding`.\")\n\n\ndef mock_get_query_embedding(query: str) -> List[float]:\n    \"\"\"Mock get query embedding.\"\"\"\n    return [0, 0, 1, 0, 0]\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"get_text_embedding\", side_effect=mock_get_text_embedding\n)\ndef test_build_faiss(\n    _mock_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_split_text_overlap: Any,\n    _mock_split_text: Any,\n    documents: List[Document],\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test build GPTFaissIndex.\"\"\"\n    # NOTE: mock faiss import\n    sys.modules[\"faiss\"] = MagicMock()\n    # NOTE: mock", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 6, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "7": {"text": "= MagicMock()\n    # NOTE: mock faiss index\n    faiss_index = MockFaissIndex()\n\n    index_kwargs, query_kwargs = struct_kwargs\n\n    index = GPTFaissIndex(documents=documents, faiss_index=faiss_index, **index_kwargs)\n    assert len(index.index_struct.nodes_dict) == 4\n    # check contents of nodes\n    assert index.index_struct.get_node(\"0\").text == \"Hello world.\"\n    assert index.index_struct.get_node(\"1\").text == \"This is a test.\"\n    assert index.index_struct.get_node(\"2\").text == \"This is another test.\"\n    assert index.index_struct.get_node(\"3\").text == \"This is a test v2.\"\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"get_text_embedding\", side_effect=mock_get_text_embedding\n)\ndef test_faiss_insert(\n    _mock_embed: Any,\n ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 7, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "8": {"text": "   _mock_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_split_text_overlap: Any,\n    _mock_split_text: Any,\n    documents: List[Document],\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test build GPTFaissIndex.\"\"\"\n    # NOTE: mock faiss import\n    sys.modules[\"faiss\"] = MagicMock()\n    # NOTE: mock faiss index\n    faiss_index = MockFaissIndex()\n\n    index_kwargs, query_kwargs = struct_kwargs\n\n    index = GPTFaissIndex(documents=documents, faiss_index=faiss_index, **index_kwargs)\n    # insert into index\n    index.insert(Document(text=\"This is a test v3.\"))\n\n    # check contenst of nodes\n    assert", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 8, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "9": {"text": "   # check contenst of nodes\n    assert index.index_struct.get_node(\"3\").text == \"This is a test v2.\"\n    assert index.index_struct.get_node(\"4\").text == \"This is a test v3.\"\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"get_text_embedding\", side_effect=mock_get_text_embedding\n)\n@patch.object(\n    OpenAIEmbedding, \"get_query_embedding\", side_effect=mock_get_query_embedding\n)\ndef test_faiss_query(\n    _mock_query_embed: Any,\n    _mock_text_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_split_text_overlap: Any,\n    _mock_split_text: Any,\n    documents: List[Document],\n    struct_kwargs:", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 9, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "10": {"text": "documents: List[Document],\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test embedding query.\"\"\"\n    # NOTE: mock faiss import\n    sys.modules[\"faiss\"] = MagicMock()\n    # NOTE: mock faiss index\n    faiss_index = MockFaissIndex()\n\n    index_kwargs, query_kwargs = struct_kwargs\n    index = GPTFaissIndex(documents, faiss_index=faiss_index, **index_kwargs)\n\n    # test embedding query\n    query_str = \"What is?\"\n    response = index.query(query_str, **query_kwargs)\n    assert str(response) == (\"What is?:This is another test.\")\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"get_text_embedding\", side_effect=mock_get_text_embedding\n)\ndef test_build_simple(\n    _mock_embed: Any,\n    _mock_init: Any,\n   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 10, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "11": {"text": "   _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_split_text_overlap: Any,\n    _mock_split_text: Any,\n    documents: List[Document],\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test build GPTFaissIndex.\"\"\"\n    index_kwargs, query_kwargs = struct_kwargs\n\n    index = GPTSimpleVectorIndex(documents=documents, **index_kwargs)\n    assert len(index.index_struct.nodes_dict) == 4\n    # check contents of nodes\n    actual_node_tups = [\n        (\"Hello world.\", [1, 0, 0, 0, 0]),\n        (\"This is a test.\", [0, 1, 0, 0, 0]),\n        (\"This is another test.\", [0, 0, 1, 0, 0]),\n        (\"This", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 11, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "12": {"text": "1, 0, 0]),\n        (\"This is a test v2.\", [0, 0, 0, 1, 0]),\n    ]\n    for text_id in index.index_struct.id_map.keys():\n        node = index.index_struct.get_node(text_id)\n        embedding = index.index_struct.embedding_dict[text_id]\n        assert (node.text, embedding) in actual_node_tups\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"get_text_embedding\", side_effect=mock_get_text_embedding\n)\ndef test_simple_insert(\n    _mock_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_split_text_overlap: Any,\n    _mock_split_text: Any,\n    documents:", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 12, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "13": {"text": "Any,\n    documents: List[Document],\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test build GPTFaissIndex.\"\"\"\n    index_kwargs, query_kwargs = struct_kwargs\n\n    index = GPTSimpleVectorIndex(documents=documents, **index_kwargs)\n    # insert into index\n    index.insert(Document(text=\"This is a test v3.\"))\n\n    # check contenst of nodes\n    actual_node_tups = [\n        (\"Hello world.\", [1, 0, 0, 0, 0]),\n        (\"This is a test.\", [0, 1, 0, 0, 0]),\n        (\"This is another test.\", [0, 0, 1, 0, 0]),\n        (\"This is a test v2.\", [0, 0, 0, 1, 0]),\n        (\"This is a test v3.\", [0, 0, 0, 0, 1]),\n    ]\n    for text_id in", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 13, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "14": {"text": "1]),\n    ]\n    for text_id in index.index_struct.id_map.keys():\n        node = index.index_struct.get_node(text_id)\n        embedding = index.index_struct.embedding_dict[text_id]\n        assert (node.text, embedding) in actual_node_tups\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"get_text_embedding\", side_effect=mock_get_text_embedding\n)\ndef test_simple_delete(\n    _mock_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_splitter_overlap: Any,\n    _mock_splitter: Any,\n    documents: List[Document],\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test build GPTFaissIndex.\"\"\"\n ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 14, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "15": {"text": "   \"\"\"Test build GPTFaissIndex.\"\"\"\n    index_kwargs, query_kwargs = struct_kwargs\n\n    new_documents = [\n        Document(\"Hello world.\", doc_id=\"test_id_0\"),\n        Document(\"This is a test.\", doc_id=\"test_id_1\"),\n        Document(\"This is another test.\", doc_id=\"test_id_2\"),\n        Document(\"This is a test v2.\", doc_id=\"test_id_3\"),\n    ]\n    index = GPTSimpleVectorIndex(documents=new_documents, **index_kwargs)\n\n    # test delete\n    index.delete(\"test_id_0\")\n    assert len(index.index_struct.nodes_dict) == 3\n    assert len(index.index_struct.id_map) == 3\n    actual_node_tups = [\n        (\"This is a test.\", [0, 1, 0, 0, 0], \"test_id_1\"),\n      ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 15, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "16": {"text": "0], \"test_id_1\"),\n        (\"This is another test.\", [0, 0, 1, 0, 0], \"test_id_2\"),\n        (\"This is a test v2.\", [0, 0, 0, 1, 0], \"test_id_3\"),\n    ]\n    for text_id in index.index_struct.id_map.keys():\n        node = index.index_struct.get_node(text_id)\n        embedding = index.index_struct.embedding_dict[text_id]\n        assert (node.text, embedding, node.ref_doc_id) in actual_node_tups\n\n    # test insert\n    index.insert(Document(\"Hello world backup.\", doc_id=\"test_id_0\"))\n    assert len(index.index_struct.nodes_dict) == 4\n    assert len(index.index_struct.id_map) == 4\n    actual_node_tups = [\n        (\"Hello world backup.\", [1,", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 16, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "17": {"text": "       (\"Hello world backup.\", [1, 0, 0, 0, 0], \"test_id_0\"),\n        (\"This is a test.\", [0, 1, 0, 0, 0], \"test_id_1\"),\n        (\"This is another test.\", [0, 0, 1, 0, 0], \"test_id_2\"),\n        (\"This is a test v2.\", [0, 0, 0, 1, 0], \"test_id_3\"),\n    ]\n    for text_id in index.index_struct.id_map.keys():\n        node = index.index_struct.get_node(text_id)\n        embedding = index.index_struct.embedding_dict[text_id]\n        assert (node.text, embedding, node.ref_doc_id) in actual_node_tups\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"get_text_embedding\",", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 17, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "18": {"text": " OpenAIEmbedding, \"get_text_embedding\", side_effect=mock_get_text_embedding\n)\n@patch.object(\n    OpenAIEmbedding, \"get_query_embedding\", side_effect=mock_get_query_embedding\n)\ndef test_simple_query(\n    _mock_query_embed: Any,\n    _mock_text_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_split_text_overlap: Any,\n    _mock_split_text: Any,\n    documents: List[Document],\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test embedding query.\"\"\"\n    index_kwargs, query_kwargs = struct_kwargs\n    index = GPTSimpleVectorIndex(documents, **index_kwargs)\n\n    # test embedding query\n    query_str = \"What is?\"\n  ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 18, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "19": {"text": "query\n    query_str = \"What is?\"\n    response = index.query(query_str, **query_kwargs)\n    assert str(response) == (\"What is?:This is another test.\")\n\n    # test with keyword filter (required)\n    query_kwargs_copy = query_kwargs.copy()\n    query_kwargs_copy[\"similarity_top_k\"] = 5\n    response = index.query(query_str, **query_kwargs_copy, required_keywords=[\"Hello\"])\n    assert str(response) == (\"What is?:Hello world.\")\n\n    # test with keyword filter (exclude)\n    # insert into index\n    index.insert(Document(text=\"This is bar test.\"))\n    query_kwargs_copy = query_kwargs.copy()\n    query_kwargs_copy[\"similarity_top_k\"] = 2\n    response = index.query(query_str, **query_kwargs_copy, exclude_keywords=[\"another\"])\n    assert str(response) == (\"What is?:This is bar", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 19, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "20": {"text": "   assert str(response) == (\"What is?:This is bar test.\")\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"_get_text_embedding\", side_effect=mock_get_text_embedding\n)\n@patch.object(\n    OpenAIEmbedding, \"_get_query_embedding\", side_effect=mock_get_query_embedding\n)\ndef test_query_and_count_tokens(\n    _mock_query_embed: Any,\n    _mock_text_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_split_text_overlap: Any,\n    _mock_split_text: Any,\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test embedding query.\"\"\"\n    doc_text = (\n        \"Hello world.\\n\"\n        \"This", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 20, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "21": {"text": "world.\\n\"\n        \"This is a test.\\n\"\n        \"This is another test.\\n\"\n        \"This is a test v2.\"\n    )\n    document = Document(doc_text)\n    index_kwargs, query_kwargs = struct_kwargs\n    index = GPTSimpleVectorIndex([document], **index_kwargs)\n    assert index.embed_model.total_tokens_used == 20\n\n    # test embedding query\n    query_str = \"What is?\"\n    index.query(query_str, **query_kwargs)\n    assert index.embed_model.last_token_usage == 3\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"_get_text_embedding\", side_effect=mock_get_text_embedding\n)\n@patch.object(\n    OpenAIEmbedding, \"_get_query_embedding\", side_effect=mock_get_query_embedding\n)\ndef", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 21, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "22": {"text": "test_query_and_similarity_scores(\n    _mock_query_embed: Any,\n    _mock_text_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_split_text_overlap: Any,\n    _mock_split_text: Any,\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test that sources nodes have similarity scores.\"\"\"\n    doc_text = (\n        \"Hello world.\\n\"\n        \"This is a test.\\n\"\n        \"This is another test.\\n\"\n        \"This is a test v2.\"\n    )\n    document = Document(doc_text)\n    index_kwargs, query_kwargs = struct_kwargs\n    index = GPTSimpleVectorIndex([document], **index_kwargs)\n\n    #", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 22, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "23": {"text": "**index_kwargs)\n\n    # test embedding query\n    query_str = \"What is?\"\n    response = index.query(query_str, **query_kwargs)\n    assert len(response.source_nodes) > 0\n    assert response.source_nodes[0].similarity is not None\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"_get_text_embedding\", side_effect=mock_get_text_embedding\n)\n@patch.object(\n    OpenAIEmbedding, \"_get_query_embedding\", side_effect=mock_get_query_embedding\n)\ndef test_query_and_similarity_scores_with_cutoff(\n    _mock_query_embed: Any,\n    _mock_text_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_split_text_overlap: Any,\n   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 23, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "24": {"text": "Any,\n    _mock_split_text: Any,\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test that sources nodes have similarity scores.\"\"\"\n    doc_text = (\n        \"Hello world.\\n\"\n        \"This is a test.\\n\"\n        \"This is another test.\\n\"\n        \"This is a test v2.\"\n    )\n    document = Document(doc_text)\n    index_kwargs, query_kwargs = struct_kwargs\n    index = GPTSimpleVectorIndex([document], **index_kwargs)\n\n    # test embedding query - no nodes\n    query_str = \"What is?\"\n    response = index.query(query_str, similarity_cutoff=1.1, **query_kwargs)\n    assert len(response.source_nodes) == 0\n\n    # test embedding query - 1 node\n    query_str = \"What is?\"\n    response =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 24, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "25": {"text": "  query_str = \"What is?\"\n    response = index.query(query_str, similarity_cutoff=0.9, **query_kwargs)\n    assert len(response.source_nodes) == 1\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 25, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "26": {"text": "This code file contains tests for two types of vector store indices, GPTFaissIndex and GPTSimpleVectorIndex. It includes fixtures for documents, index kwargs, and query kwargs. It also includes mock functions for get_text_embedding and get_query_embedding. The tests include building the indices, inserting documents, and querying the indices. The tests use mock imports and mock indices to simulate the functionality of the indices.", "doc_id": null, "embedding": null, "extra_info": null, "index": 26, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "ref_doc_id": null, "node_info": null}, "27": {"text": "This code file tests the functionality of the GPTSimpleVectorIndex class. It tests the insert, delete, and query methods, as well as the ability to count tokens used and calculate similarity scores. It also tests the ability to filter queries by required and excluded keywords. The code uses the OpenAIEmbedding class to get text and query embeddings, and uses the patch_common and patch.object functions to mock the embedding functions.", "doc_id": null, "embedding": null, "extra_info": null, "index": 27, "child_indices": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "ref_doc_id": null, "node_info": null}, "28": {"text": "This code file tests the GPTSimpleVectorIndex class, which is used to store and query documents. It tests that the index can correctly identify the similarity scores of source nodes, and that it can correctly identify the number of source nodes in a query. It does this by creating a document, initializing the index with the document, and then running two queries with different similarity cutoffs. The code also takes in parameters such as index_kwargs and query_kwargs, which are used to customize the index and query.", "doc_id": null, "embedding": null, "extra_info": null, "index": 28, "child_indices": [24, 25], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"26": {"text": "This code file contains tests for two types of vector store indices, GPTFaissIndex and GPTSimpleVectorIndex. It includes fixtures for documents, index kwargs, and query kwargs. It also includes mock functions for get_text_embedding and get_query_embedding. The tests include building the indices, inserting documents, and querying the indices. The tests use mock imports and mock indices to simulate the functionality of the indices.", "doc_id": null, "embedding": null, "extra_info": null, "index": 26, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "ref_doc_id": null, "node_info": null}, "27": {"text": "This code file tests the functionality of the GPTSimpleVectorIndex class. It tests the insert, delete, and query methods, as well as the ability to count tokens used and calculate similarity scores. It also tests the ability to filter queries by required and excluded keywords. The code uses the OpenAIEmbedding class to get text and query embeddings, and uses the patch_common and patch.object functions to mock the embedding functions.", "doc_id": null, "embedding": null, "extra_info": null, "index": 27, "child_indices": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "ref_doc_id": null, "node_info": null}, "28": {"text": "This code file tests the GPTSimpleVectorIndex class, which is used to store and query documents. It tests that the index can correctly identify the similarity scores of source nodes, and that it can correctly identify the number of source nodes in a query. It does this by creating a document, initializing the index with the document, and then running two queries with different similarity cutoffs. The code also takes in parameters such as index_kwargs and query_kwargs, which are used to customize the index and query.", "doc_id": null, "embedding": null, "extra_info": null, "index": 28, "child_indices": [24, 25], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"1d4640565ae2765d9ca96a509dc9809217f62f2f": {"text": "\"\"\"Init file.\"\"\"\n", "doc_id": "1d4640565ae2765d9ca96a509dc9809217f62f2f", "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/__init__.py", "file_name": "__init__.py"}, "__type__": "Document"}, "a79e316284dd227757c065acf5e0401fcc19e75d": {"text": "\"\"\"Test Faiss index.\"\"\"\n\nimport sys\nfrom typing import Any, Dict, List, Tuple\nfrom unittest.mock import MagicMock, patch\n\nimport numpy as np\nimport pytest\n\nfrom gpt_index.embeddings.openai import OpenAIEmbedding\nfrom gpt_index.indices.vector_store.faiss import GPTFaissIndex\nfrom gpt_index.indices.vector_store.simple import GPTSimpleVectorIndex\nfrom gpt_index.readers.schema.base import Document\nfrom tests.mock_utils.mock_decorator import patch_common\nfrom tests.mock_utils.mock_prompts import MOCK_REFINE_PROMPT, MOCK_TEXT_QA_PROMPT\n\n\n@pytest.fixture\ndef struct_kwargs() -> Tuple[Dict, Dict]:\n    \"\"\"Index kwargs.\"\"\"\n    index_kwargs = {\n        \"text_qa_template\": MOCK_TEXT_QA_PROMPT,\n    }\n    query_kwargs = {\n        \"text_qa_template\": MOCK_TEXT_QA_PROMPT,\n        \"refine_template\": MOCK_REFINE_PROMPT,\n        \"similarity_top_k\": 1,\n    }\n    return index_kwargs, query_kwargs\n\n\n@pytest.fixture\ndef documents() -> List[Document]:\n    \"\"\"Get documents.\"\"\"\n    # NOTE: one document for now\n    doc_text = (\n        \"Hello world.\\n\"\n        \"This is a test.\\n\"\n        \"This is another test.\\n\"\n        \"This is a test v2.\"\n    )\n    return [Document(doc_text)]\n\n\nclass MockFaissIndex:\n    \"\"\"Mock Faiss index.\"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"Initialize params.\"\"\"\n        self._index: Dict[int, np.ndarray] = {}\n\n    @property\n    def ntotal(self) -> int:\n        \"\"\"Get ntotal.\"\"\"\n        return len(self._index)\n\n    def add(self, vecs: np.ndarray) -> None:\n        \"\"\"Add vectors to index.\"\"\"\n        for vec in vecs:\n            new_id = len(self._index)\n            self._index[new_id] = vec\n\n    def reset(self) -> None:\n        \"\"\"Reset index.\"\"\"\n        self._index = {}\n\n    def search(self, vec: np.ndarray, k: int) -> Tuple[np.ndarray, np.ndarray]:\n        \"\"\"Search index.\"\"\"\n        # assume query vec is of the form 1 x k\n        # index_mat is n x k\n        index_mat = np.array(list(self._index.values()))\n        # compute distances\n        distances = np.linalg.norm(index_mat - vec, axis=1)\n\n        indices = np.argsort(distances)[:k]\n        sorted_distances = distances[indices][:k]\n\n        # return distances and indices\n        return sorted_distances[np.newaxis, :], indices[np.newaxis, :]\n\n\ndef mock_get_text_embedding(text: str) -> List[float]:\n    \"\"\"Mock get text embedding.\"\"\"\n    # assume dimensions are 5\n    if text == \"Hello world.\":\n        return [1, 0, 0, 0, 0]\n    elif text == \"This is a test.\":\n        return [0, 1, 0, 0, 0]\n    elif text == \"This is another test.\":\n        return [0, 0, 1, 0, 0]\n    elif text == \"This is a test v2.\":\n        return [0, 0, 0, 1, 0]\n    elif text == \"This is a test v3.\":\n        return [0, 0, 0, 0, 1]\n    elif text == \"This is bar test.\":\n        return [0, 0, 1, 0, 0]\n    elif text == \"Hello world backup.\":\n        # this is used when \"Hello world.\" is deleted.\n        return [1, 0, 0, 0, 0]\n    else:\n        raise ValueError(\"Invalid text for `mock_get_text_embedding`.\")\n\n\ndef mock_get_query_embedding(query: str) -> List[float]:\n    \"\"\"Mock get query embedding.\"\"\"\n    return [0, 0, 1, 0, 0]\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"get_text_embedding\", side_effect=mock_get_text_embedding\n)\ndef test_build_faiss(\n    _mock_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_split_text_overlap: Any,\n    _mock_split_text: Any,\n    documents: List[Document],\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test build GPTFaissIndex.\"\"\"\n    # NOTE: mock faiss import\n    sys.modules[\"faiss\"] = MagicMock()\n    # NOTE: mock faiss index\n    faiss_index = MockFaissIndex()\n\n    index_kwargs, query_kwargs = struct_kwargs\n\n    index = GPTFaissIndex(documents=documents, faiss_index=faiss_index, **index_kwargs)\n    assert len(index.index_struct.nodes_dict) == 4\n    # check contents of nodes\n    assert index.index_struct.get_node(\"0\").text == \"Hello world.\"\n    assert index.index_struct.get_node(\"1\").text == \"This is a test.\"\n    assert index.index_struct.get_node(\"2\").text == \"This is another test.\"\n    assert index.index_struct.get_node(\"3\").text == \"This is a test v2.\"\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"get_text_embedding\", side_effect=mock_get_text_embedding\n)\ndef test_faiss_insert(\n    _mock_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_split_text_overlap: Any,\n    _mock_split_text: Any,\n    documents: List[Document],\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test build GPTFaissIndex.\"\"\"\n    # NOTE: mock faiss import\n    sys.modules[\"faiss\"] = MagicMock()\n    # NOTE: mock faiss index\n    faiss_index = MockFaissIndex()\n\n    index_kwargs, query_kwargs = struct_kwargs\n\n    index = GPTFaissIndex(documents=documents, faiss_index=faiss_index, **index_kwargs)\n    # insert into index\n    index.insert(Document(text=\"This is a test v3.\"))\n\n    # check contenst of nodes\n    assert index.index_struct.get_node(\"3\").text == \"This is a test v2.\"\n    assert index.index_struct.get_node(\"4\").text == \"This is a test v3.\"\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"get_text_embedding\", side_effect=mock_get_text_embedding\n)\n@patch.object(\n    OpenAIEmbedding, \"get_query_embedding\", side_effect=mock_get_query_embedding\n)\ndef test_faiss_query(\n    _mock_query_embed: Any,\n    _mock_text_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_split_text_overlap: Any,\n    _mock_split_text: Any,\n    documents: List[Document],\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test embedding query.\"\"\"\n    # NOTE: mock faiss import\n    sys.modules[\"faiss\"] = MagicMock()\n    # NOTE: mock faiss index\n    faiss_index = MockFaissIndex()\n\n    index_kwargs, query_kwargs = struct_kwargs\n    index = GPTFaissIndex(documents, faiss_index=faiss_index, **index_kwargs)\n\n    # test embedding query\n    query_str = \"What is?\"\n    response = index.query(query_str, **query_kwargs)\n    assert str(response) == (\"What is?:This is another test.\")\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"get_text_embedding\", side_effect=mock_get_text_embedding\n)\ndef test_build_simple(\n    _mock_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_split_text_overlap: Any,\n    _mock_split_text: Any,\n    documents: List[Document],\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test build GPTFaissIndex.\"\"\"\n    index_kwargs, query_kwargs = struct_kwargs\n\n    index = GPTSimpleVectorIndex(documents=documents, **index_kwargs)\n    assert len(index.index_struct.nodes_dict) == 4\n    # check contents of nodes\n    actual_node_tups = [\n        (\"Hello world.\", [1, 0, 0, 0, 0]),\n        (\"This is a test.\", [0, 1, 0, 0, 0]),\n        (\"This is another test.\", [0, 0, 1, 0, 0]),\n        (\"This is a test v2.\", [0, 0, 0, 1, 0]),\n    ]\n    for text_id in index.index_struct.id_map.keys():\n        node = index.index_struct.get_node(text_id)\n        embedding = index.index_struct.embedding_dict[text_id]\n        assert (node.text, embedding) in actual_node_tups\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"get_text_embedding\", side_effect=mock_get_text_embedding\n)\ndef test_simple_insert(\n    _mock_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_split_text_overlap: Any,\n    _mock_split_text: Any,\n    documents: List[Document],\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test build GPTFaissIndex.\"\"\"\n    index_kwargs, query_kwargs = struct_kwargs\n\n    index = GPTSimpleVectorIndex(documents=documents, **index_kwargs)\n    # insert into index\n    index.insert(Document(text=\"This is a test v3.\"))\n\n    # check contenst of nodes\n    actual_node_tups = [\n        (\"Hello world.\", [1, 0, 0, 0, 0]),\n        (\"This is a test.\", [0, 1, 0, 0, 0]),\n        (\"This is another test.\", [0, 0, 1, 0, 0]),\n        (\"This is a test v2.\", [0, 0, 0, 1, 0]),\n        (\"This is a test v3.\", [0, 0, 0, 0, 1]),\n    ]\n    for text_id in index.index_struct.id_map.keys():\n        node = index.index_struct.get_node(text_id)\n        embedding = index.index_struct.embedding_dict[text_id]\n        assert (node.text, embedding) in actual_node_tups\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"get_text_embedding\", side_effect=mock_get_text_embedding\n)\ndef test_simple_delete(\n    _mock_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_splitter_overlap: Any,\n    _mock_splitter: Any,\n    documents: List[Document],\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test build GPTFaissIndex.\"\"\"\n    index_kwargs, query_kwargs = struct_kwargs\n\n    new_documents = [\n        Document(\"Hello world.\", doc_id=\"test_id_0\"),\n        Document(\"This is a test.\", doc_id=\"test_id_1\"),\n        Document(\"This is another test.\", doc_id=\"test_id_2\"),\n        Document(\"This is a test v2.\", doc_id=\"test_id_3\"),\n    ]\n    index = GPTSimpleVectorIndex(documents=new_documents, **index_kwargs)\n\n    # test delete\n    index.delete(\"test_id_0\")\n    assert len(index.index_struct.nodes_dict) == 3\n    assert len(index.index_struct.id_map) == 3\n    actual_node_tups = [\n        (\"This is a test.\", [0, 1, 0, 0, 0], \"test_id_1\"),\n        (\"This is another test.\", [0, 0, 1, 0, 0], \"test_id_2\"),\n        (\"This is a test v2.\", [0, 0, 0, 1, 0], \"test_id_3\"),\n    ]\n    for text_id in index.index_struct.id_map.keys():\n        node = index.index_struct.get_node(text_id)\n        embedding = index.index_struct.embedding_dict[text_id]\n        assert (node.text, embedding, node.ref_doc_id) in actual_node_tups\n\n    # test insert\n    index.insert(Document(\"Hello world backup.\", doc_id=\"test_id_0\"))\n    assert len(index.index_struct.nodes_dict) == 4\n    assert len(index.index_struct.id_map) == 4\n    actual_node_tups = [\n        (\"Hello world backup.\", [1, 0, 0, 0, 0], \"test_id_0\"),\n        (\"This is a test.\", [0, 1, 0, 0, 0], \"test_id_1\"),\n        (\"This is another test.\", [0, 0, 1, 0, 0], \"test_id_2\"),\n        (\"This is a test v2.\", [0, 0, 0, 1, 0], \"test_id_3\"),\n    ]\n    for text_id in index.index_struct.id_map.keys():\n        node = index.index_struct.get_node(text_id)\n        embedding = index.index_struct.embedding_dict[text_id]\n        assert (node.text, embedding, node.ref_doc_id) in actual_node_tups\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"get_text_embedding\", side_effect=mock_get_text_embedding\n)\n@patch.object(\n    OpenAIEmbedding, \"get_query_embedding\", side_effect=mock_get_query_embedding\n)\ndef test_simple_query(\n    _mock_query_embed: Any,\n    _mock_text_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_split_text_overlap: Any,\n    _mock_split_text: Any,\n    documents: List[Document],\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test embedding query.\"\"\"\n    index_kwargs, query_kwargs = struct_kwargs\n    index = GPTSimpleVectorIndex(documents, **index_kwargs)\n\n    # test embedding query\n    query_str = \"What is?\"\n    response = index.query(query_str, **query_kwargs)\n    assert str(response) == (\"What is?:This is another test.\")\n\n    # test with keyword filter (required)\n    query_kwargs_copy = query_kwargs.copy()\n    query_kwargs_copy[\"similarity_top_k\"] = 5\n    response = index.query(query_str, **query_kwargs_copy, required_keywords=[\"Hello\"])\n    assert str(response) == (\"What is?:Hello world.\")\n\n    # test with keyword filter (exclude)\n    # insert into index\n    index.insert(Document(text=\"This is bar test.\"))\n    query_kwargs_copy = query_kwargs.copy()\n    query_kwargs_copy[\"similarity_top_k\"] = 2\n    response = index.query(query_str, **query_kwargs_copy, exclude_keywords=[\"another\"])\n    assert str(response) == (\"What is?:This is bar test.\")\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"_get_text_embedding\", side_effect=mock_get_text_embedding\n)\n@patch.object(\n    OpenAIEmbedding, \"_get_query_embedding\", side_effect=mock_get_query_embedding\n)\ndef test_query_and_count_tokens(\n    _mock_query_embed: Any,\n    _mock_text_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_split_text_overlap: Any,\n    _mock_split_text: Any,\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test embedding query.\"\"\"\n    doc_text = (\n        \"Hello world.\\n\"\n        \"This is a test.\\n\"\n        \"This is another test.\\n\"\n        \"This is a test v2.\"\n    )\n    document = Document(doc_text)\n    index_kwargs, query_kwargs = struct_kwargs\n    index = GPTSimpleVectorIndex([document], **index_kwargs)\n    assert index.embed_model.total_tokens_used == 20\n\n    # test embedding query\n    query_str = \"What is?\"\n    index.query(query_str, **query_kwargs)\n    assert index.embed_model.last_token_usage == 3\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"_get_text_embedding\", side_effect=mock_get_text_embedding\n)\n@patch.object(\n    OpenAIEmbedding, \"_get_query_embedding\", side_effect=mock_get_query_embedding\n)\ndef test_query_and_similarity_scores(\n    _mock_query_embed: Any,\n    _mock_text_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_split_text_overlap: Any,\n    _mock_split_text: Any,\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test that sources nodes have similarity scores.\"\"\"\n    doc_text = (\n        \"Hello world.\\n\"\n        \"This is a test.\\n\"\n        \"This is another test.\\n\"\n        \"This is a test v2.\"\n    )\n    document = Document(doc_text)\n    index_kwargs, query_kwargs = struct_kwargs\n    index = GPTSimpleVectorIndex([document], **index_kwargs)\n\n    # test embedding query\n    query_str = \"What is?\"\n    response = index.query(query_str, **query_kwargs)\n    assert len(response.source_nodes) > 0\n    assert response.source_nodes[0].similarity is not None\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"_get_text_embedding\", side_effect=mock_get_text_embedding\n)\n@patch.object(\n    OpenAIEmbedding, \"_get_query_embedding\", side_effect=mock_get_query_embedding\n)\ndef test_query_and_similarity_scores_with_cutoff(\n    _mock_query_embed: Any,\n    _mock_text_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_split_text_overlap: Any,\n    _mock_split_text: Any,\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test that sources nodes have similarity scores.\"\"\"\n    doc_text = (\n        \"Hello world.\\n\"\n        \"This is a test.\\n\"\n        \"This is another test.\\n\"\n        \"This is a test v2.\"\n    )\n    document = Document(doc_text)\n    index_kwargs, query_kwargs = struct_kwargs\n    index = GPTSimpleVectorIndex([document], **index_kwargs)\n\n    # test embedding query - no nodes\n    query_str = \"What is?\"\n    response = index.query(query_str, similarity_cutoff=1.1, **query_kwargs)\n    assert len(response.source_nodes) == 0\n\n    # test embedding query - 1 node\n    query_str = \"What is?\"\n    response = index.query(query_str, similarity_cutoff=0.9, **query_kwargs)\n    assert len(response.source_nodes) == 1\n", "doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "__type__": "Document"}, "9095bb48-30c9-4e74-bc08-6ec90b352098": {"text": "\nThe summaries of the documents are short descriptions of the test being conducted. The summaries are: \"Hello world.\", \"This is a test.\", \"This is another test.\", and \"This is a test v2.\"", "doc_id": "9095bb48-30c9-4e74-bc08-6ec90b352098", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Init file.\"\"\"\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/__init__.py", "file_name": "__init__.py"}, "index": 0, "child_indices": [], "ref_doc_id": "1d4640565ae2765d9ca96a509dc9809217f62f2f", "node_info": null}, "1": {"text": "\"\"\"Test Faiss index.\"\"\"\n\nimport sys\nfrom typing import Any, Dict, List, Tuple\nfrom unittest.mock import MagicMock, patch\n\nimport numpy as np\nimport pytest\n\nfrom gpt_index.embeddings.openai import OpenAIEmbedding\nfrom gpt_index.indices.vector_store.faiss import GPTFaissIndex\nfrom gpt_index.indices.vector_store.simple import GPTSimpleVectorIndex\nfrom gpt_index.readers.schema.base import Document\nfrom tests.mock_utils.mock_decorator import patch_common\nfrom tests.mock_utils.mock_prompts import MOCK_REFINE_PROMPT, MOCK_TEXT_QA_PROMPT\n\n\n@pytest.fixture\ndef struct_kwargs() -> Tuple[Dict, Dict]:\n    \"\"\"Index kwargs.\"\"\"\n    index_kwargs = {\n        \"text_qa_template\": MOCK_TEXT_QA_PROMPT,\n    }\n    query_kwargs = {\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 1, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "2": {"text": "  query_kwargs = {\n        \"text_qa_template\": MOCK_TEXT_QA_PROMPT,\n        \"refine_template\": MOCK_REFINE_PROMPT,\n        \"similarity_top_k\": 1,\n    }\n    return index_kwargs, query_kwargs\n\n\n@pytest.fixture\ndef documents() -> List[Document]:\n    \"\"\"Get documents.\"\"\"\n    # NOTE: one document for now\n    doc_text = (\n        \"Hello world.\\n\"\n        \"This is a test.\\n\"\n        \"This is another test.\\n\"\n        \"This is a test v2.\"\n    )\n    return [Document(doc_text)]\n\n\nclass MockFaissIndex:\n    \"\"\"Mock Faiss index.\"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"Initialize", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 2, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "3": {"text": "Any) -> None:\n        \"\"\"Initialize params.\"\"\"\n        self._index: Dict[int, np.ndarray] = {}\n\n    @property\n    def ntotal(self) -> int:\n        \"\"\"Get ntotal.\"\"\"\n        return len(self._index)\n\n    def add(self, vecs: np.ndarray) -> None:\n        \"\"\"Add vectors to index.\"\"\"\n        for vec in vecs:\n            new_id = len(self._index)\n            self._index[new_id] = vec\n\n    def reset(self) -> None:\n        \"\"\"Reset index.\"\"\"\n        self._index = {}\n\n    def search(self, vec: np.ndarray, k: int) -> Tuple[np.ndarray, np.ndarray]:\n        \"\"\"Search index.\"\"\"\n        # assume", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 3, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "4": {"text": "\"\"\"Search index.\"\"\"\n        # assume query vec is of the form 1 x k\n        # index_mat is n x k\n        index_mat = np.array(list(self._index.values()))\n        # compute distances\n        distances = np.linalg.norm(index_mat - vec, axis=1)\n\n        indices = np.argsort(distances)[:k]\n        sorted_distances = distances[indices][:k]\n\n        # return distances and indices\n        return sorted_distances[np.newaxis, :], indices[np.newaxis, :]\n\n\ndef mock_get_text_embedding(text: str) -> List[float]:\n    \"\"\"Mock get text embedding.\"\"\"\n    # assume dimensions are 5\n    if text == \"Hello world.\":\n        return [1, 0, 0, 0, 0]\n    elif text", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 4, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "5": {"text": "0, 0, 0, 0]\n    elif text == \"This is a test.\":\n        return [0, 1, 0, 0, 0]\n    elif text == \"This is another test.\":\n        return [0, 0, 1, 0, 0]\n    elif text == \"This is a test v2.\":\n        return [0, 0, 0, 1, 0]\n    elif text == \"This is a test v3.\":\n        return [0, 0, 0, 0, 1]\n    elif text == \"This is bar test.\":\n        return [0, 0, 1, 0, 0]\n    elif text == \"Hello world backup.\":\n        # this is used when \"Hello world.\" is deleted.\n        return [1, 0, 0, 0, 0]\n    else:\n        raise ValueError(\"Invalid text for `mock_get_text_embedding`.\")\n\n\ndef", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 5, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "6": {"text": "for `mock_get_text_embedding`.\")\n\n\ndef mock_get_query_embedding(query: str) -> List[float]:\n    \"\"\"Mock get query embedding.\"\"\"\n    return [0, 0, 1, 0, 0]\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"get_text_embedding\", side_effect=mock_get_text_embedding\n)\ndef test_build_faiss(\n    _mock_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_split_text_overlap: Any,\n    _mock_split_text: Any,\n    documents: List[Document],\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test build GPTFaissIndex.\"\"\"\n    # NOTE: mock faiss import\n    sys.modules[\"faiss\"] = MagicMock()\n    # NOTE: mock", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 6, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "7": {"text": "= MagicMock()\n    # NOTE: mock faiss index\n    faiss_index = MockFaissIndex()\n\n    index_kwargs, query_kwargs = struct_kwargs\n\n    index = GPTFaissIndex(documents=documents, faiss_index=faiss_index, **index_kwargs)\n    assert len(index.index_struct.nodes_dict) == 4\n    # check contents of nodes\n    assert index.index_struct.get_node(\"0\").text == \"Hello world.\"\n    assert index.index_struct.get_node(\"1\").text == \"This is a test.\"\n    assert index.index_struct.get_node(\"2\").text == \"This is another test.\"\n    assert index.index_struct.get_node(\"3\").text == \"This is a test v2.\"\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"get_text_embedding\", side_effect=mock_get_text_embedding\n)\ndef test_faiss_insert(\n    _mock_embed: Any,\n ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 7, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "8": {"text": "   _mock_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_split_text_overlap: Any,\n    _mock_split_text: Any,\n    documents: List[Document],\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test build GPTFaissIndex.\"\"\"\n    # NOTE: mock faiss import\n    sys.modules[\"faiss\"] = MagicMock()\n    # NOTE: mock faiss index\n    faiss_index = MockFaissIndex()\n\n    index_kwargs, query_kwargs = struct_kwargs\n\n    index = GPTFaissIndex(documents=documents, faiss_index=faiss_index, **index_kwargs)\n    # insert into index\n    index.insert(Document(text=\"This is a test v3.\"))\n\n    # check contenst of nodes\n    assert", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 8, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "9": {"text": "   # check contenst of nodes\n    assert index.index_struct.get_node(\"3\").text == \"This is a test v2.\"\n    assert index.index_struct.get_node(\"4\").text == \"This is a test v3.\"\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"get_text_embedding\", side_effect=mock_get_text_embedding\n)\n@patch.object(\n    OpenAIEmbedding, \"get_query_embedding\", side_effect=mock_get_query_embedding\n)\ndef test_faiss_query(\n    _mock_query_embed: Any,\n    _mock_text_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_split_text_overlap: Any,\n    _mock_split_text: Any,\n    documents: List[Document],\n    struct_kwargs:", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 9, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "10": {"text": "documents: List[Document],\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test embedding query.\"\"\"\n    # NOTE: mock faiss import\n    sys.modules[\"faiss\"] = MagicMock()\n    # NOTE: mock faiss index\n    faiss_index = MockFaissIndex()\n\n    index_kwargs, query_kwargs = struct_kwargs\n    index = GPTFaissIndex(documents, faiss_index=faiss_index, **index_kwargs)\n\n    # test embedding query\n    query_str = \"What is?\"\n    response = index.query(query_str, **query_kwargs)\n    assert str(response) == (\"What is?:This is another test.\")\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"get_text_embedding\", side_effect=mock_get_text_embedding\n)\ndef test_build_simple(\n    _mock_embed: Any,\n    _mock_init: Any,\n   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 10, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "11": {"text": "   _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_split_text_overlap: Any,\n    _mock_split_text: Any,\n    documents: List[Document],\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test build GPTFaissIndex.\"\"\"\n    index_kwargs, query_kwargs = struct_kwargs\n\n    index = GPTSimpleVectorIndex(documents=documents, **index_kwargs)\n    assert len(index.index_struct.nodes_dict) == 4\n    # check contents of nodes\n    actual_node_tups = [\n        (\"Hello world.\", [1, 0, 0, 0, 0]),\n        (\"This is a test.\", [0, 1, 0, 0, 0]),\n        (\"This is another test.\", [0, 0, 1, 0, 0]),\n        (\"This", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 11, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "12": {"text": "1, 0, 0]),\n        (\"This is a test v2.\", [0, 0, 0, 1, 0]),\n    ]\n    for text_id in index.index_struct.id_map.keys():\n        node = index.index_struct.get_node(text_id)\n        embedding = index.index_struct.embedding_dict[text_id]\n        assert (node.text, embedding) in actual_node_tups\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"get_text_embedding\", side_effect=mock_get_text_embedding\n)\ndef test_simple_insert(\n    _mock_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_split_text_overlap: Any,\n    _mock_split_text: Any,\n    documents:", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 12, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "13": {"text": "Any,\n    documents: List[Document],\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test build GPTFaissIndex.\"\"\"\n    index_kwargs, query_kwargs = struct_kwargs\n\n    index = GPTSimpleVectorIndex(documents=documents, **index_kwargs)\n    # insert into index\n    index.insert(Document(text=\"This is a test v3.\"))\n\n    # check contenst of nodes\n    actual_node_tups = [\n        (\"Hello world.\", [1, 0, 0, 0, 0]),\n        (\"This is a test.\", [0, 1, 0, 0, 0]),\n        (\"This is another test.\", [0, 0, 1, 0, 0]),\n        (\"This is a test v2.\", [0, 0, 0, 1, 0]),\n        (\"This is a test v3.\", [0, 0, 0, 0, 1]),\n    ]\n    for text_id in", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 13, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "14": {"text": "1]),\n    ]\n    for text_id in index.index_struct.id_map.keys():\n        node = index.index_struct.get_node(text_id)\n        embedding = index.index_struct.embedding_dict[text_id]\n        assert (node.text, embedding) in actual_node_tups\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"get_text_embedding\", side_effect=mock_get_text_embedding\n)\ndef test_simple_delete(\n    _mock_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_splitter_overlap: Any,\n    _mock_splitter: Any,\n    documents: List[Document],\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test build GPTFaissIndex.\"\"\"\n ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 14, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "15": {"text": "   \"\"\"Test build GPTFaissIndex.\"\"\"\n    index_kwargs, query_kwargs = struct_kwargs\n\n    new_documents = [\n        Document(\"Hello world.\", doc_id=\"test_id_0\"),\n        Document(\"This is a test.\", doc_id=\"test_id_1\"),\n        Document(\"This is another test.\", doc_id=\"test_id_2\"),\n        Document(\"This is a test v2.\", doc_id=\"test_id_3\"),\n    ]\n    index = GPTSimpleVectorIndex(documents=new_documents, **index_kwargs)\n\n    # test delete\n    index.delete(\"test_id_0\")\n    assert len(index.index_struct.nodes_dict) == 3\n    assert len(index.index_struct.id_map) == 3\n    actual_node_tups = [\n        (\"This is a test.\", [0, 1, 0, 0, 0], \"test_id_1\"),\n      ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 15, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "16": {"text": "0], \"test_id_1\"),\n        (\"This is another test.\", [0, 0, 1, 0, 0], \"test_id_2\"),\n        (\"This is a test v2.\", [0, 0, 0, 1, 0], \"test_id_3\"),\n    ]\n    for text_id in index.index_struct.id_map.keys():\n        node = index.index_struct.get_node(text_id)\n        embedding = index.index_struct.embedding_dict[text_id]\n        assert (node.text, embedding, node.ref_doc_id) in actual_node_tups\n\n    # test insert\n    index.insert(Document(\"Hello world backup.\", doc_id=\"test_id_0\"))\n    assert len(index.index_struct.nodes_dict) == 4\n    assert len(index.index_struct.id_map) == 4\n    actual_node_tups = [\n        (\"Hello world backup.\", [1,", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 16, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "17": {"text": "       (\"Hello world backup.\", [1, 0, 0, 0, 0], \"test_id_0\"),\n        (\"This is a test.\", [0, 1, 0, 0, 0], \"test_id_1\"),\n        (\"This is another test.\", [0, 0, 1, 0, 0], \"test_id_2\"),\n        (\"This is a test v2.\", [0, 0, 0, 1, 0], \"test_id_3\"),\n    ]\n    for text_id in index.index_struct.id_map.keys():\n        node = index.index_struct.get_node(text_id)\n        embedding = index.index_struct.embedding_dict[text_id]\n        assert (node.text, embedding, node.ref_doc_id) in actual_node_tups\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"get_text_embedding\",", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 17, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "18": {"text": " OpenAIEmbedding, \"get_text_embedding\", side_effect=mock_get_text_embedding\n)\n@patch.object(\n    OpenAIEmbedding, \"get_query_embedding\", side_effect=mock_get_query_embedding\n)\ndef test_simple_query(\n    _mock_query_embed: Any,\n    _mock_text_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_split_text_overlap: Any,\n    _mock_split_text: Any,\n    documents: List[Document],\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test embedding query.\"\"\"\n    index_kwargs, query_kwargs = struct_kwargs\n    index = GPTSimpleVectorIndex(documents, **index_kwargs)\n\n    # test embedding query\n    query_str = \"What is?\"\n  ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 18, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "19": {"text": "query\n    query_str = \"What is?\"\n    response = index.query(query_str, **query_kwargs)\n    assert str(response) == (\"What is?:This is another test.\")\n\n    # test with keyword filter (required)\n    query_kwargs_copy = query_kwargs.copy()\n    query_kwargs_copy[\"similarity_top_k\"] = 5\n    response = index.query(query_str, **query_kwargs_copy, required_keywords=[\"Hello\"])\n    assert str(response) == (\"What is?:Hello world.\")\n\n    # test with keyword filter (exclude)\n    # insert into index\n    index.insert(Document(text=\"This is bar test.\"))\n    query_kwargs_copy = query_kwargs.copy()\n    query_kwargs_copy[\"similarity_top_k\"] = 2\n    response = index.query(query_str, **query_kwargs_copy, exclude_keywords=[\"another\"])\n    assert str(response) == (\"What is?:This is bar", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 19, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "20": {"text": "   assert str(response) == (\"What is?:This is bar test.\")\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"_get_text_embedding\", side_effect=mock_get_text_embedding\n)\n@patch.object(\n    OpenAIEmbedding, \"_get_query_embedding\", side_effect=mock_get_query_embedding\n)\ndef test_query_and_count_tokens(\n    _mock_query_embed: Any,\n    _mock_text_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_split_text_overlap: Any,\n    _mock_split_text: Any,\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test embedding query.\"\"\"\n    doc_text = (\n        \"Hello world.\\n\"\n        \"This", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 20, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "21": {"text": "world.\\n\"\n        \"This is a test.\\n\"\n        \"This is another test.\\n\"\n        \"This is a test v2.\"\n    )\n    document = Document(doc_text)\n    index_kwargs, query_kwargs = struct_kwargs\n    index = GPTSimpleVectorIndex([document], **index_kwargs)\n    assert index.embed_model.total_tokens_used == 20\n\n    # test embedding query\n    query_str = \"What is?\"\n    index.query(query_str, **query_kwargs)\n    assert index.embed_model.last_token_usage == 3\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"_get_text_embedding\", side_effect=mock_get_text_embedding\n)\n@patch.object(\n    OpenAIEmbedding, \"_get_query_embedding\", side_effect=mock_get_query_embedding\n)\ndef", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 21, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "22": {"text": "test_query_and_similarity_scores(\n    _mock_query_embed: Any,\n    _mock_text_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_split_text_overlap: Any,\n    _mock_split_text: Any,\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test that sources nodes have similarity scores.\"\"\"\n    doc_text = (\n        \"Hello world.\\n\"\n        \"This is a test.\\n\"\n        \"This is another test.\\n\"\n        \"This is a test v2.\"\n    )\n    document = Document(doc_text)\n    index_kwargs, query_kwargs = struct_kwargs\n    index = GPTSimpleVectorIndex([document], **index_kwargs)\n\n    #", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 22, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "23": {"text": "**index_kwargs)\n\n    # test embedding query\n    query_str = \"What is?\"\n    response = index.query(query_str, **query_kwargs)\n    assert len(response.source_nodes) > 0\n    assert response.source_nodes[0].similarity is not None\n\n\n@patch_common\n@patch.object(\n    OpenAIEmbedding, \"_get_text_embedding\", side_effect=mock_get_text_embedding\n)\n@patch.object(\n    OpenAIEmbedding, \"_get_query_embedding\", side_effect=mock_get_query_embedding\n)\ndef test_query_and_similarity_scores_with_cutoff(\n    _mock_query_embed: Any,\n    _mock_text_embed: Any,\n    _mock_init: Any,\n    _mock_predict: Any,\n    _mock_total_tokens_used: Any,\n    _mock_split_text_overlap: Any,\n   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 23, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "24": {"text": "Any,\n    _mock_split_text: Any,\n    struct_kwargs: Dict,\n) -> None:\n    \"\"\"Test that sources nodes have similarity scores.\"\"\"\n    doc_text = (\n        \"Hello world.\\n\"\n        \"This is a test.\\n\"\n        \"This is another test.\\n\"\n        \"This is a test v2.\"\n    )\n    document = Document(doc_text)\n    index_kwargs, query_kwargs = struct_kwargs\n    index = GPTSimpleVectorIndex([document], **index_kwargs)\n\n    # test embedding query - no nodes\n    query_str = \"What is?\"\n    response = index.query(query_str, similarity_cutoff=1.1, **query_kwargs)\n    assert len(response.source_nodes) == 0\n\n    # test embedding query - 1 node\n    query_str = \"What is?\"\n    response =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 24, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "25": {"text": "  query_str = \"What is?\"\n    response = index.query(query_str, similarity_cutoff=0.9, **query_kwargs)\n    assert len(response.source_nodes) == 1\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/indices/vector_store/test_base.py", "file_name": "test_base.py"}, "index": 25, "child_indices": [], "ref_doc_id": "a79e316284dd227757c065acf5e0401fcc19e75d", "node_info": null}, "26": {"text": "This code file contains tests for two types of vector store indices, GPTFaissIndex and GPTSimpleVectorIndex. It includes fixtures for documents, index kwargs, and query kwargs. It also includes mock functions for get_text_embedding and get_query_embedding. The tests include building the indices, inserting documents, and querying the indices. The tests use mock imports and mock indices to simulate the functionality of the indices.", "doc_id": null, "embedding": null, "extra_info": null, "index": 26, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "ref_doc_id": null, "node_info": null}, "27": {"text": "This code file tests the functionality of the GPTSimpleVectorIndex class. It tests the insert, delete, and query methods, as well as the ability to count tokens used and calculate similarity scores. It also tests the ability to filter queries by required and excluded keywords. The code uses the OpenAIEmbedding class to get text and query embeddings, and uses the patch_common and patch.object functions to mock the embedding functions.", "doc_id": null, "embedding": null, "extra_info": null, "index": 27, "child_indices": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "ref_doc_id": null, "node_info": null}, "28": {"text": "This code file tests the GPTSimpleVectorIndex class, which is used to store and query documents. It tests that the index can correctly identify the similarity scores of source nodes, and that it can correctly identify the number of source nodes in a query. It does this by creating a document, initializing the index with the document, and then running two queries with different similarity cutoffs. The code also takes in parameters such as index_kwargs and query_kwargs, which are used to customize the index and query.", "doc_id": null, "embedding": null, "extra_info": null, "index": 28, "child_indices": [24, 25], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"26": {"text": "This code file contains tests for two types of vector store indices, GPTFaissIndex and GPTSimpleVectorIndex. It includes fixtures for documents, index kwargs, and query kwargs. It also includes mock functions for get_text_embedding and get_query_embedding. The tests include building the indices, inserting documents, and querying the indices. The tests use mock imports and mock indices to simulate the functionality of the indices.", "doc_id": null, "embedding": null, "extra_info": null, "index": 26, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "ref_doc_id": null, "node_info": null}, "27": {"text": "This code file tests the functionality of the GPTSimpleVectorIndex class. It tests the insert, delete, and query methods, as well as the ability to count tokens used and calculate similarity scores. It also tests the ability to filter queries by required and excluded keywords. The code uses the OpenAIEmbedding class to get text and query embeddings, and uses the patch_common and patch.object functions to mock the embedding functions.", "doc_id": null, "embedding": null, "extra_info": null, "index": 27, "child_indices": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "ref_doc_id": null, "node_info": null}, "28": {"text": "This code file tests the GPTSimpleVectorIndex class, which is used to store and query documents. It tests that the index can correctly identify the similarity scores of source nodes, and that it can correctly identify the number of source nodes in a query. It does this by creating a document, initializing the index with the document, and then running two queries with different similarity cutoffs. The code also takes in parameters such as index_kwargs and query_kwargs, which are used to customize the index and query.", "doc_id": null, "embedding": null, "extra_info": null, "index": 28, "child_indices": [24, 25], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}