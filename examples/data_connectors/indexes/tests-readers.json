{"index_struct": {"text": "\nThe first document is an init file which contains no code.\n\nThe second document is a test file which tests the SimpleDirectoryReader class in both recursive and non-recursive modes, filtering files by extension and limiting the number of files read.\n\nThe third document is a test file which tests the SimpleDirectoryReader class in non-recursive mode, filtering files by extension and excluding hidden files.\n\nThe fourth document is a test file which tests the SimpleDirectoryReader class in recursive mode, filtering files by extension and limiting the number of files read.\n\nThe tests/readers/test_file.py document tests the functionality of the SimpleDirectoryReader class, testing the reader in both recursive and non-recursive modes, filtering files by extension and limiting the number of files read, as well as excluding hidden files.\n\nThe tests/readers/test_string_iterable.py document tests the functionality of the SimpleDirectoryReader and StringIterableReader classes, creating temporary directories and files, and then using the SimpleDirectoryReader to read the files and check that the correct number of files are read and that the file metadata is added to the Document. The StringIterableReader is also tested to ensure that it can read a", "doc_id": "7d4b4877-4417-4e3d-80e0-6a5a2bb74986", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Init file.\"\"\"\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/__init__.py", "file_name": "__init__.py"}, "index": 0, "child_indices": [], "ref_doc_id": "1d4640565ae2765d9ca96a509dc9809217f62f2f", "node_info": null}, "1": {"text": "\"\"\"Test file reader.\"\"\"\n\nfrom tempfile import TemporaryDirectory\nfrom typing import Any, Dict\n\nfrom gpt_index.readers.file.base import SimpleDirectoryReader\n\n\ndef test_recursive() -> None:\n    \"\"\"Test simple directory reader in recursive mode.\"\"\"\n    # test recursive\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with TemporaryDirectory(dir=tmp_dir) as tmp_sub_dir:\n            with open(f\"{tmp_sub_dir}/test2.txt\", \"w\") as f:\n                f.write(\"test2\")\n            with TemporaryDirectory(dir=tmp_sub_dir) as tmp_sub_sub_dir:\n                with", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 1, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "2": {"text": "               with open(f\"{tmp_sub_sub_dir}/test3.txt\", \"w\") as f:\n                    f.write(\"test3\")\n                with open(f\"{tmp_sub_sub_dir}/test4.txt\", \"w\") as f:\n                    f.write(\"test4\")\n\n                    reader = SimpleDirectoryReader(tmp_dir, recursive=True)\n                    input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 4\n                    assert set(input_file_names) == {\n              ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 2, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "3": {"text": "{\n                        \"test1.txt\",\n                        \"test2.txt\",\n                        \"test3.txt\",\n                        \"test4.txt\",\n                    }\n\n    # test that recursive=False works\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with TemporaryDirectory(dir=tmp_dir) as tmp_sub_dir:\n            with open(f\"{tmp_sub_dir}/test2.txt\", \"w\") as f:\n        ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 3, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "4": {"text": "\"w\") as f:\n                f.write(\"test2\")\n            with TemporaryDirectory(dir=tmp_sub_dir) as tmp_sub_sub_dir:\n                with open(f\"{tmp_sub_sub_dir}/test3.txt\", \"w\") as f:\n                    f.write(\"test3\")\n                with open(f\"{tmp_sub_sub_dir}/test4.txt\", \"w\") as f:\n                    f.write(\"test4\")\n\n                    reader = SimpleDirectoryReader(tmp_dir, recursive=False)\n                    input_file_names = [f.name for f in reader.input_files]\n            ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 4, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "5": {"text": "                   print(reader.input_files)\n                    assert len(reader.input_files) == 1\n                    assert set(input_file_names) == {\n                        \"test1.txt\",\n                    }\n\n    # test recursive with .md files\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.md\", \"w\") as f:\n            f.write(\"test1\")\n        with TemporaryDirectory(dir=tmp_dir) as tmp_sub_dir:\n            with open(f\"{tmp_sub_dir}/test2.txt\", \"w\") as f:\n          ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 5, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "6": {"text": "as f:\n                f.write(\"test2\")\n            with TemporaryDirectory(dir=tmp_sub_dir) as tmp_sub_sub_dir:\n                with open(f\"{tmp_sub_sub_dir}/test3.md\", \"w\") as f:\n                    f.write(\"test3\")\n                with open(f\"{tmp_sub_sub_dir}/test4.txt\", \"w\") as f:\n                    f.write(\"test4\")\n\n                    reader = SimpleDirectoryReader(\n                        tmp_dir, recursive=True, required_exts=[\".md\"]\n                    )\n ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 6, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "7": {"text": "             )\n                    input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 2\n                    assert set(input_file_names) == {\n                        \"test1.md\",\n                        \"test3.md\",\n                    }\n\n\ndef test_nonrecursive() -> None:\n    \"\"\"Test simple non-recursive directory reader.\"\"\"\n    # test nonrecursive\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n           ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 7, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "8": {"text": "as f:\n            f.write(\"test1\")\n        with open(f\"{tmp_dir}/test2.txt\", \"w\") as f:\n            f.write(\"test2\")\n        with open(f\"{tmp_dir}/test3.txt\", \"w\") as f:\n            f.write(\"test3\")\n        with open(f\"{tmp_dir}/test4.txt\", \"w\") as f:\n            f.write(\"test4\")\n        with open(f\"{tmp_dir}/.test5.txt\", \"w\") as f:\n            f.write(\"test5\")\n\n        # test exclude hidden\n        reader = SimpleDirectoryReader(tmp_dir, recursive=False)\n        input_file_names = [f.name for f in reader.input_files]\n      ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 8, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "9": {"text": "for f in reader.input_files]\n        assert len(reader.input_files) == 4\n        assert input_file_names == [\"test1.txt\", \"test2.txt\", \"test3.txt\", \"test4.txt\"]\n\n        # test include hidden\n        reader = SimpleDirectoryReader(tmp_dir, recursive=False, exclude_hidden=False)\n        input_file_names = [f.name for f in reader.input_files]\n        assert len(reader.input_files) == 5\n        assert input_file_names == [\n            \".test5.txt\",\n            \"test1.txt\",\n            \"test2.txt\",\n            \"test3.txt\",\n            \"test4.txt\",\n        ]\n\n\ndef test_required_exts() -> None:\n   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 9, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "10": {"text": "test_required_exts() -> None:\n    \"\"\"Test extension filter.\"\"\"\n    # test nonrecursive\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with open(f\"{tmp_dir}/test2.md\", \"w\") as f:\n            f.write(\"test2\")\n        with open(f\"{tmp_dir}/test3.tmp\", \"w\") as f:\n            f.write(\"test3\")\n        with open(f\"{tmp_dir}/test4.json\", \"w\") as f:\n            f.write(\"test4\")\n        with open(f\"{tmp_dir}/test5.json\", \"w\") as f:\n           ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 10, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "11": {"text": "as f:\n            f.write(\"test5\")\n\n        # test exclude hidden\n        reader = SimpleDirectoryReader(tmp_dir, required_exts=[\".json\"])\n        input_file_names = [f.name for f in reader.input_files]\n        assert len(reader.input_files) == 2\n        assert input_file_names == [\"test4.json\", \"test5.json\"]\n\n\ndef test_num_files_limit() -> None:\n    \"\"\"Test num files limit.\"\"\"\n    # test num_files_limit (with recursion)\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with TemporaryDirectory(dir=tmp_dir) as tmp_sub_dir:\n            with", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 11, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "12": {"text": "           with open(f\"{tmp_sub_dir}/test2.txt\", \"w\") as f:\n                f.write(\"test2\")\n            with open(f\"{tmp_sub_dir}/test3.txt\", \"w\") as f:\n                f.write(\"test3\")\n            with TemporaryDirectory(dir=tmp_sub_dir) as tmp_sub_sub_dir:\n                with open(f\"{tmp_sub_sub_dir}/test4.txt\", \"w\") as f:\n                    f.write(\"test4\")\n\n                    reader = SimpleDirectoryReader(\n                        tmp_dir, recursive=True, num_files_limit=2\n ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 12, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "13": {"text": "recursive=True, num_files_limit=2\n                    )\n                    input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 2\n                    assert set(input_file_names) == {\n                        \"test1.txt\",\n                        \"test2.txt\",\n                    }\n\n                    reader = SimpleDirectoryReader(\n                        tmp_dir, recursive=True, num_files_limit=3\n      ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 13, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "14": {"text": "num_files_limit=3\n                    )\n                    input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 3\n                    assert set(input_file_names) == {\n                        \"test1.txt\",\n                        \"test2.txt\",\n                        \"test3.txt\",\n                    }\n\n                    reader = SimpleDirectoryReader(\n                     ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 14, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "15": {"text": "                  tmp_dir, recursive=True, num_files_limit=4\n                    )\n                    input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 4\n                    assert set(input_file_names) == {\n                        \"test1.txt\",\n                        \"test2.txt\",\n                        \"test3.txt\",\n                        \"test4.txt\",\n           ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 15, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "16": {"text": "                   }\n\n\ndef test_file_metadata() -> None:\n    \"\"\"Test if file metadata is added to Document.\"\"\"\n    # test file_metadata\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with open(f\"{tmp_dir}/test2.txt\", \"w\") as f:\n            f.write(\"test2\")\n        with open(f\"{tmp_dir}/test3.txt\", \"w\") as f:\n            f.write(\"test3\")\n\n        test_author = \"Bruce Wayne\"\n\n        def filename_to_metadata(filename: str) -> Dict[str, Any]:\n            return {\"filename\": filename, \"author\": test_author}\n\n ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 16, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "17": {"text": " return {\"filename\": filename, \"author\": test_author}\n\n        reader = SimpleDirectoryReader(tmp_dir, file_metadata=filename_to_metadata)\n\n        documents = reader.load_data()\n\n        for d in documents:\n            assert d.extra_info is not None and d.extra_info[\"author\"] == test_author\n\n        # There should be no metadata if we choose to concatenate files\n        documents = reader.load_data(concatenate=True)\n\n        for d in documents:\n            assert d.extra_info is None\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 17, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "18": {"text": "\"\"\"Test String Iterable Reader.\"\"\"\n\nfrom gpt_index.readers.string_iterable import StringIterableReader\n\n\ndef test_load() -> None:\n    \"\"\"Test loading data into StringIterableReader.\"\"\"\n    reader = StringIterableReader()\n    documents = reader.load_data(texts=[\"I went to the store\", \"I bought an apple\"])\n    assert len(documents) == 2\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_string_iterable.py", "file_name": "test_string_iterable.py"}, "index": 18, "child_indices": [], "ref_doc_id": "b74ba1a83056318d78436b8155c774bc3a42d4b6", "node_info": null}, "19": {"text": "This code file tests the functionality of the SimpleDirectoryReader class from the gpt_index.readers.file.base module. It tests the reader in both recursive and non-recursive modes, as well as with different file extensions and a limit on the number of files. It also tests the reader's ability to exclude hidden files. The code creates temporary directories and files to test the reader's functionality.", "doc_id": null, "embedding": null, "extra_info": null, "index": 19, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "ref_doc_id": null, "node_info": null}, "20": {"text": "This code file tests the functionality of the SimpleDirectoryReader and StringIterableReader classes. It creates temporary directories and files, and then uses the SimpleDirectoryReader to read the files and check that the correct number of files are read and that the file metadata is added to the Document. The StringIterableReader is also tested to ensure that it can read a list of strings.", "doc_id": null, "embedding": null, "extra_info": null, "index": 20, "child_indices": [12, 13, 14, 15, 16, 17, 18], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"19": {"text": "This code file tests the functionality of the SimpleDirectoryReader class from the gpt_index.readers.file.base module. It tests the reader in both recursive and non-recursive modes, as well as with different file extensions and a limit on the number of files. It also tests the reader's ability to exclude hidden files. The code creates temporary directories and files to test the reader's functionality.", "doc_id": null, "embedding": null, "extra_info": null, "index": 19, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "ref_doc_id": null, "node_info": null}, "20": {"text": "This code file tests the functionality of the SimpleDirectoryReader and StringIterableReader classes. It creates temporary directories and files, and then uses the SimpleDirectoryReader to read the files and check that the correct number of files are read and that the file metadata is added to the Document. The StringIterableReader is also tested to ensure that it can read a list of strings.", "doc_id": null, "embedding": null, "extra_info": null, "index": 20, "child_indices": [12, 13, 14, 15, 16, 17, 18], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"1d4640565ae2765d9ca96a509dc9809217f62f2f": {"text": "\"\"\"Init file.\"\"\"\n", "doc_id": "1d4640565ae2765d9ca96a509dc9809217f62f2f", "embedding": null, "extra_info": {"file_path": "tests/readers/__init__.py", "file_name": "__init__.py"}, "__type__": "Document"}, "808ff010c8376b1ee787cab26b9817eab331054f": {"text": "\"\"\"Test file reader.\"\"\"\n\nfrom tempfile import TemporaryDirectory\nfrom typing import Any, Dict\n\nfrom gpt_index.readers.file.base import SimpleDirectoryReader\n\n\ndef test_recursive() -> None:\n    \"\"\"Test simple directory reader in recursive mode.\"\"\"\n    # test recursive\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with TemporaryDirectory(dir=tmp_dir) as tmp_sub_dir:\n            with open(f\"{tmp_sub_dir}/test2.txt\", \"w\") as f:\n                f.write(\"test2\")\n            with TemporaryDirectory(dir=tmp_sub_dir) as tmp_sub_sub_dir:\n                with open(f\"{tmp_sub_sub_dir}/test3.txt\", \"w\") as f:\n                    f.write(\"test3\")\n                with open(f\"{tmp_sub_sub_dir}/test4.txt\", \"w\") as f:\n                    f.write(\"test4\")\n\n                    reader = SimpleDirectoryReader(tmp_dir, recursive=True)\n                    input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 4\n                    assert set(input_file_names) == {\n                        \"test1.txt\",\n                        \"test2.txt\",\n                        \"test3.txt\",\n                        \"test4.txt\",\n                    }\n\n    # test that recursive=False works\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with TemporaryDirectory(dir=tmp_dir) as tmp_sub_dir:\n            with open(f\"{tmp_sub_dir}/test2.txt\", \"w\") as f:\n                f.write(\"test2\")\n            with TemporaryDirectory(dir=tmp_sub_dir) as tmp_sub_sub_dir:\n                with open(f\"{tmp_sub_sub_dir}/test3.txt\", \"w\") as f:\n                    f.write(\"test3\")\n                with open(f\"{tmp_sub_sub_dir}/test4.txt\", \"w\") as f:\n                    f.write(\"test4\")\n\n                    reader = SimpleDirectoryReader(tmp_dir, recursive=False)\n                    input_file_names = [f.name for f in reader.input_files]\n                    print(reader.input_files)\n                    assert len(reader.input_files) == 1\n                    assert set(input_file_names) == {\n                        \"test1.txt\",\n                    }\n\n    # test recursive with .md files\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.md\", \"w\") as f:\n            f.write(\"test1\")\n        with TemporaryDirectory(dir=tmp_dir) as tmp_sub_dir:\n            with open(f\"{tmp_sub_dir}/test2.txt\", \"w\") as f:\n                f.write(\"test2\")\n            with TemporaryDirectory(dir=tmp_sub_dir) as tmp_sub_sub_dir:\n                with open(f\"{tmp_sub_sub_dir}/test3.md\", \"w\") as f:\n                    f.write(\"test3\")\n                with open(f\"{tmp_sub_sub_dir}/test4.txt\", \"w\") as f:\n                    f.write(\"test4\")\n\n                    reader = SimpleDirectoryReader(\n                        tmp_dir, recursive=True, required_exts=[\".md\"]\n                    )\n                    input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 2\n                    assert set(input_file_names) == {\n                        \"test1.md\",\n                        \"test3.md\",\n                    }\n\n\ndef test_nonrecursive() -> None:\n    \"\"\"Test simple non-recursive directory reader.\"\"\"\n    # test nonrecursive\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with open(f\"{tmp_dir}/test2.txt\", \"w\") as f:\n            f.write(\"test2\")\n        with open(f\"{tmp_dir}/test3.txt\", \"w\") as f:\n            f.write(\"test3\")\n        with open(f\"{tmp_dir}/test4.txt\", \"w\") as f:\n            f.write(\"test4\")\n        with open(f\"{tmp_dir}/.test5.txt\", \"w\") as f:\n            f.write(\"test5\")\n\n        # test exclude hidden\n        reader = SimpleDirectoryReader(tmp_dir, recursive=False)\n        input_file_names = [f.name for f in reader.input_files]\n        assert len(reader.input_files) == 4\n        assert input_file_names == [\"test1.txt\", \"test2.txt\", \"test3.txt\", \"test4.txt\"]\n\n        # test include hidden\n        reader = SimpleDirectoryReader(tmp_dir, recursive=False, exclude_hidden=False)\n        input_file_names = [f.name for f in reader.input_files]\n        assert len(reader.input_files) == 5\n        assert input_file_names == [\n            \".test5.txt\",\n            \"test1.txt\",\n            \"test2.txt\",\n            \"test3.txt\",\n            \"test4.txt\",\n        ]\n\n\ndef test_required_exts() -> None:\n    \"\"\"Test extension filter.\"\"\"\n    # test nonrecursive\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with open(f\"{tmp_dir}/test2.md\", \"w\") as f:\n            f.write(\"test2\")\n        with open(f\"{tmp_dir}/test3.tmp\", \"w\") as f:\n            f.write(\"test3\")\n        with open(f\"{tmp_dir}/test4.json\", \"w\") as f:\n            f.write(\"test4\")\n        with open(f\"{tmp_dir}/test5.json\", \"w\") as f:\n            f.write(\"test5\")\n\n        # test exclude hidden\n        reader = SimpleDirectoryReader(tmp_dir, required_exts=[\".json\"])\n        input_file_names = [f.name for f in reader.input_files]\n        assert len(reader.input_files) == 2\n        assert input_file_names == [\"test4.json\", \"test5.json\"]\n\n\ndef test_num_files_limit() -> None:\n    \"\"\"Test num files limit.\"\"\"\n    # test num_files_limit (with recursion)\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with TemporaryDirectory(dir=tmp_dir) as tmp_sub_dir:\n            with open(f\"{tmp_sub_dir}/test2.txt\", \"w\") as f:\n                f.write(\"test2\")\n            with open(f\"{tmp_sub_dir}/test3.txt\", \"w\") as f:\n                f.write(\"test3\")\n            with TemporaryDirectory(dir=tmp_sub_dir) as tmp_sub_sub_dir:\n                with open(f\"{tmp_sub_sub_dir}/test4.txt\", \"w\") as f:\n                    f.write(\"test4\")\n\n                    reader = SimpleDirectoryReader(\n                        tmp_dir, recursive=True, num_files_limit=2\n                    )\n                    input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 2\n                    assert set(input_file_names) == {\n                        \"test1.txt\",\n                        \"test2.txt\",\n                    }\n\n                    reader = SimpleDirectoryReader(\n                        tmp_dir, recursive=True, num_files_limit=3\n                    )\n                    input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 3\n                    assert set(input_file_names) == {\n                        \"test1.txt\",\n                        \"test2.txt\",\n                        \"test3.txt\",\n                    }\n\n                    reader = SimpleDirectoryReader(\n                        tmp_dir, recursive=True, num_files_limit=4\n                    )\n                    input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 4\n                    assert set(input_file_names) == {\n                        \"test1.txt\",\n                        \"test2.txt\",\n                        \"test3.txt\",\n                        \"test4.txt\",\n                    }\n\n\ndef test_file_metadata() -> None:\n    \"\"\"Test if file metadata is added to Document.\"\"\"\n    # test file_metadata\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with open(f\"{tmp_dir}/test2.txt\", \"w\") as f:\n            f.write(\"test2\")\n        with open(f\"{tmp_dir}/test3.txt\", \"w\") as f:\n            f.write(\"test3\")\n\n        test_author = \"Bruce Wayne\"\n\n        def filename_to_metadata(filename: str) -> Dict[str, Any]:\n            return {\"filename\": filename, \"author\": test_author}\n\n        reader = SimpleDirectoryReader(tmp_dir, file_metadata=filename_to_metadata)\n\n        documents = reader.load_data()\n\n        for d in documents:\n            assert d.extra_info is not None and d.extra_info[\"author\"] == test_author\n\n        # There should be no metadata if we choose to concatenate files\n        documents = reader.load_data(concatenate=True)\n\n        for d in documents:\n            assert d.extra_info is None\n", "doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "__type__": "Document"}, "b74ba1a83056318d78436b8155c774bc3a42d4b6": {"text": "\"\"\"Test String Iterable Reader.\"\"\"\n\nfrom gpt_index.readers.string_iterable import StringIterableReader\n\n\ndef test_load() -> None:\n    \"\"\"Test loading data into StringIterableReader.\"\"\"\n    reader = StringIterableReader()\n    documents = reader.load_data(texts=[\"I went to the store\", \"I bought an apple\"])\n    assert len(documents) == 2\n", "doc_id": "b74ba1a83056318d78436b8155c774bc3a42d4b6", "embedding": null, "extra_info": {"file_path": "tests/readers/test_string_iterable.py", "file_name": "test_string_iterable.py"}, "__type__": "Document"}, "7d4b4877-4417-4e3d-80e0-6a5a2bb74986": {"text": "\nThe first document is an init file which contains no code.\n\nThe second document is a test file which tests the SimpleDirectoryReader class in both recursive and non-recursive modes, filtering files by extension and limiting the number of files read.\n\nThe third document is a test file which tests the SimpleDirectoryReader class in non-recursive mode, filtering files by extension and excluding hidden files.\n\nThe fourth document is a test file which tests the SimpleDirectoryReader class in recursive mode, filtering files by extension and limiting the number of files read.\n\nThe tests/readers/test_file.py document tests the functionality of the SimpleDirectoryReader class, testing the reader in both recursive and non-recursive modes, filtering files by extension and limiting the number of files read, as well as excluding hidden files.\n\nThe tests/readers/test_string_iterable.py document tests the functionality of the SimpleDirectoryReader and StringIterableReader classes, creating temporary directories and files, and then using the SimpleDirectoryReader to read the files and check that the correct number of files are read and that the file metadata is added to the Document. The StringIterableReader is also tested to ensure that it can read a", "doc_id": "7d4b4877-4417-4e3d-80e0-6a5a2bb74986", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Init file.\"\"\"\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/__init__.py", "file_name": "__init__.py"}, "index": 0, "child_indices": [], "ref_doc_id": "1d4640565ae2765d9ca96a509dc9809217f62f2f", "node_info": null}, "1": {"text": "\"\"\"Test file reader.\"\"\"\n\nfrom tempfile import TemporaryDirectory\nfrom typing import Any, Dict\n\nfrom gpt_index.readers.file.base import SimpleDirectoryReader\n\n\ndef test_recursive() -> None:\n    \"\"\"Test simple directory reader in recursive mode.\"\"\"\n    # test recursive\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with TemporaryDirectory(dir=tmp_dir) as tmp_sub_dir:\n            with open(f\"{tmp_sub_dir}/test2.txt\", \"w\") as f:\n                f.write(\"test2\")\n            with TemporaryDirectory(dir=tmp_sub_dir) as tmp_sub_sub_dir:\n                with", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 1, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "2": {"text": "               with open(f\"{tmp_sub_sub_dir}/test3.txt\", \"w\") as f:\n                    f.write(\"test3\")\n                with open(f\"{tmp_sub_sub_dir}/test4.txt\", \"w\") as f:\n                    f.write(\"test4\")\n\n                    reader = SimpleDirectoryReader(tmp_dir, recursive=True)\n                    input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 4\n                    assert set(input_file_names) == {\n              ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 2, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "3": {"text": "{\n                        \"test1.txt\",\n                        \"test2.txt\",\n                        \"test3.txt\",\n                        \"test4.txt\",\n                    }\n\n    # test that recursive=False works\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with TemporaryDirectory(dir=tmp_dir) as tmp_sub_dir:\n            with open(f\"{tmp_sub_dir}/test2.txt\", \"w\") as f:\n        ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 3, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "4": {"text": "\"w\") as f:\n                f.write(\"test2\")\n            with TemporaryDirectory(dir=tmp_sub_dir) as tmp_sub_sub_dir:\n                with open(f\"{tmp_sub_sub_dir}/test3.txt\", \"w\") as f:\n                    f.write(\"test3\")\n                with open(f\"{tmp_sub_sub_dir}/test4.txt\", \"w\") as f:\n                    f.write(\"test4\")\n\n                    reader = SimpleDirectoryReader(tmp_dir, recursive=False)\n                    input_file_names = [f.name for f in reader.input_files]\n            ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 4, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "5": {"text": "                   print(reader.input_files)\n                    assert len(reader.input_files) == 1\n                    assert set(input_file_names) == {\n                        \"test1.txt\",\n                    }\n\n    # test recursive with .md files\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.md\", \"w\") as f:\n            f.write(\"test1\")\n        with TemporaryDirectory(dir=tmp_dir) as tmp_sub_dir:\n            with open(f\"{tmp_sub_dir}/test2.txt\", \"w\") as f:\n          ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 5, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "6": {"text": "as f:\n                f.write(\"test2\")\n            with TemporaryDirectory(dir=tmp_sub_dir) as tmp_sub_sub_dir:\n                with open(f\"{tmp_sub_sub_dir}/test3.md\", \"w\") as f:\n                    f.write(\"test3\")\n                with open(f\"{tmp_sub_sub_dir}/test4.txt\", \"w\") as f:\n                    f.write(\"test4\")\n\n                    reader = SimpleDirectoryReader(\n                        tmp_dir, recursive=True, required_exts=[\".md\"]\n                    )\n ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 6, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "7": {"text": "             )\n                    input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 2\n                    assert set(input_file_names) == {\n                        \"test1.md\",\n                        \"test3.md\",\n                    }\n\n\ndef test_nonrecursive() -> None:\n    \"\"\"Test simple non-recursive directory reader.\"\"\"\n    # test nonrecursive\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n           ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 7, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "8": {"text": "as f:\n            f.write(\"test1\")\n        with open(f\"{tmp_dir}/test2.txt\", \"w\") as f:\n            f.write(\"test2\")\n        with open(f\"{tmp_dir}/test3.txt\", \"w\") as f:\n            f.write(\"test3\")\n        with open(f\"{tmp_dir}/test4.txt\", \"w\") as f:\n            f.write(\"test4\")\n        with open(f\"{tmp_dir}/.test5.txt\", \"w\") as f:\n            f.write(\"test5\")\n\n        # test exclude hidden\n        reader = SimpleDirectoryReader(tmp_dir, recursive=False)\n        input_file_names = [f.name for f in reader.input_files]\n      ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 8, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "9": {"text": "for f in reader.input_files]\n        assert len(reader.input_files) == 4\n        assert input_file_names == [\"test1.txt\", \"test2.txt\", \"test3.txt\", \"test4.txt\"]\n\n        # test include hidden\n        reader = SimpleDirectoryReader(tmp_dir, recursive=False, exclude_hidden=False)\n        input_file_names = [f.name for f in reader.input_files]\n        assert len(reader.input_files) == 5\n        assert input_file_names == [\n            \".test5.txt\",\n            \"test1.txt\",\n            \"test2.txt\",\n            \"test3.txt\",\n            \"test4.txt\",\n        ]\n\n\ndef test_required_exts() -> None:\n   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 9, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "10": {"text": "test_required_exts() -> None:\n    \"\"\"Test extension filter.\"\"\"\n    # test nonrecursive\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with open(f\"{tmp_dir}/test2.md\", \"w\") as f:\n            f.write(\"test2\")\n        with open(f\"{tmp_dir}/test3.tmp\", \"w\") as f:\n            f.write(\"test3\")\n        with open(f\"{tmp_dir}/test4.json\", \"w\") as f:\n            f.write(\"test4\")\n        with open(f\"{tmp_dir}/test5.json\", \"w\") as f:\n           ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 10, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "11": {"text": "as f:\n            f.write(\"test5\")\n\n        # test exclude hidden\n        reader = SimpleDirectoryReader(tmp_dir, required_exts=[\".json\"])\n        input_file_names = [f.name for f in reader.input_files]\n        assert len(reader.input_files) == 2\n        assert input_file_names == [\"test4.json\", \"test5.json\"]\n\n\ndef test_num_files_limit() -> None:\n    \"\"\"Test num files limit.\"\"\"\n    # test num_files_limit (with recursion)\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with TemporaryDirectory(dir=tmp_dir) as tmp_sub_dir:\n            with", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 11, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "12": {"text": "           with open(f\"{tmp_sub_dir}/test2.txt\", \"w\") as f:\n                f.write(\"test2\")\n            with open(f\"{tmp_sub_dir}/test3.txt\", \"w\") as f:\n                f.write(\"test3\")\n            with TemporaryDirectory(dir=tmp_sub_dir) as tmp_sub_sub_dir:\n                with open(f\"{tmp_sub_sub_dir}/test4.txt\", \"w\") as f:\n                    f.write(\"test4\")\n\n                    reader = SimpleDirectoryReader(\n                        tmp_dir, recursive=True, num_files_limit=2\n ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 12, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "13": {"text": "recursive=True, num_files_limit=2\n                    )\n                    input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 2\n                    assert set(input_file_names) == {\n                        \"test1.txt\",\n                        \"test2.txt\",\n                    }\n\n                    reader = SimpleDirectoryReader(\n                        tmp_dir, recursive=True, num_files_limit=3\n      ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 13, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "14": {"text": "num_files_limit=3\n                    )\n                    input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 3\n                    assert set(input_file_names) == {\n                        \"test1.txt\",\n                        \"test2.txt\",\n                        \"test3.txt\",\n                    }\n\n                    reader = SimpleDirectoryReader(\n                     ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 14, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "15": {"text": "                  tmp_dir, recursive=True, num_files_limit=4\n                    )\n                    input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 4\n                    assert set(input_file_names) == {\n                        \"test1.txt\",\n                        \"test2.txt\",\n                        \"test3.txt\",\n                        \"test4.txt\",\n           ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 15, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "16": {"text": "                   }\n\n\ndef test_file_metadata() -> None:\n    \"\"\"Test if file metadata is added to Document.\"\"\"\n    # test file_metadata\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with open(f\"{tmp_dir}/test2.txt\", \"w\") as f:\n            f.write(\"test2\")\n        with open(f\"{tmp_dir}/test3.txt\", \"w\") as f:\n            f.write(\"test3\")\n\n        test_author = \"Bruce Wayne\"\n\n        def filename_to_metadata(filename: str) -> Dict[str, Any]:\n            return {\"filename\": filename, \"author\": test_author}\n\n ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 16, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "17": {"text": " return {\"filename\": filename, \"author\": test_author}\n\n        reader = SimpleDirectoryReader(tmp_dir, file_metadata=filename_to_metadata)\n\n        documents = reader.load_data()\n\n        for d in documents:\n            assert d.extra_info is not None and d.extra_info[\"author\"] == test_author\n\n        # There should be no metadata if we choose to concatenate files\n        documents = reader.load_data(concatenate=True)\n\n        for d in documents:\n            assert d.extra_info is None\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 17, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "18": {"text": "\"\"\"Test String Iterable Reader.\"\"\"\n\nfrom gpt_index.readers.string_iterable import StringIterableReader\n\n\ndef test_load() -> None:\n    \"\"\"Test loading data into StringIterableReader.\"\"\"\n    reader = StringIterableReader()\n    documents = reader.load_data(texts=[\"I went to the store\", \"I bought an apple\"])\n    assert len(documents) == 2\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_string_iterable.py", "file_name": "test_string_iterable.py"}, "index": 18, "child_indices": [], "ref_doc_id": "b74ba1a83056318d78436b8155c774bc3a42d4b6", "node_info": null}, "19": {"text": "This code file tests the functionality of the SimpleDirectoryReader class from the gpt_index.readers.file.base module. It tests the reader in both recursive and non-recursive modes, as well as with different file extensions and a limit on the number of files. It also tests the reader's ability to exclude hidden files. The code creates temporary directories and files to test the reader's functionality.", "doc_id": null, "embedding": null, "extra_info": null, "index": 19, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "ref_doc_id": null, "node_info": null}, "20": {"text": "This code file tests the functionality of the SimpleDirectoryReader and StringIterableReader classes. It creates temporary directories and files, and then uses the SimpleDirectoryReader to read the files and check that the correct number of files are read and that the file metadata is added to the Document. The StringIterableReader is also tested to ensure that it can read a list of strings.", "doc_id": null, "embedding": null, "extra_info": null, "index": 20, "child_indices": [12, 13, 14, 15, 16, 17, 18], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"19": {"text": "This code file tests the functionality of the SimpleDirectoryReader class from the gpt_index.readers.file.base module. It tests the reader in both recursive and non-recursive modes, as well as with different file extensions and a limit on the number of files. It also tests the reader's ability to exclude hidden files. The code creates temporary directories and files to test the reader's functionality.", "doc_id": null, "embedding": null, "extra_info": null, "index": 19, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "ref_doc_id": null, "node_info": null}, "20": {"text": "This code file tests the functionality of the SimpleDirectoryReader and StringIterableReader classes. It creates temporary directories and files, and then uses the SimpleDirectoryReader to read the files and check that the correct number of files are read and that the file metadata is added to the Document. The StringIterableReader is also tested to ensure that it can read a list of strings.", "doc_id": null, "embedding": null, "extra_info": null, "index": 20, "child_indices": [12, 13, 14, 15, 16, 17, 18], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}