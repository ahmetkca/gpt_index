{"index_struct": {"text": "\nThe GPT Index library provides a comprehensive set of tools for indexing and searching data. It includes embeddings such as LangchainEmbedding and OpenAIEmbedding, structured indices such as GPTKeywordTableIndex, GPTRAKEKeywordTableIndex, and GPTSimpleKeywordTableIndex, prompt helpers such as PromptHelper, composability such as QueryConfig and QueryMode, langchain helpers such as LLMPredictor and GPTIndexMemory, prompts such as KeywordExtractPrompt and QueryKeywordExtractPrompt, readers such as MboxReader and NotionPageReader, token predictors such as MockLLMPredictor and MockEmbedding, and logging. The purpose of this library is to provide a unified way to index and search data, allowing users to quickly and easily find the information they need.", "doc_id": "a1a6a9e3-3908-4ef1-8a75-e7a67efe0481", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Init file of GPT Index.\"\"\"\nfrom pathlib import Path\n\nwith open(Path(__file__).absolute().parents[0] / \"VERSION\") as _f:\n    __version__ = _f.read().strip()\n\n\nfrom gpt_index.data_structs.struct_type import IndexStructType\n\n# embeddings\nfrom gpt_index.embeddings.langchain import LangchainEmbedding\nfrom gpt_index.embeddings.openai import OpenAIEmbedding\n\n# structured\nfrom gpt_index.indices.common.struct_store.base import SQLContextBuilder\n\n# indices\nfrom gpt_index.indices.keyword_table import (\n    GPTKeywordTableIndex,\n    GPTRAKEKeywordTableIndex,\n    GPTSimpleKeywordTableIndex,\n)\nfrom gpt_index.indices.list import GPTListIndex\n\n# prompt helper\nfrom gpt_index.indices.prompt_helper import PromptHelper\n\n# for composability\nfrom gpt_index.indices.query.schema import QueryConfig, QueryMode\nfrom gpt_index.indices.struct_store.sql import GPTSQLStructStoreIndex\nfrom gpt_index.indices.tree import GPTTreeIndex\nfrom gpt_index.indices.vector_store import (\n    GPTFaissIndex,\n    GPTPineconeIndex,\n ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/__init__.py", "file_name": "__init__.py"}, "index": 0, "child_indices": [], "ref_doc_id": "0054ff473fdab69e9283aafee2e4579f884d9e7b", "node_info": null}, "1": {"text": "  GPTFaissIndex,\n    GPTPineconeIndex,\n    GPTQdrantIndex,\n    GPTSimpleVectorIndex,\n    GPTWeaviateIndex,\n)\n\n# langchain helper\nfrom gpt_index.langchain_helpers.chain_wrapper import LLMPredictor\nfrom gpt_index.langchain_helpers.memory_wrapper import GPTIndexMemory\nfrom gpt_index.langchain_helpers.sql_wrapper import SQLDatabase\n\n# prompts\nfrom gpt_index.prompts.base import Prompt\nfrom gpt_index.prompts.prompts import (\n    KeywordExtractPrompt,\n    QueryKeywordExtractPrompt,\n    QuestionAnswerPrompt,\n    RefinePrompt,\n    SummaryPrompt,\n    TreeInsertPrompt,\n    TreeSelectMultiplePrompt,\n    TreeSelectPrompt,\n)\n\n# readers\nfrom gpt_index.readers import (\n    BeautifulSoupWebReader,\n    DiscordReader,\n    Document,\n    FaissReader,\n    GithubRepositoryReader,\n    GoogleDocsReader,\n    MboxReader,\n    NotionPageReader,\n    ObsidianReader,\n    PineconeReader,\n    QdrantReader,\n  ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/__init__.py", "file_name": "__init__.py"}, "index": 1, "child_indices": [], "ref_doc_id": "0054ff473fdab69e9283aafee2e4579f884d9e7b", "node_info": null}, "2": {"text": "   PineconeReader,\n    QdrantReader,\n    RssReader,\n    SimpleDirectoryReader,\n    SimpleMongoReader,\n    SimpleWebPageReader,\n    SlackReader,\n    StringIterableReader,\n    TrafilaturaWebReader,\n    TwitterTweetReader,\n    WeaviateReader,\n    WikipediaReader,\n)\nfrom gpt_index.readers.download import download_loader\n\n# token predictor\nfrom gpt_index.token_counter.mock_chain_wrapper import MockLLMPredictor\nfrom gpt_index.token_counter.mock_embed_model import MockEmbedding\n\n__all__ = [\n    \"GPTKeywordTableIndex\",\n    \"GPTSimpleKeywordTableIndex\",\n    \"GPTRAKEKeywordTableIndex\",\n    \"GPTListIndex\",\n    \"GPTTreeIndex\",\n    \"GPTFaissIndex\",\n    \"GPTSimpleVectorIndex\",\n    \"GPTWeaviateIndex\",\n    \"GPTPineconeIndex\",\n    \"GPTQdrantIndex\",\n    \"GPTSQLStructStoreIndex\",\n    \"Prompt\",\n    \"LangchainEmbedding\",\n    \"OpenAIEmbedding\",\n   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/__init__.py", "file_name": "__init__.py"}, "index": 2, "child_indices": [], "ref_doc_id": "0054ff473fdab69e9283aafee2e4579f884d9e7b", "node_info": null}, "3": {"text": "   \"OpenAIEmbedding\",\n    \"SummaryPrompt\",\n    \"TreeInsertPrompt\",\n    \"TreeSelectPrompt\",\n    \"TreeSelectMultiplePrompt\",\n    \"RefinePrompt\",\n    \"QuestionAnswerPrompt\",\n    \"KeywordExtractPrompt\",\n    \"QueryKeywordExtractPrompt\",\n    \"WikipediaReader\",\n    \"ObsidianReader\",\n    \"Document\",\n    \"SimpleDirectoryReader\",\n    \"SimpleMongoReader\",\n    \"NotionPageReader\",\n    \"GoogleDocsReader\",\n    \"MboxReader\",\n    \"SlackReader\",\n    \"StringIterableReader\",\n    \"WeaviateReader\",\n    \"FaissReader\",\n    \"PineconeReader\",\n    \"QdrantReader\",\n    \"DiscordReader\",\n    \"SimpleWebPageReader\",\n    \"RssReader\",\n    \"BeautifulSoupWebReader\",\n    \"TrafilaturaWebReader\",\n    \"LLMPredictor\",\n    \"MockLLMPredictor\",\n    \"MockEmbedding\",\n    \"SQLDatabase\",\n    \"GPTIndexMemory\",\n    \"SQLContextBuilder\",\n    \"PromptHelper\",\n   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/__init__.py", "file_name": "__init__.py"}, "index": 3, "child_indices": [], "ref_doc_id": "0054ff473fdab69e9283aafee2e4579f884d9e7b", "node_info": null}, "4": {"text": "  \"SQLContextBuilder\",\n    \"PromptHelper\",\n    \"QueryConfig\",\n    \"QueryMode\",\n    \"IndexStructType\",\n    \"TwitterTweetReader\",\n    \"download_loader\",\n    \"GithubRepositoryReader\",\n]\n\nimport logging\nfrom logging import NullHandler\n\n# best practices for library logging:\n# https://docs.python.org/3/howto/logging.html#configuring-logging-for-a-library\nlogging.getLogger(__name__).addHandler(NullHandler())\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/__init__.py", "file_name": "__init__.py"}, "index": 4, "child_indices": [], "ref_doc_id": "0054ff473fdab69e9283aafee2e4579f884d9e7b", "node_info": null}, "5": {"text": "This file is the init file of GPT Index, a library for indexing and searching data. It contains various data structures, algorithms, and classes for creating and managing indices. It includes embeddings, structured indices, prompt helpers, composability, langchain helpers, prompts, readers, token predictors, and logging. It also contains an __all__ list of all the components of the library.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 5, "child_indices": [0, 1, 2, 3, 4], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"5": {"text": "This file is the init file of GPT Index, a library for indexing and searching data. It contains various data structures, algorithms, and classes for creating and managing indices. It includes embeddings, structured indices, prompt helpers, composability, langchain helpers, prompts, readers, token predictors, and logging. It also contains an __all__ list of all the components of the library.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 5, "child_indices": [0, 1, 2, 3, 4], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"0054ff473fdab69e9283aafee2e4579f884d9e7b": {"text": "\"\"\"Init file of GPT Index.\"\"\"\nfrom pathlib import Path\n\nwith open(Path(__file__).absolute().parents[0] / \"VERSION\") as _f:\n    __version__ = _f.read().strip()\n\n\nfrom gpt_index.data_structs.struct_type import IndexStructType\n\n# embeddings\nfrom gpt_index.embeddings.langchain import LangchainEmbedding\nfrom gpt_index.embeddings.openai import OpenAIEmbedding\n\n# structured\nfrom gpt_index.indices.common.struct_store.base import SQLContextBuilder\n\n# indices\nfrom gpt_index.indices.keyword_table import (\n    GPTKeywordTableIndex,\n    GPTRAKEKeywordTableIndex,\n    GPTSimpleKeywordTableIndex,\n)\nfrom gpt_index.indices.list import GPTListIndex\n\n# prompt helper\nfrom gpt_index.indices.prompt_helper import PromptHelper\n\n# for composability\nfrom gpt_index.indices.query.schema import QueryConfig, QueryMode\nfrom gpt_index.indices.struct_store.sql import GPTSQLStructStoreIndex\nfrom gpt_index.indices.tree import GPTTreeIndex\nfrom gpt_index.indices.vector_store import (\n    GPTFaissIndex,\n    GPTPineconeIndex,\n    GPTQdrantIndex,\n    GPTSimpleVectorIndex,\n    GPTWeaviateIndex,\n)\n\n# langchain helper\nfrom gpt_index.langchain_helpers.chain_wrapper import LLMPredictor\nfrom gpt_index.langchain_helpers.memory_wrapper import GPTIndexMemory\nfrom gpt_index.langchain_helpers.sql_wrapper import SQLDatabase\n\n# prompts\nfrom gpt_index.prompts.base import Prompt\nfrom gpt_index.prompts.prompts import (\n    KeywordExtractPrompt,\n    QueryKeywordExtractPrompt,\n    QuestionAnswerPrompt,\n    RefinePrompt,\n    SummaryPrompt,\n    TreeInsertPrompt,\n    TreeSelectMultiplePrompt,\n    TreeSelectPrompt,\n)\n\n# readers\nfrom gpt_index.readers import (\n    BeautifulSoupWebReader,\n    DiscordReader,\n    Document,\n    FaissReader,\n    GithubRepositoryReader,\n    GoogleDocsReader,\n    MboxReader,\n    NotionPageReader,\n    ObsidianReader,\n    PineconeReader,\n    QdrantReader,\n    RssReader,\n    SimpleDirectoryReader,\n    SimpleMongoReader,\n    SimpleWebPageReader,\n    SlackReader,\n    StringIterableReader,\n    TrafilaturaWebReader,\n    TwitterTweetReader,\n    WeaviateReader,\n    WikipediaReader,\n)\nfrom gpt_index.readers.download import download_loader\n\n# token predictor\nfrom gpt_index.token_counter.mock_chain_wrapper import MockLLMPredictor\nfrom gpt_index.token_counter.mock_embed_model import MockEmbedding\n\n__all__ = [\n    \"GPTKeywordTableIndex\",\n    \"GPTSimpleKeywordTableIndex\",\n    \"GPTRAKEKeywordTableIndex\",\n    \"GPTListIndex\",\n    \"GPTTreeIndex\",\n    \"GPTFaissIndex\",\n    \"GPTSimpleVectorIndex\",\n    \"GPTWeaviateIndex\",\n    \"GPTPineconeIndex\",\n    \"GPTQdrantIndex\",\n    \"GPTSQLStructStoreIndex\",\n    \"Prompt\",\n    \"LangchainEmbedding\",\n    \"OpenAIEmbedding\",\n    \"SummaryPrompt\",\n    \"TreeInsertPrompt\",\n    \"TreeSelectPrompt\",\n    \"TreeSelectMultiplePrompt\",\n    \"RefinePrompt\",\n    \"QuestionAnswerPrompt\",\n    \"KeywordExtractPrompt\",\n    \"QueryKeywordExtractPrompt\",\n    \"WikipediaReader\",\n    \"ObsidianReader\",\n    \"Document\",\n    \"SimpleDirectoryReader\",\n    \"SimpleMongoReader\",\n    \"NotionPageReader\",\n    \"GoogleDocsReader\",\n    \"MboxReader\",\n    \"SlackReader\",\n    \"StringIterableReader\",\n    \"WeaviateReader\",\n    \"FaissReader\",\n    \"PineconeReader\",\n    \"QdrantReader\",\n    \"DiscordReader\",\n    \"SimpleWebPageReader\",\n    \"RssReader\",\n    \"BeautifulSoupWebReader\",\n    \"TrafilaturaWebReader\",\n    \"LLMPredictor\",\n    \"MockLLMPredictor\",\n    \"MockEmbedding\",\n    \"SQLDatabase\",\n    \"GPTIndexMemory\",\n    \"SQLContextBuilder\",\n    \"PromptHelper\",\n    \"QueryConfig\",\n    \"QueryMode\",\n    \"IndexStructType\",\n    \"TwitterTweetReader\",\n    \"download_loader\",\n    \"GithubRepositoryReader\",\n]\n\nimport logging\nfrom logging import NullHandler\n\n# best practices for library logging:\n# https://docs.python.org/3/howto/logging.html#configuring-logging-for-a-library\nlogging.getLogger(__name__).addHandler(NullHandler())\n", "doc_id": "0054ff473fdab69e9283aafee2e4579f884d9e7b", "embedding": null, "extra_info": {"file_path": "gpt_index/__init__.py", "file_name": "__init__.py"}, "__type__": "Document"}, "a1a6a9e3-3908-4ef1-8a75-e7a67efe0481": {"text": "\nThe GPT Index library provides a comprehensive set of tools for indexing and searching data. It includes embeddings such as LangchainEmbedding and OpenAIEmbedding, structured indices such as GPTKeywordTableIndex, GPTRAKEKeywordTableIndex, and GPTSimpleKeywordTableIndex, prompt helpers such as PromptHelper, composability such as QueryConfig and QueryMode, langchain helpers such as LLMPredictor and GPTIndexMemory, prompts such as KeywordExtractPrompt and QueryKeywordExtractPrompt, readers such as MboxReader and NotionPageReader, token predictors such as MockLLMPredictor and MockEmbedding, and logging. The purpose of this library is to provide a unified way to index and search data, allowing users to quickly and easily find the information they need.", "doc_id": "a1a6a9e3-3908-4ef1-8a75-e7a67efe0481", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Init file of GPT Index.\"\"\"\nfrom pathlib import Path\n\nwith open(Path(__file__).absolute().parents[0] / \"VERSION\") as _f:\n    __version__ = _f.read().strip()\n\n\nfrom gpt_index.data_structs.struct_type import IndexStructType\n\n# embeddings\nfrom gpt_index.embeddings.langchain import LangchainEmbedding\nfrom gpt_index.embeddings.openai import OpenAIEmbedding\n\n# structured\nfrom gpt_index.indices.common.struct_store.base import SQLContextBuilder\n\n# indices\nfrom gpt_index.indices.keyword_table import (\n    GPTKeywordTableIndex,\n    GPTRAKEKeywordTableIndex,\n    GPTSimpleKeywordTableIndex,\n)\nfrom gpt_index.indices.list import GPTListIndex\n\n# prompt helper\nfrom gpt_index.indices.prompt_helper import PromptHelper\n\n# for composability\nfrom gpt_index.indices.query.schema import QueryConfig, QueryMode\nfrom gpt_index.indices.struct_store.sql import GPTSQLStructStoreIndex\nfrom gpt_index.indices.tree import GPTTreeIndex\nfrom gpt_index.indices.vector_store import (\n    GPTFaissIndex,\n    GPTPineconeIndex,\n ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/__init__.py", "file_name": "__init__.py"}, "index": 0, "child_indices": [], "ref_doc_id": "0054ff473fdab69e9283aafee2e4579f884d9e7b", "node_info": null}, "1": {"text": "  GPTFaissIndex,\n    GPTPineconeIndex,\n    GPTQdrantIndex,\n    GPTSimpleVectorIndex,\n    GPTWeaviateIndex,\n)\n\n# langchain helper\nfrom gpt_index.langchain_helpers.chain_wrapper import LLMPredictor\nfrom gpt_index.langchain_helpers.memory_wrapper import GPTIndexMemory\nfrom gpt_index.langchain_helpers.sql_wrapper import SQLDatabase\n\n# prompts\nfrom gpt_index.prompts.base import Prompt\nfrom gpt_index.prompts.prompts import (\n    KeywordExtractPrompt,\n    QueryKeywordExtractPrompt,\n    QuestionAnswerPrompt,\n    RefinePrompt,\n    SummaryPrompt,\n    TreeInsertPrompt,\n    TreeSelectMultiplePrompt,\n    TreeSelectPrompt,\n)\n\n# readers\nfrom gpt_index.readers import (\n    BeautifulSoupWebReader,\n    DiscordReader,\n    Document,\n    FaissReader,\n    GithubRepositoryReader,\n    GoogleDocsReader,\n    MboxReader,\n    NotionPageReader,\n    ObsidianReader,\n    PineconeReader,\n    QdrantReader,\n  ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/__init__.py", "file_name": "__init__.py"}, "index": 1, "child_indices": [], "ref_doc_id": "0054ff473fdab69e9283aafee2e4579f884d9e7b", "node_info": null}, "2": {"text": "   PineconeReader,\n    QdrantReader,\n    RssReader,\n    SimpleDirectoryReader,\n    SimpleMongoReader,\n    SimpleWebPageReader,\n    SlackReader,\n    StringIterableReader,\n    TrafilaturaWebReader,\n    TwitterTweetReader,\n    WeaviateReader,\n    WikipediaReader,\n)\nfrom gpt_index.readers.download import download_loader\n\n# token predictor\nfrom gpt_index.token_counter.mock_chain_wrapper import MockLLMPredictor\nfrom gpt_index.token_counter.mock_embed_model import MockEmbedding\n\n__all__ = [\n    \"GPTKeywordTableIndex\",\n    \"GPTSimpleKeywordTableIndex\",\n    \"GPTRAKEKeywordTableIndex\",\n    \"GPTListIndex\",\n    \"GPTTreeIndex\",\n    \"GPTFaissIndex\",\n    \"GPTSimpleVectorIndex\",\n    \"GPTWeaviateIndex\",\n    \"GPTPineconeIndex\",\n    \"GPTQdrantIndex\",\n    \"GPTSQLStructStoreIndex\",\n    \"Prompt\",\n    \"LangchainEmbedding\",\n    \"OpenAIEmbedding\",\n   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/__init__.py", "file_name": "__init__.py"}, "index": 2, "child_indices": [], "ref_doc_id": "0054ff473fdab69e9283aafee2e4579f884d9e7b", "node_info": null}, "3": {"text": "   \"OpenAIEmbedding\",\n    \"SummaryPrompt\",\n    \"TreeInsertPrompt\",\n    \"TreeSelectPrompt\",\n    \"TreeSelectMultiplePrompt\",\n    \"RefinePrompt\",\n    \"QuestionAnswerPrompt\",\n    \"KeywordExtractPrompt\",\n    \"QueryKeywordExtractPrompt\",\n    \"WikipediaReader\",\n    \"ObsidianReader\",\n    \"Document\",\n    \"SimpleDirectoryReader\",\n    \"SimpleMongoReader\",\n    \"NotionPageReader\",\n    \"GoogleDocsReader\",\n    \"MboxReader\",\n    \"SlackReader\",\n    \"StringIterableReader\",\n    \"WeaviateReader\",\n    \"FaissReader\",\n    \"PineconeReader\",\n    \"QdrantReader\",\n    \"DiscordReader\",\n    \"SimpleWebPageReader\",\n    \"RssReader\",\n    \"BeautifulSoupWebReader\",\n    \"TrafilaturaWebReader\",\n    \"LLMPredictor\",\n    \"MockLLMPredictor\",\n    \"MockEmbedding\",\n    \"SQLDatabase\",\n    \"GPTIndexMemory\",\n    \"SQLContextBuilder\",\n    \"PromptHelper\",\n   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/__init__.py", "file_name": "__init__.py"}, "index": 3, "child_indices": [], "ref_doc_id": "0054ff473fdab69e9283aafee2e4579f884d9e7b", "node_info": null}, "4": {"text": "  \"SQLContextBuilder\",\n    \"PromptHelper\",\n    \"QueryConfig\",\n    \"QueryMode\",\n    \"IndexStructType\",\n    \"TwitterTweetReader\",\n    \"download_loader\",\n    \"GithubRepositoryReader\",\n]\n\nimport logging\nfrom logging import NullHandler\n\n# best practices for library logging:\n# https://docs.python.org/3/howto/logging.html#configuring-logging-for-a-library\nlogging.getLogger(__name__).addHandler(NullHandler())\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/__init__.py", "file_name": "__init__.py"}, "index": 4, "child_indices": [], "ref_doc_id": "0054ff473fdab69e9283aafee2e4579f884d9e7b", "node_info": null}, "5": {"text": "This file is the init file of GPT Index, a library for indexing and searching data. It contains various data structures, algorithms, and classes for creating and managing indices. It includes embeddings, structured indices, prompt helpers, composability, langchain helpers, prompts, readers, token predictors, and logging. It also contains an __all__ list of all the components of the library.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 5, "child_indices": [0, 1, 2, 3, 4], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"5": {"text": "This file is the init file of GPT Index, a library for indexing and searching data. It contains various data structures, algorithms, and classes for creating and managing indices. It includes embeddings, structured indices, prompt helpers, composability, langchain helpers, prompts, readers, token predictors, and logging. It also contains an __all__ list of all the components of the library.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 5, "child_indices": [0, 1, 2, 3, 4], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}