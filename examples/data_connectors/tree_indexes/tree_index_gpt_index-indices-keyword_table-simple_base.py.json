{"index_struct": {"text": "\nGPTSimpleKeywordTableIndex is a keyword-table based index that allows users to quickly search through large amounts of text for specific keywords. It uses a regex extractor to extract keywords from text and stores them in a keyword table, with the maximum number of keywords per chunk set by the user. This index is an alternative to GPTKeywordTableIndex, which uses a more complex keyword extraction technique. The code file provides a way to quickly search through text for specific keywords, making it easier to find the desired information.", "doc_id": "5b4475bd-232a-400d-8fd3-7418cb957ffe", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Simple keyword-table based index.\n\nSimilar to GPTKeywordTableIndex, but uses a simpler keyword extraction\ntechnique that doesn't involve GPT - just uses regex.\n\n\"\"\"\n\nfrom typing import Set\n\nfrom gpt_index.indices.keyword_table.base import BaseGPTKeywordTableIndex\nfrom gpt_index.indices.keyword_table.utils import simple_extract_keywords\nfrom gpt_index.prompts.default_prompts import DEFAULT_QUERY_KEYWORD_EXTRACT_TEMPLATE\n\nDQKET = DEFAULT_QUERY_KEYWORD_EXTRACT_TEMPLATE\n\n\nclass GPTSimpleKeywordTableIndex(BaseGPTKeywordTableIndex):\n    \"\"\"GPT Simple Keyword Table Index.\n\n    This index uses a simple regex extractor to extract keywords from the text.\n\n    \"\"\"\n\n    def _extract_keywords(self, text: str) -> Set[str]:\n        \"\"\"Extract keywords from text.\"\"\"\n        return simple_extract_keywords(text, self.max_keywords_per_chunk)\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/keyword_table/simple_base.py", "file_name": "simple_base.py"}, "index": 0, "child_indices": [], "ref_doc_id": "4d542c38da0d37d7504500a56ee9473f24f51eff", "node_info": null}, "1": {"text": "GPTSimpleKeywordTableIndex is a keyword-table based index that uses a simpler keyword extraction technique than GPTKeywordTableIndex. It uses a regex extractor to extract keywords from text and stores them in a keyword table. The maximum number of keywords per chunk is set by the user. This index is useful for quickly searching through large amounts of text for specific keywords.", "doc_id": null, "embedding": null, "extra_info": null, "index": 1, "child_indices": [0], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"1": {"text": "GPTSimpleKeywordTableIndex is a keyword-table based index that uses a simpler keyword extraction technique than GPTKeywordTableIndex. It uses a regex extractor to extract keywords from text and stores them in a keyword table. The maximum number of keywords per chunk is set by the user. This index is useful for quickly searching through large amounts of text for specific keywords.", "doc_id": null, "embedding": null, "extra_info": null, "index": 1, "child_indices": [0], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"4d542c38da0d37d7504500a56ee9473f24f51eff": {"text": "\"\"\"Simple keyword-table based index.\n\nSimilar to GPTKeywordTableIndex, but uses a simpler keyword extraction\ntechnique that doesn't involve GPT - just uses regex.\n\n\"\"\"\n\nfrom typing import Set\n\nfrom gpt_index.indices.keyword_table.base import BaseGPTKeywordTableIndex\nfrom gpt_index.indices.keyword_table.utils import simple_extract_keywords\nfrom gpt_index.prompts.default_prompts import DEFAULT_QUERY_KEYWORD_EXTRACT_TEMPLATE\n\nDQKET = DEFAULT_QUERY_KEYWORD_EXTRACT_TEMPLATE\n\n\nclass GPTSimpleKeywordTableIndex(BaseGPTKeywordTableIndex):\n    \"\"\"GPT Simple Keyword Table Index.\n\n    This index uses a simple regex extractor to extract keywords from the text.\n\n    \"\"\"\n\n    def _extract_keywords(self, text: str) -> Set[str]:\n        \"\"\"Extract keywords from text.\"\"\"\n        return simple_extract_keywords(text, self.max_keywords_per_chunk)\n", "doc_id": "4d542c38da0d37d7504500a56ee9473f24f51eff", "embedding": null, "extra_info": {"file_path": "gpt_index/indices/keyword_table/simple_base.py", "file_name": "simple_base.py"}, "__type__": "Document"}, "5b4475bd-232a-400d-8fd3-7418cb957ffe": {"text": "\nGPTSimpleKeywordTableIndex is a keyword-table based index that allows users to quickly search through large amounts of text for specific keywords. It uses a regex extractor to extract keywords from text and stores them in a keyword table, with the maximum number of keywords per chunk set by the user. This index is an alternative to GPTKeywordTableIndex, which uses a more complex keyword extraction technique. The code file provides a way to quickly search through text for specific keywords, making it easier to find the desired information.", "doc_id": "5b4475bd-232a-400d-8fd3-7418cb957ffe", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Simple keyword-table based index.\n\nSimilar to GPTKeywordTableIndex, but uses a simpler keyword extraction\ntechnique that doesn't involve GPT - just uses regex.\n\n\"\"\"\n\nfrom typing import Set\n\nfrom gpt_index.indices.keyword_table.base import BaseGPTKeywordTableIndex\nfrom gpt_index.indices.keyword_table.utils import simple_extract_keywords\nfrom gpt_index.prompts.default_prompts import DEFAULT_QUERY_KEYWORD_EXTRACT_TEMPLATE\n\nDQKET = DEFAULT_QUERY_KEYWORD_EXTRACT_TEMPLATE\n\n\nclass GPTSimpleKeywordTableIndex(BaseGPTKeywordTableIndex):\n    \"\"\"GPT Simple Keyword Table Index.\n\n    This index uses a simple regex extractor to extract keywords from the text.\n\n    \"\"\"\n\n    def _extract_keywords(self, text: str) -> Set[str]:\n        \"\"\"Extract keywords from text.\"\"\"\n        return simple_extract_keywords(text, self.max_keywords_per_chunk)\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/keyword_table/simple_base.py", "file_name": "simple_base.py"}, "index": 0, "child_indices": [], "ref_doc_id": "4d542c38da0d37d7504500a56ee9473f24f51eff", "node_info": null}, "1": {"text": "GPTSimpleKeywordTableIndex is a keyword-table based index that uses a simpler keyword extraction technique than GPTKeywordTableIndex. It uses a regex extractor to extract keywords from text and stores them in a keyword table. The maximum number of keywords per chunk is set by the user. This index is useful for quickly searching through large amounts of text for specific keywords.", "doc_id": null, "embedding": null, "extra_info": null, "index": 1, "child_indices": [0], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"1": {"text": "GPTSimpleKeywordTableIndex is a keyword-table based index that uses a simpler keyword extraction technique than GPTKeywordTableIndex. It uses a regex extractor to extract keywords from text and stores them in a keyword table. The maximum number of keywords per chunk is set by the user. This index is useful for quickly searching through large amounts of text for specific keywords.", "doc_id": null, "embedding": null, "extra_info": null, "index": 1, "child_indices": [0], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}