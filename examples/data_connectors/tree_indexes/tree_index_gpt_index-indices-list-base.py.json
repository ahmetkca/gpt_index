{"index_struct": {"text": "\nThe GPTListIndex is a data structure used to answer queries. It is constructed by chunking up document texts, converting them to nodes, and storing them in a list. During query time, the list index iterates through the nodes with optional filter parameters, and synthesizes an answer from all the nodes. The list index also supports insertion and deletion of documents. It uses a Question-Answer Prompt to chunk up the documents and a LLMPredictor to generate the nodes. The purpose of the code is to provide a data structure that can quickly and accurately answer queries, while also allowing for the insertion and deletion of documents.", "doc_id": "5c18e76d-ae8c-4f7d-aff6-4da9e4843fe8", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"List index.\n\nA simple data structure where GPT Index iterates through document chunks\nin sequence in order to answer a given query.\n\n\"\"\"\n\nfrom typing import Any, Dict, Optional, Sequence, Type\n\nfrom gpt_index.data_structs.data_structs import IndexList\nfrom gpt_index.indices.base import DOCUMENTS_INPUT, BaseGPTIndex\nfrom gpt_index.indices.query.base import BaseGPTIndexQuery\nfrom gpt_index.indices.query.list.embedding_query import GPTListIndexEmbeddingQuery\nfrom gpt_index.indices.query.list.query import GPTListIndexQuery\nfrom gpt_index.indices.query.schema import QueryMode\nfrom gpt_index.langchain_helpers.chain_wrapper import LLMPredictor\nfrom gpt_index.prompts.default_prompts import DEFAULT_TEXT_QA_PROMPT\nfrom gpt_index.prompts.prompts import QuestionAnswerPrompt\nfrom gpt_index.schema import BaseDocument\n\n# This query is used to summarize the contents of the index.\nGENERATE_TEXT_QUERY = \"What is a concise summary of this document?\"\n\n\nclass GPTListIndex(BaseGPTIndex[IndexList]):\n    \"\"\"GPT List Index.\n\n    The list index is a simple data structure where nodes are stored in\n    a", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/base.py", "file_name": "base.py"}, "index": 0, "child_indices": [], "ref_doc_id": "1a2d7ad3d7362260f2d3eae8d83d06e21bd1df97", "node_info": null}, "1": {"text": "list index is a simple data structure where nodes are stored in\n    a sequence. During index construction, the document texts are\n    chunked up, converted to nodes, and stored in a list.\n\n    During query time, the list index iterates through the nodes\n    with some optional filter parameters, and synthesizes an\n    answer from all the nodes.\n\n    Args:\n        text_qa_template (Optional[QuestionAnswerPrompt]): A Question-Answer Prompt\n            (see :ref:`Prompt-Templates`).\n\n    \"\"\"\n\n    index_struct_cls = IndexList\n\n    def __init__(\n        self,\n        documents: Optional[Sequence[DOCUMENTS_INPUT]] = None,\n        index_struct: Optional[IndexList] = None,\n        text_qa_template: Optional[QuestionAnswerPrompt] = None,\n        llm_predictor: Optional[LLMPredictor] = None,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Initialize params.\"\"\"\n        self.text_qa_template = text_qa_template or", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/base.py", "file_name": "base.py"}, "index": 1, "child_indices": [], "ref_doc_id": "1a2d7ad3d7362260f2d3eae8d83d06e21bd1df97", "node_info": null}, "2": {"text": "      self.text_qa_template = text_qa_template or DEFAULT_TEXT_QA_PROMPT\n        super().__init__(\n            documents=documents,\n            index_struct=index_struct,\n            llm_predictor=llm_predictor,\n            **kwargs,\n        )\n        # NOTE: when building the list index, text_qa_template is not partially\n        # formatted because we don't know the query ahead of time.\n        self._text_splitter = self._prompt_helper.get_text_splitter_given_prompt(\n            self.text_qa_template, 1\n        )\n\n    @classmethod\n    def get_query_map(self) -> Dict[str, Type[BaseGPTIndexQuery]]:\n        \"\"\"Get query map.\"\"\"\n        return {\n            QueryMode.DEFAULT: GPTListIndexQuery,\n           ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/base.py", "file_name": "base.py"}, "index": 2, "child_indices": [], "ref_doc_id": "1a2d7ad3d7362260f2d3eae8d83d06e21bd1df97", "node_info": null}, "3": {"text": "GPTListIndexQuery,\n            QueryMode.EMBEDDING: GPTListIndexEmbeddingQuery,\n        }\n\n    def _build_index_from_documents(\n        self, documents: Sequence[BaseDocument]\n    ) -> IndexList:\n        \"\"\"Build the index from documents.\n\n        Args:\n            documents (List[BaseDocument]): A list of documents.\n\n        Returns:\n            IndexList: The created list index.\n        \"\"\"\n        text_splitter = self._prompt_helper.get_text_splitter_given_prompt(\n            self.text_qa_template, 1\n        )\n        index_struct = IndexList()\n        for d in documents:\n            nodes = self._get_nodes_from_document(d, text_splitter)\n            for n in nodes:\n                index_struct.add_node(n)\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/base.py", "file_name": "base.py"}, "index": 3, "child_indices": [], "ref_doc_id": "1a2d7ad3d7362260f2d3eae8d83d06e21bd1df97", "node_info": null}, "4": {"text": "         index_struct.add_node(n)\n        return index_struct\n\n    def _insert(self, document: BaseDocument, **insert_kwargs: Any) -> None:\n        \"\"\"Insert a document.\"\"\"\n        nodes = self._get_nodes_from_document(document, self._text_splitter)\n        for n in nodes:\n            self._index_struct.add_node(n)\n\n    def _delete(self, doc_id: str, **delete_kwargs: Any) -> None:\n        \"\"\"Delete a document.\"\"\"\n        cur_nodes = self._index_struct.nodes\n        nodes_to_keep = [n for n in cur_nodes if n.ref_doc_id != doc_id]\n        self._index_struct.nodes = nodes_to_keep\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/base.py", "file_name": "base.py"}, "index": 4, "child_indices": [], "ref_doc_id": "1a2d7ad3d7362260f2d3eae8d83d06e21bd1df97", "node_info": null}, "5": {"text": "GPTListIndex is a simple data structure where GPT Index iterates through document chunks in sequence in order to answer a given query. During index construction, the document texts are chunked up, converted to nodes, and stored in a list. During query time, the list index iterates through the nodes with some optional filter parameters, and synthesizes an answer from all the nodes. The list index also supports insertion and deletion of documents.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 5, "child_indices": [0, 1, 2, 3, 4], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"5": {"text": "GPTListIndex is a simple data structure where GPT Index iterates through document chunks in sequence in order to answer a given query. During index construction, the document texts are chunked up, converted to nodes, and stored in a list. During query time, the list index iterates through the nodes with some optional filter parameters, and synthesizes an answer from all the nodes. The list index also supports insertion and deletion of documents.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 5, "child_indices": [0, 1, 2, 3, 4], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"1a2d7ad3d7362260f2d3eae8d83d06e21bd1df97": {"text": "\"\"\"List index.\n\nA simple data structure where GPT Index iterates through document chunks\nin sequence in order to answer a given query.\n\n\"\"\"\n\nfrom typing import Any, Dict, Optional, Sequence, Type\n\nfrom gpt_index.data_structs.data_structs import IndexList\nfrom gpt_index.indices.base import DOCUMENTS_INPUT, BaseGPTIndex\nfrom gpt_index.indices.query.base import BaseGPTIndexQuery\nfrom gpt_index.indices.query.list.embedding_query import GPTListIndexEmbeddingQuery\nfrom gpt_index.indices.query.list.query import GPTListIndexQuery\nfrom gpt_index.indices.query.schema import QueryMode\nfrom gpt_index.langchain_helpers.chain_wrapper import LLMPredictor\nfrom gpt_index.prompts.default_prompts import DEFAULT_TEXT_QA_PROMPT\nfrom gpt_index.prompts.prompts import QuestionAnswerPrompt\nfrom gpt_index.schema import BaseDocument\n\n# This query is used to summarize the contents of the index.\nGENERATE_TEXT_QUERY = \"What is a concise summary of this document?\"\n\n\nclass GPTListIndex(BaseGPTIndex[IndexList]):\n    \"\"\"GPT List Index.\n\n    The list index is a simple data structure where nodes are stored in\n    a sequence. During index construction, the document texts are\n    chunked up, converted to nodes, and stored in a list.\n\n    During query time, the list index iterates through the nodes\n    with some optional filter parameters, and synthesizes an\n    answer from all the nodes.\n\n    Args:\n        text_qa_template (Optional[QuestionAnswerPrompt]): A Question-Answer Prompt\n            (see :ref:`Prompt-Templates`).\n\n    \"\"\"\n\n    index_struct_cls = IndexList\n\n    def __init__(\n        self,\n        documents: Optional[Sequence[DOCUMENTS_INPUT]] = None,\n        index_struct: Optional[IndexList] = None,\n        text_qa_template: Optional[QuestionAnswerPrompt] = None,\n        llm_predictor: Optional[LLMPredictor] = None,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Initialize params.\"\"\"\n        self.text_qa_template = text_qa_template or DEFAULT_TEXT_QA_PROMPT\n        super().__init__(\n            documents=documents,\n            index_struct=index_struct,\n            llm_predictor=llm_predictor,\n            **kwargs,\n        )\n        # NOTE: when building the list index, text_qa_template is not partially\n        # formatted because we don't know the query ahead of time.\n        self._text_splitter = self._prompt_helper.get_text_splitter_given_prompt(\n            self.text_qa_template, 1\n        )\n\n    @classmethod\n    def get_query_map(self) -> Dict[str, Type[BaseGPTIndexQuery]]:\n        \"\"\"Get query map.\"\"\"\n        return {\n            QueryMode.DEFAULT: GPTListIndexQuery,\n            QueryMode.EMBEDDING: GPTListIndexEmbeddingQuery,\n        }\n\n    def _build_index_from_documents(\n        self, documents: Sequence[BaseDocument]\n    ) -> IndexList:\n        \"\"\"Build the index from documents.\n\n        Args:\n            documents (List[BaseDocument]): A list of documents.\n\n        Returns:\n            IndexList: The created list index.\n        \"\"\"\n        text_splitter = self._prompt_helper.get_text_splitter_given_prompt(\n            self.text_qa_template, 1\n        )\n        index_struct = IndexList()\n        for d in documents:\n            nodes = self._get_nodes_from_document(d, text_splitter)\n            for n in nodes:\n                index_struct.add_node(n)\n        return index_struct\n\n    def _insert(self, document: BaseDocument, **insert_kwargs: Any) -> None:\n        \"\"\"Insert a document.\"\"\"\n        nodes = self._get_nodes_from_document(document, self._text_splitter)\n        for n in nodes:\n            self._index_struct.add_node(n)\n\n    def _delete(self, doc_id: str, **delete_kwargs: Any) -> None:\n        \"\"\"Delete a document.\"\"\"\n        cur_nodes = self._index_struct.nodes\n        nodes_to_keep = [n for n in cur_nodes if n.ref_doc_id != doc_id]\n        self._index_struct.nodes = nodes_to_keep\n", "doc_id": "1a2d7ad3d7362260f2d3eae8d83d06e21bd1df97", "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/base.py", "file_name": "base.py"}, "__type__": "Document"}, "5c18e76d-ae8c-4f7d-aff6-4da9e4843fe8": {"text": "\nThe GPTListIndex is a data structure used to answer queries. It is constructed by chunking up document texts, converting them to nodes, and storing them in a list. During query time, the list index iterates through the nodes with optional filter parameters, and synthesizes an answer from all the nodes. The list index also supports insertion and deletion of documents. It uses a Question-Answer Prompt to chunk up the documents and a LLMPredictor to generate the nodes. The purpose of the code is to provide a data structure that can quickly and accurately answer queries, while also allowing for the insertion and deletion of documents.", "doc_id": "5c18e76d-ae8c-4f7d-aff6-4da9e4843fe8", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"List index.\n\nA simple data structure where GPT Index iterates through document chunks\nin sequence in order to answer a given query.\n\n\"\"\"\n\nfrom typing import Any, Dict, Optional, Sequence, Type\n\nfrom gpt_index.data_structs.data_structs import IndexList\nfrom gpt_index.indices.base import DOCUMENTS_INPUT, BaseGPTIndex\nfrom gpt_index.indices.query.base import BaseGPTIndexQuery\nfrom gpt_index.indices.query.list.embedding_query import GPTListIndexEmbeddingQuery\nfrom gpt_index.indices.query.list.query import GPTListIndexQuery\nfrom gpt_index.indices.query.schema import QueryMode\nfrom gpt_index.langchain_helpers.chain_wrapper import LLMPredictor\nfrom gpt_index.prompts.default_prompts import DEFAULT_TEXT_QA_PROMPT\nfrom gpt_index.prompts.prompts import QuestionAnswerPrompt\nfrom gpt_index.schema import BaseDocument\n\n# This query is used to summarize the contents of the index.\nGENERATE_TEXT_QUERY = \"What is a concise summary of this document?\"\n\n\nclass GPTListIndex(BaseGPTIndex[IndexList]):\n    \"\"\"GPT List Index.\n\n    The list index is a simple data structure where nodes are stored in\n    a", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/base.py", "file_name": "base.py"}, "index": 0, "child_indices": [], "ref_doc_id": "1a2d7ad3d7362260f2d3eae8d83d06e21bd1df97", "node_info": null}, "1": {"text": "list index is a simple data structure where nodes are stored in\n    a sequence. During index construction, the document texts are\n    chunked up, converted to nodes, and stored in a list.\n\n    During query time, the list index iterates through the nodes\n    with some optional filter parameters, and synthesizes an\n    answer from all the nodes.\n\n    Args:\n        text_qa_template (Optional[QuestionAnswerPrompt]): A Question-Answer Prompt\n            (see :ref:`Prompt-Templates`).\n\n    \"\"\"\n\n    index_struct_cls = IndexList\n\n    def __init__(\n        self,\n        documents: Optional[Sequence[DOCUMENTS_INPUT]] = None,\n        index_struct: Optional[IndexList] = None,\n        text_qa_template: Optional[QuestionAnswerPrompt] = None,\n        llm_predictor: Optional[LLMPredictor] = None,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Initialize params.\"\"\"\n        self.text_qa_template = text_qa_template or", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/base.py", "file_name": "base.py"}, "index": 1, "child_indices": [], "ref_doc_id": "1a2d7ad3d7362260f2d3eae8d83d06e21bd1df97", "node_info": null}, "2": {"text": "      self.text_qa_template = text_qa_template or DEFAULT_TEXT_QA_PROMPT\n        super().__init__(\n            documents=documents,\n            index_struct=index_struct,\n            llm_predictor=llm_predictor,\n            **kwargs,\n        )\n        # NOTE: when building the list index, text_qa_template is not partially\n        # formatted because we don't know the query ahead of time.\n        self._text_splitter = self._prompt_helper.get_text_splitter_given_prompt(\n            self.text_qa_template, 1\n        )\n\n    @classmethod\n    def get_query_map(self) -> Dict[str, Type[BaseGPTIndexQuery]]:\n        \"\"\"Get query map.\"\"\"\n        return {\n            QueryMode.DEFAULT: GPTListIndexQuery,\n           ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/base.py", "file_name": "base.py"}, "index": 2, "child_indices": [], "ref_doc_id": "1a2d7ad3d7362260f2d3eae8d83d06e21bd1df97", "node_info": null}, "3": {"text": "GPTListIndexQuery,\n            QueryMode.EMBEDDING: GPTListIndexEmbeddingQuery,\n        }\n\n    def _build_index_from_documents(\n        self, documents: Sequence[BaseDocument]\n    ) -> IndexList:\n        \"\"\"Build the index from documents.\n\n        Args:\n            documents (List[BaseDocument]): A list of documents.\n\n        Returns:\n            IndexList: The created list index.\n        \"\"\"\n        text_splitter = self._prompt_helper.get_text_splitter_given_prompt(\n            self.text_qa_template, 1\n        )\n        index_struct = IndexList()\n        for d in documents:\n            nodes = self._get_nodes_from_document(d, text_splitter)\n            for n in nodes:\n                index_struct.add_node(n)\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/base.py", "file_name": "base.py"}, "index": 3, "child_indices": [], "ref_doc_id": "1a2d7ad3d7362260f2d3eae8d83d06e21bd1df97", "node_info": null}, "4": {"text": "         index_struct.add_node(n)\n        return index_struct\n\n    def _insert(self, document: BaseDocument, **insert_kwargs: Any) -> None:\n        \"\"\"Insert a document.\"\"\"\n        nodes = self._get_nodes_from_document(document, self._text_splitter)\n        for n in nodes:\n            self._index_struct.add_node(n)\n\n    def _delete(self, doc_id: str, **delete_kwargs: Any) -> None:\n        \"\"\"Delete a document.\"\"\"\n        cur_nodes = self._index_struct.nodes\n        nodes_to_keep = [n for n in cur_nodes if n.ref_doc_id != doc_id]\n        self._index_struct.nodes = nodes_to_keep\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/list/base.py", "file_name": "base.py"}, "index": 4, "child_indices": [], "ref_doc_id": "1a2d7ad3d7362260f2d3eae8d83d06e21bd1df97", "node_info": null}, "5": {"text": "GPTListIndex is a simple data structure where GPT Index iterates through document chunks in sequence in order to answer a given query. During index construction, the document texts are chunked up, converted to nodes, and stored in a list. During query time, the list index iterates through the nodes with some optional filter parameters, and synthesizes an answer from all the nodes. The list index also supports insertion and deletion of documents.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 5, "child_indices": [0, 1, 2, 3, 4], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"5": {"text": "GPTListIndex is a simple data structure where GPT Index iterates through document chunks in sequence in order to answer a given query. During index construction, the document texts are chunked up, converted to nodes, and stored in a list. During query time, the list index iterates through the nodes with some optional filter parameters, and synthesizes an answer from all the nodes. The list index also supports insertion and deletion of documents.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 5, "child_indices": [0, 1, 2, 3, 4], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}