{"index_struct": {"text": "\nThis code file contains a GPTListIndexEmbeddingQuery class which is used to query a GPTListIndex using an embedding-based approach. It uses the BaseEmbedding class to get the query and node embeddings, and the get_top_k_embeddings function to retrieve the top-k nodes. The SimilarityTracker class is used to track the similarity between the query and the nodes. The purpose of the code is to traverse each node in sequence and retrieve the top-k nodes by embedding similarity to the query. The code also allows for the retrieval of the query and node embeddings, as well as the tracking of the similarity between the query and the nodes. This code file provides a way to efficiently query a GPTListIndex using an embedding-based approach, allowing for the retrieval of the top-k nodes by embedding similarity to the query.", "doc_id": "ac455df0-6e5b-4b5c-83c0-15de4f871f5e", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Embedding query for list index.\"\"\"\nimport logging\nfrom typing import Any, List, Optional, Tuple\n\nfrom gpt_index.data_structs.data_structs import IndexList, Node\nfrom gpt_index.embeddings.base import BaseEmbedding\nfrom gpt_index.indices.query.embedding_utils import (\n    SimilarityTracker,\n    get_top_k_embeddings,\n)\nfrom gpt_index.indices.query.list.query import BaseGPTListIndexQuery\n\n\nclass GPTListIndexEmbeddingQuery(BaseGPTListIndexQuery):\n    \"\"\"GPTListIndex query.\n\n    An embedding-based query for GPTListIndex, which traverses\n    each node in sequence and retrieves top-k nodes by\n    embedding similarity to the query.\n    Set when `mode=\"embedding\"` in `query` method of `GPTListIndex`.\n\n    .. code-block:: python\n\n        response = index.query(\"<query_str>\", mode=\"embedding\")\n\n    See BaseGPTListIndexQuery for arguments.\n\n    \"\"\"\n\n    def __init__(\n        self,\n        index_struct: IndexList,\n        similarity_top_k:", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/embedding_query.py", "file_name": "embedding_query.py"}, "index": 0, "child_indices": [], "ref_doc_id": "e71bcbd161ee6d598676e20c22af9f62e8b11045", "node_info": null}, "1": {"text": "IndexList,\n        similarity_top_k: Optional[int] = 1,\n        embed_model: Optional[BaseEmbedding] = None,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Initialize params.\"\"\"\n        super().__init__(\n            index_struct=index_struct,\n            embed_model=embed_model,\n            **kwargs,\n        )\n        self.similarity_top_k = similarity_top_k\n\n    def _get_nodes_for_response(\n        self,\n        query_str: str,\n        similarity_tracker: Optional[SimilarityTracker] = None,\n    ) -> List[Node]:\n        \"\"\"Get nodes for response.\"\"\"\n        nodes = self.index_struct.nodes\n        # top k nodes\n        query_embedding, node_embeddings = self._get_embeddings(query_str, nodes)\n\n  ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/embedding_query.py", "file_name": "embedding_query.py"}, "index": 1, "child_indices": [], "ref_doc_id": "e71bcbd161ee6d598676e20c22af9f62e8b11045", "node_info": null}, "2": {"text": "= self._get_embeddings(query_str, nodes)\n\n        top_similarities, top_idxs = get_top_k_embeddings(\n            self._embed_model,\n            query_embedding,\n            node_embeddings,\n            similarity_top_k=self.similarity_top_k,\n            embedding_ids=list(range(len(nodes))),\n        )\n\n        top_k_nodes = [nodes[i] for i in top_idxs]\n\n        if similarity_tracker is not None:\n            for node, similarity in zip(top_k_nodes, top_similarities):\n                similarity_tracker.add(node, similarity)\n\n        logging.debug(f\"> Top {len(top_idxs)} nodes:\\n\")\n        nl = \"\\n\"\n        logging.debug(f\"{ nl.join([n.get_text() for n in", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/embedding_query.py", "file_name": "embedding_query.py"}, "index": 2, "child_indices": [], "ref_doc_id": "e71bcbd161ee6d598676e20c22af9f62e8b11045", "node_info": null}, "3": {"text": "nl.join([n.get_text() for n in top_k_nodes]) }\")\n        return top_k_nodes\n\n    def _get_embeddings(\n        self, query_str: str, nodes: List[Node]\n    ) -> Tuple[List[float], List[List[float]]]:\n        \"\"\"Get top nodes by similarity to the query.\"\"\"\n        query_embedding = self._embed_model.get_query_embedding(query_str)\n        node_embeddings: List[List[float]] = []\n        for node in self.index_struct.nodes:\n            if node.embedding is not None:\n                text_embedding = node.embedding\n            else:\n                text_embedding = self._embed_model.get_text_embedding(node.get_text())\n                node.embedding = text_embedding\n\n            node_embeddings.append(text_embedding)\n      ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/embedding_query.py", "file_name": "embedding_query.py"}, "index": 3, "child_indices": [], "ref_doc_id": "e71bcbd161ee6d598676e20c22af9f62e8b11045", "node_info": null}, "4": {"text": "node_embeddings.append(text_embedding)\n        return query_embedding, node_embeddings\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/embedding_query.py", "file_name": "embedding_query.py"}, "index": 4, "child_indices": [], "ref_doc_id": "e71bcbd161ee6d598676e20c22af9f62e8b11045", "node_info": null}, "5": {"text": "This code file contains the GPTListIndexEmbeddingQuery class, which is used to query a GPTListIndex using an embedding-based approach. It traverses each node in sequence and retrieves the top-k nodes by embedding similarity to the query. It uses the BaseEmbedding class to get the query and node embeddings, and the get_top_k_embeddings function to get the top-k nodes. It also uses the SimilarityTracker class to track the similarity between the query and the nodes.", "doc_id": null, "embedding": null, "extra_info": null, "index": 5, "child_indices": [0, 1, 2, 3, 4], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"5": {"text": "This code file contains the GPTListIndexEmbeddingQuery class, which is used to query a GPTListIndex using an embedding-based approach. It traverses each node in sequence and retrieves the top-k nodes by embedding similarity to the query. It uses the BaseEmbedding class to get the query and node embeddings, and the get_top_k_embeddings function to get the top-k nodes. It also uses the SimilarityTracker class to track the similarity between the query and the nodes.", "doc_id": null, "embedding": null, "extra_info": null, "index": 5, "child_indices": [0, 1, 2, 3, 4], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"e71bcbd161ee6d598676e20c22af9f62e8b11045": {"text": "\"\"\"Embedding query for list index.\"\"\"\nimport logging\nfrom typing import Any, List, Optional, Tuple\n\nfrom gpt_index.data_structs.data_structs import IndexList, Node\nfrom gpt_index.embeddings.base import BaseEmbedding\nfrom gpt_index.indices.query.embedding_utils import (\n    SimilarityTracker,\n    get_top_k_embeddings,\n)\nfrom gpt_index.indices.query.list.query import BaseGPTListIndexQuery\n\n\nclass GPTListIndexEmbeddingQuery(BaseGPTListIndexQuery):\n    \"\"\"GPTListIndex query.\n\n    An embedding-based query for GPTListIndex, which traverses\n    each node in sequence and retrieves top-k nodes by\n    embedding similarity to the query.\n    Set when `mode=\"embedding\"` in `query` method of `GPTListIndex`.\n\n    .. code-block:: python\n\n        response = index.query(\"<query_str>\", mode=\"embedding\")\n\n    See BaseGPTListIndexQuery for arguments.\n\n    \"\"\"\n\n    def __init__(\n        self,\n        index_struct: IndexList,\n        similarity_top_k: Optional[int] = 1,\n        embed_model: Optional[BaseEmbedding] = None,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Initialize params.\"\"\"\n        super().__init__(\n            index_struct=index_struct,\n            embed_model=embed_model,\n            **kwargs,\n        )\n        self.similarity_top_k = similarity_top_k\n\n    def _get_nodes_for_response(\n        self,\n        query_str: str,\n        similarity_tracker: Optional[SimilarityTracker] = None,\n    ) -> List[Node]:\n        \"\"\"Get nodes for response.\"\"\"\n        nodes = self.index_struct.nodes\n        # top k nodes\n        query_embedding, node_embeddings = self._get_embeddings(query_str, nodes)\n\n        top_similarities, top_idxs = get_top_k_embeddings(\n            self._embed_model,\n            query_embedding,\n            node_embeddings,\n            similarity_top_k=self.similarity_top_k,\n            embedding_ids=list(range(len(nodes))),\n        )\n\n        top_k_nodes = [nodes[i] for i in top_idxs]\n\n        if similarity_tracker is not None:\n            for node, similarity in zip(top_k_nodes, top_similarities):\n                similarity_tracker.add(node, similarity)\n\n        logging.debug(f\"> Top {len(top_idxs)} nodes:\\n\")\n        nl = \"\\n\"\n        logging.debug(f\"{ nl.join([n.get_text() for n in top_k_nodes]) }\")\n        return top_k_nodes\n\n    def _get_embeddings(\n        self, query_str: str, nodes: List[Node]\n    ) -> Tuple[List[float], List[List[float]]]:\n        \"\"\"Get top nodes by similarity to the query.\"\"\"\n        query_embedding = self._embed_model.get_query_embedding(query_str)\n        node_embeddings: List[List[float]] = []\n        for node in self.index_struct.nodes:\n            if node.embedding is not None:\n                text_embedding = node.embedding\n            else:\n                text_embedding = self._embed_model.get_text_embedding(node.get_text())\n                node.embedding = text_embedding\n\n            node_embeddings.append(text_embedding)\n        return query_embedding, node_embeddings\n", "doc_id": "e71bcbd161ee6d598676e20c22af9f62e8b11045", "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/embedding_query.py", "file_name": "embedding_query.py"}, "__type__": "Document"}, "ac455df0-6e5b-4b5c-83c0-15de4f871f5e": {"text": "\nThis code file contains a GPTListIndexEmbeddingQuery class which is used to query a GPTListIndex using an embedding-based approach. It uses the BaseEmbedding class to get the query and node embeddings, and the get_top_k_embeddings function to retrieve the top-k nodes. The SimilarityTracker class is used to track the similarity between the query and the nodes. The purpose of the code is to traverse each node in sequence and retrieve the top-k nodes by embedding similarity to the query. The code also allows for the retrieval of the query and node embeddings, as well as the tracking of the similarity between the query and the nodes. This code file provides a way to efficiently query a GPTListIndex using an embedding-based approach, allowing for the retrieval of the top-k nodes by embedding similarity to the query.", "doc_id": "ac455df0-6e5b-4b5c-83c0-15de4f871f5e", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Embedding query for list index.\"\"\"\nimport logging\nfrom typing import Any, List, Optional, Tuple\n\nfrom gpt_index.data_structs.data_structs import IndexList, Node\nfrom gpt_index.embeddings.base import BaseEmbedding\nfrom gpt_index.indices.query.embedding_utils import (\n    SimilarityTracker,\n    get_top_k_embeddings,\n)\nfrom gpt_index.indices.query.list.query import BaseGPTListIndexQuery\n\n\nclass GPTListIndexEmbeddingQuery(BaseGPTListIndexQuery):\n    \"\"\"GPTListIndex query.\n\n    An embedding-based query for GPTListIndex, which traverses\n    each node in sequence and retrieves top-k nodes by\n    embedding similarity to the query.\n    Set when `mode=\"embedding\"` in `query` method of `GPTListIndex`.\n\n    .. code-block:: python\n\n        response = index.query(\"<query_str>\", mode=\"embedding\")\n\n    See BaseGPTListIndexQuery for arguments.\n\n    \"\"\"\n\n    def __init__(\n        self,\n        index_struct: IndexList,\n        similarity_top_k:", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/embedding_query.py", "file_name": "embedding_query.py"}, "index": 0, "child_indices": [], "ref_doc_id": "e71bcbd161ee6d598676e20c22af9f62e8b11045", "node_info": null}, "1": {"text": "IndexList,\n        similarity_top_k: Optional[int] = 1,\n        embed_model: Optional[BaseEmbedding] = None,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Initialize params.\"\"\"\n        super().__init__(\n            index_struct=index_struct,\n            embed_model=embed_model,\n            **kwargs,\n        )\n        self.similarity_top_k = similarity_top_k\n\n    def _get_nodes_for_response(\n        self,\n        query_str: str,\n        similarity_tracker: Optional[SimilarityTracker] = None,\n    ) -> List[Node]:\n        \"\"\"Get nodes for response.\"\"\"\n        nodes = self.index_struct.nodes\n        # top k nodes\n        query_embedding, node_embeddings = self._get_embeddings(query_str, nodes)\n\n  ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/embedding_query.py", "file_name": "embedding_query.py"}, "index": 1, "child_indices": [], "ref_doc_id": "e71bcbd161ee6d598676e20c22af9f62e8b11045", "node_info": null}, "2": {"text": "= self._get_embeddings(query_str, nodes)\n\n        top_similarities, top_idxs = get_top_k_embeddings(\n            self._embed_model,\n            query_embedding,\n            node_embeddings,\n            similarity_top_k=self.similarity_top_k,\n            embedding_ids=list(range(len(nodes))),\n        )\n\n        top_k_nodes = [nodes[i] for i in top_idxs]\n\n        if similarity_tracker is not None:\n            for node, similarity in zip(top_k_nodes, top_similarities):\n                similarity_tracker.add(node, similarity)\n\n        logging.debug(f\"> Top {len(top_idxs)} nodes:\\n\")\n        nl = \"\\n\"\n        logging.debug(f\"{ nl.join([n.get_text() for n in", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/embedding_query.py", "file_name": "embedding_query.py"}, "index": 2, "child_indices": [], "ref_doc_id": "e71bcbd161ee6d598676e20c22af9f62e8b11045", "node_info": null}, "3": {"text": "nl.join([n.get_text() for n in top_k_nodes]) }\")\n        return top_k_nodes\n\n    def _get_embeddings(\n        self, query_str: str, nodes: List[Node]\n    ) -> Tuple[List[float], List[List[float]]]:\n        \"\"\"Get top nodes by similarity to the query.\"\"\"\n        query_embedding = self._embed_model.get_query_embedding(query_str)\n        node_embeddings: List[List[float]] = []\n        for node in self.index_struct.nodes:\n            if node.embedding is not None:\n                text_embedding = node.embedding\n            else:\n                text_embedding = self._embed_model.get_text_embedding(node.get_text())\n                node.embedding = text_embedding\n\n            node_embeddings.append(text_embedding)\n      ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/embedding_query.py", "file_name": "embedding_query.py"}, "index": 3, "child_indices": [], "ref_doc_id": "e71bcbd161ee6d598676e20c22af9f62e8b11045", "node_info": null}, "4": {"text": "node_embeddings.append(text_embedding)\n        return query_embedding, node_embeddings\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/embedding_query.py", "file_name": "embedding_query.py"}, "index": 4, "child_indices": [], "ref_doc_id": "e71bcbd161ee6d598676e20c22af9f62e8b11045", "node_info": null}, "5": {"text": "This code file contains the GPTListIndexEmbeddingQuery class, which is used to query a GPTListIndex using an embedding-based approach. It traverses each node in sequence and retrieves the top-k nodes by embedding similarity to the query. It uses the BaseEmbedding class to get the query and node embeddings, and the get_top_k_embeddings function to get the top-k nodes. It also uses the SimilarityTracker class to track the similarity between the query and the nodes.", "doc_id": null, "embedding": null, "extra_info": null, "index": 5, "child_indices": [0, 1, 2, 3, 4], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"5": {"text": "This code file contains the GPTListIndexEmbeddingQuery class, which is used to query a GPTListIndex using an embedding-based approach. It traverses each node in sequence and retrieves the top-k nodes by embedding similarity to the query. It uses the BaseEmbedding class to get the query and node embeddings, and the get_top_k_embeddings function to get the top-k nodes. It also uses the SimilarityTracker class to track the similarity between the query and the nodes.", "doc_id": null, "embedding": null, "extra_info": null, "index": 5, "child_indices": [0, 1, 2, 3, 4], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}