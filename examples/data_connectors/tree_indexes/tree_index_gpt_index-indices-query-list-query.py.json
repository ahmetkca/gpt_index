{"index_struct": {"text": "\nThe query.py file contains code for querying the GPTListIndex. It consists of two classes, BaseGPTListIndexQuery and GPTListIndexQuery, which are used to construct the query and retrieve the nodes for the response. The BaseGPTListIndexQuery class provides the arguments for the query, while the GPTListIndexQuery class contains a method, _get_nodes_for_response, which is used to get the nodes for the response. The query is set when the mode is set to \"default\" in the query method of GPTListIndex. The purpose of the code is to provide a way to query the GPTListIndex and retrieve the nodes for the response in an efficient and organized manner.", "doc_id": "6b0d4599-061c-4029-8ba0-e5adb99e5e8f", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Default query for GPTListIndex.\"\"\"\nfrom typing import List, Optional\n\nfrom gpt_index.data_structs.data_structs import IndexList, Node\nfrom gpt_index.indices.query.base import BaseGPTIndexQuery\nfrom gpt_index.indices.query.embedding_utils import SimilarityTracker\n\n\nclass BaseGPTListIndexQuery(BaseGPTIndexQuery[IndexList]):\n    \"\"\"GPTListIndex query.\n\n    Arguments are shared among subclasses.\n\n    Args:\n        text_qa_template (Optional[QuestionAnswerPrompt]): A Question Answering Prompt\n            (see :ref:`Prompt-Templates`).\n        refine_template (Optional[RefinePrompt]): A Refinement Prompt\n            (see :ref:`Prompt-Templates`).\n\n    \"\"\"\n\n\nclass GPTListIndexQuery(BaseGPTListIndexQuery):\n    \"\"\"GPTListIndex query.\n\n    The default query mode for GPTListIndex, which traverses\n    each node in sequence and synthesizes a response across all nodes\n    (with an optional keyword filter).\n    Set when `mode=\"default\"` in `query` method of `GPTListIndex`.\n\n    .. code-block::", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/query.py", "file_name": "query.py"}, "index": 0, "child_indices": [], "ref_doc_id": "bd6aa1b66d7aceaee608581629f7c7cb293929b2", "node_info": null}, "1": {"text": "`query` method of `GPTListIndex`.\n\n    .. code-block:: python\n\n        response = index.query(\"<query_str>\", mode=\"default\")\n\n    See BaseGPTListIndexQuery for arguments.\n\n    \"\"\"\n\n    def _get_nodes_for_response(\n        self,\n        query_str: str,\n        similarity_tracker: Optional[SimilarityTracker] = None,\n    ) -> List[Node]:\n        \"\"\"Get nodes for response.\"\"\"\n        return self.index_struct.nodes\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/query.py", "file_name": "query.py"}, "index": 1, "child_indices": [], "ref_doc_id": "bd6aa1b66d7aceaee608581629f7c7cb293929b2", "node_info": null}, "2": {"text": "query.py is a file that contains the code for the default query for GPTListIndex. It contains two classes, BaseGPTListIndexQuery and GPTListIndexQuery, which are used to query the GPTListIndex. The GPTListIndexQuery class contains a method, _get_nodes_for_response, which is used to get the nodes for the response. The query is set when the mode is set to \"default\" in the query method of GPTListIndex.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"2": {"text": "query.py is a file that contains the code for the default query for GPTListIndex. It contains two classes, BaseGPTListIndexQuery and GPTListIndexQuery, which are used to query the GPTListIndex. The GPTListIndexQuery class contains a method, _get_nodes_for_response, which is used to get the nodes for the response. The query is set when the mode is set to \"default\" in the query method of GPTListIndex.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"bd6aa1b66d7aceaee608581629f7c7cb293929b2": {"text": "\"\"\"Default query for GPTListIndex.\"\"\"\nfrom typing import List, Optional\n\nfrom gpt_index.data_structs.data_structs import IndexList, Node\nfrom gpt_index.indices.query.base import BaseGPTIndexQuery\nfrom gpt_index.indices.query.embedding_utils import SimilarityTracker\n\n\nclass BaseGPTListIndexQuery(BaseGPTIndexQuery[IndexList]):\n    \"\"\"GPTListIndex query.\n\n    Arguments are shared among subclasses.\n\n    Args:\n        text_qa_template (Optional[QuestionAnswerPrompt]): A Question Answering Prompt\n            (see :ref:`Prompt-Templates`).\n        refine_template (Optional[RefinePrompt]): A Refinement Prompt\n            (see :ref:`Prompt-Templates`).\n\n    \"\"\"\n\n\nclass GPTListIndexQuery(BaseGPTListIndexQuery):\n    \"\"\"GPTListIndex query.\n\n    The default query mode for GPTListIndex, which traverses\n    each node in sequence and synthesizes a response across all nodes\n    (with an optional keyword filter).\n    Set when `mode=\"default\"` in `query` method of `GPTListIndex`.\n\n    .. code-block:: python\n\n        response = index.query(\"<query_str>\", mode=\"default\")\n\n    See BaseGPTListIndexQuery for arguments.\n\n    \"\"\"\n\n    def _get_nodes_for_response(\n        self,\n        query_str: str,\n        similarity_tracker: Optional[SimilarityTracker] = None,\n    ) -> List[Node]:\n        \"\"\"Get nodes for response.\"\"\"\n        return self.index_struct.nodes\n", "doc_id": "bd6aa1b66d7aceaee608581629f7c7cb293929b2", "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/query.py", "file_name": "query.py"}, "__type__": "Document"}, "6b0d4599-061c-4029-8ba0-e5adb99e5e8f": {"text": "\nThe query.py file contains code for querying the GPTListIndex. It consists of two classes, BaseGPTListIndexQuery and GPTListIndexQuery, which are used to construct the query and retrieve the nodes for the response. The BaseGPTListIndexQuery class provides the arguments for the query, while the GPTListIndexQuery class contains a method, _get_nodes_for_response, which is used to get the nodes for the response. The query is set when the mode is set to \"default\" in the query method of GPTListIndex. The purpose of the code is to provide a way to query the GPTListIndex and retrieve the nodes for the response in an efficient and organized manner.", "doc_id": "6b0d4599-061c-4029-8ba0-e5adb99e5e8f", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Default query for GPTListIndex.\"\"\"\nfrom typing import List, Optional\n\nfrom gpt_index.data_structs.data_structs import IndexList, Node\nfrom gpt_index.indices.query.base import BaseGPTIndexQuery\nfrom gpt_index.indices.query.embedding_utils import SimilarityTracker\n\n\nclass BaseGPTListIndexQuery(BaseGPTIndexQuery[IndexList]):\n    \"\"\"GPTListIndex query.\n\n    Arguments are shared among subclasses.\n\n    Args:\n        text_qa_template (Optional[QuestionAnswerPrompt]): A Question Answering Prompt\n            (see :ref:`Prompt-Templates`).\n        refine_template (Optional[RefinePrompt]): A Refinement Prompt\n            (see :ref:`Prompt-Templates`).\n\n    \"\"\"\n\n\nclass GPTListIndexQuery(BaseGPTListIndexQuery):\n    \"\"\"GPTListIndex query.\n\n    The default query mode for GPTListIndex, which traverses\n    each node in sequence and synthesizes a response across all nodes\n    (with an optional keyword filter).\n    Set when `mode=\"default\"` in `query` method of `GPTListIndex`.\n\n    .. code-block::", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/query.py", "file_name": "query.py"}, "index": 0, "child_indices": [], "ref_doc_id": "bd6aa1b66d7aceaee608581629f7c7cb293929b2", "node_info": null}, "1": {"text": "`query` method of `GPTListIndex`.\n\n    .. code-block:: python\n\n        response = index.query(\"<query_str>\", mode=\"default\")\n\n    See BaseGPTListIndexQuery for arguments.\n\n    \"\"\"\n\n    def _get_nodes_for_response(\n        self,\n        query_str: str,\n        similarity_tracker: Optional[SimilarityTracker] = None,\n    ) -> List[Node]:\n        \"\"\"Get nodes for response.\"\"\"\n        return self.index_struct.nodes\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/list/query.py", "file_name": "query.py"}, "index": 1, "child_indices": [], "ref_doc_id": "bd6aa1b66d7aceaee608581629f7c7cb293929b2", "node_info": null}, "2": {"text": "query.py is a file that contains the code for the default query for GPTListIndex. It contains two classes, BaseGPTListIndexQuery and GPTListIndexQuery, which are used to query the GPTListIndex. The GPTListIndexQuery class contains a method, _get_nodes_for_response, which is used to get the nodes for the response. The query is set when the mode is set to \"default\" in the query method of GPTListIndex.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"2": {"text": "query.py is a file that contains the code for the default query for GPTListIndex. It contains two classes, BaseGPTListIndexQuery and GPTListIndexQuery, which are used to query the GPTListIndex. The GPTListIndexQuery class contains a method, _get_nodes_for_response, which is used to get the nodes for the response. The query is set when the mode is set to \"default\" in the query method of GPTListIndex.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}