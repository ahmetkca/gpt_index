{"index_struct": {"text": "\nThis code file provides a schema for configuring queries in the GPT index. It includes an enum of 8 query modes (default, retrieve, embedding, summarize, simple, rake, recursive, and sql) and a dataclass for query configs. The query configs include an index struct type, a query mode, and query kwargs. The query configs can be specified as either a list of query config objects or a list of JSON dictionaries. The purpose of this code is to allow users to specify the query mode and kwargs for each individual subindex within a composed index, allowing for more precise and efficient query processing.", "doc_id": "d3fe541a-27c4-4264-b074-0475cceb13a5", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Query Configuration Schema.\n\nThis schema is used under the hood for all queries, but is primarily\nexposed for recursive queries over composable indices.\n\n\"\"\"\n\nfrom dataclasses import dataclass, field\nfrom enum import Enum\nfrom typing import Any, Dict\n\nfrom dataclasses_json import DataClassJsonMixin\n\n\nclass QueryMode(str, Enum):\n    \"\"\"Query mode enum.\n\n    Can be passed as the enum struct, or as the underlying string.\n\n    Attributes:\n        DEFAULT (\"default\"): Default query mode.\n        RETRIEVE (\"retrieve\"): Retrieve mode.\n        EMBEDDING (\"embedding\"): Embedding mode.\n        SUMMARIZE (\"summarize\"): Summarize mode. Used for hierarchical\n            summarization in the tree index.\n        SIMPLE (\"simple\"): Simple mode. Used for keyword extraction.\n        RAKE (\"rake\"): RAKE mode. Used for keyword extraction.\n        RECURSIVE (\"recursive\"): Recursive mode. Used to recursively query\n            over composed indices.\n\n    \"\"\"\n\n    DEFAULT =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/schema.py", "file_name": "schema.py"}, "index": 0, "child_indices": [], "ref_doc_id": "d7ed8486721f6f32f5c8ed69fbdce569a77b5ed0", "node_info": null}, "1": {"text": "  over composed indices.\n\n    \"\"\"\n\n    DEFAULT = \"default\"\n    # a special \"retrieve\" query for tree index that retrieves that top nodes\n    RETRIEVE = \"retrieve\"\n    # embedding-based query\n    EMBEDDING = \"embedding\"\n\n    # to hierarchically summarize using tree\n    SUMMARIZE = \"summarize\"\n\n    # for keyword extractor\n    SIMPLE = \"simple\"\n    RAKE = \"rake\"\n\n    # recursive queries (composable queries)\n    # NOTE: deprecated\n    RECURSIVE = \"recursive\"\n\n    # for sql queries\n    SQL = \"sql\"\n\n\n@dataclass\nclass QueryConfig(DataClassJsonMixin):\n    \"\"\"Query config.\n\n    Used under the hood for all queries.\n    The user must explicitly specify a list of query config objects is passed during\n    a query call to define configurations for each individual subindex within an\n    overall composed index.\n\n    The user may choose to specify either the query config objects directly,\n    or as a list of JSON dictionaries. For instance, the following are equivalent:\n\n    .. code-block:: python\n\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/schema.py", "file_name": "schema.py"}, "index": 1, "child_indices": [], "ref_doc_id": "d7ed8486721f6f32f5c8ed69fbdce569a77b5ed0", "node_info": null}, "2": {"text": "   .. code-block:: python\n\n        # using JSON dictionaries\n        query_configs = [\n            {\n                \"index_struct_type\": \"tree\",\n                \"query_mode\": \"default\",\n                \"query_kwargs\": {\n                    \"child_branch_factor\": 2\n                }\n            },\n            ...\n        ]\n        response = index.query(\n            \"<query_str>\", mode=\"recursive\", query_configs=query_configs\n        )\n\n    .. code-block:: python\n\n        query_configs = [\n            QueryConfig(\n                index_struct_type=IndexStructType.TREE,\n               ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/schema.py", "file_name": "schema.py"}, "index": 2, "child_indices": [], "ref_doc_id": "d7ed8486721f6f32f5c8ed69fbdce569a77b5ed0", "node_info": null}, "3": {"text": "               query_mode=QueryMode.DEFAULT,\n                query_kwargs={\n                    \"child_branch_factor\": 2\n                }\n            )\n            ...\n        ]\n        response = index.query(\n            \"<query_str>\", mode=\"recursive\", query_configs=query_configs\n        )\n\n\n    Args:\n        index_struct_type (IndexStructType): The type of index struct.\n        query_mode (QueryMode): The query mode.\n        query_kwargs (Dict[str, Any], optional): The query kwargs. Defaults to {}.\n\n    \"\"\"\n\n    # index_struct_type: IndexStructType\n    index_struct_type: str\n    query_mode: QueryMode\n    query_kwargs: Dict[str, Any] = field(default_factory=dict)\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/schema.py", "file_name": "schema.py"}, "index": 3, "child_indices": [], "ref_doc_id": "d7ed8486721f6f32f5c8ed69fbdce569a77b5ed0", "node_info": null}, "4": {"text": "This code file contains a schema for query configuration used for all queries in the GPT index. It includes an enum of query modes, a dataclass for query configs, and a dataclass-json mixin for serializing and deserializing query configs. The query modes include default, retrieve, embedding, summarize, simple, rake, recursive, and sql. The query configs include an index struct type, a query mode, and query kwargs. The query configs can be specified as either a list of query config objects or a list of JSON dictionaries.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"4": {"text": "This code file contains a schema for query configuration used for all queries in the GPT index. It includes an enum of query modes, a dataclass for query configs, and a dataclass-json mixin for serializing and deserializing query configs. The query modes include default, retrieve, embedding, summarize, simple, rake, recursive, and sql. The query configs include an index struct type, a query mode, and query kwargs. The query configs can be specified as either a list of query config objects or a list of JSON dictionaries.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"d7ed8486721f6f32f5c8ed69fbdce569a77b5ed0": {"text": "\"\"\"Query Configuration Schema.\n\nThis schema is used under the hood for all queries, but is primarily\nexposed for recursive queries over composable indices.\n\n\"\"\"\n\nfrom dataclasses import dataclass, field\nfrom enum import Enum\nfrom typing import Any, Dict\n\nfrom dataclasses_json import DataClassJsonMixin\n\n\nclass QueryMode(str, Enum):\n    \"\"\"Query mode enum.\n\n    Can be passed as the enum struct, or as the underlying string.\n\n    Attributes:\n        DEFAULT (\"default\"): Default query mode.\n        RETRIEVE (\"retrieve\"): Retrieve mode.\n        EMBEDDING (\"embedding\"): Embedding mode.\n        SUMMARIZE (\"summarize\"): Summarize mode. Used for hierarchical\n            summarization in the tree index.\n        SIMPLE (\"simple\"): Simple mode. Used for keyword extraction.\n        RAKE (\"rake\"): RAKE mode. Used for keyword extraction.\n        RECURSIVE (\"recursive\"): Recursive mode. Used to recursively query\n            over composed indices.\n\n    \"\"\"\n\n    DEFAULT = \"default\"\n    # a special \"retrieve\" query for tree index that retrieves that top nodes\n    RETRIEVE = \"retrieve\"\n    # embedding-based query\n    EMBEDDING = \"embedding\"\n\n    # to hierarchically summarize using tree\n    SUMMARIZE = \"summarize\"\n\n    # for keyword extractor\n    SIMPLE = \"simple\"\n    RAKE = \"rake\"\n\n    # recursive queries (composable queries)\n    # NOTE: deprecated\n    RECURSIVE = \"recursive\"\n\n    # for sql queries\n    SQL = \"sql\"\n\n\n@dataclass\nclass QueryConfig(DataClassJsonMixin):\n    \"\"\"Query config.\n\n    Used under the hood for all queries.\n    The user must explicitly specify a list of query config objects is passed during\n    a query call to define configurations for each individual subindex within an\n    overall composed index.\n\n    The user may choose to specify either the query config objects directly,\n    or as a list of JSON dictionaries. For instance, the following are equivalent:\n\n    .. code-block:: python\n\n        # using JSON dictionaries\n        query_configs = [\n            {\n                \"index_struct_type\": \"tree\",\n                \"query_mode\": \"default\",\n                \"query_kwargs\": {\n                    \"child_branch_factor\": 2\n                }\n            },\n            ...\n        ]\n        response = index.query(\n            \"<query_str>\", mode=\"recursive\", query_configs=query_configs\n        )\n\n    .. code-block:: python\n\n        query_configs = [\n            QueryConfig(\n                index_struct_type=IndexStructType.TREE,\n                query_mode=QueryMode.DEFAULT,\n                query_kwargs={\n                    \"child_branch_factor\": 2\n                }\n            )\n            ...\n        ]\n        response = index.query(\n            \"<query_str>\", mode=\"recursive\", query_configs=query_configs\n        )\n\n\n    Args:\n        index_struct_type (IndexStructType): The type of index struct.\n        query_mode (QueryMode): The query mode.\n        query_kwargs (Dict[str, Any], optional): The query kwargs. Defaults to {}.\n\n    \"\"\"\n\n    # index_struct_type: IndexStructType\n    index_struct_type: str\n    query_mode: QueryMode\n    query_kwargs: Dict[str, Any] = field(default_factory=dict)\n", "doc_id": "d7ed8486721f6f32f5c8ed69fbdce569a77b5ed0", "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/schema.py", "file_name": "schema.py"}, "__type__": "Document"}, "d3fe541a-27c4-4264-b074-0475cceb13a5": {"text": "\nThis code file provides a schema for configuring queries in the GPT index. It includes an enum of 8 query modes (default, retrieve, embedding, summarize, simple, rake, recursive, and sql) and a dataclass for query configs. The query configs include an index struct type, a query mode, and query kwargs. The query configs can be specified as either a list of query config objects or a list of JSON dictionaries. The purpose of this code is to allow users to specify the query mode and kwargs for each individual subindex within a composed index, allowing for more precise and efficient query processing.", "doc_id": "d3fe541a-27c4-4264-b074-0475cceb13a5", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Query Configuration Schema.\n\nThis schema is used under the hood for all queries, but is primarily\nexposed for recursive queries over composable indices.\n\n\"\"\"\n\nfrom dataclasses import dataclass, field\nfrom enum import Enum\nfrom typing import Any, Dict\n\nfrom dataclasses_json import DataClassJsonMixin\n\n\nclass QueryMode(str, Enum):\n    \"\"\"Query mode enum.\n\n    Can be passed as the enum struct, or as the underlying string.\n\n    Attributes:\n        DEFAULT (\"default\"): Default query mode.\n        RETRIEVE (\"retrieve\"): Retrieve mode.\n        EMBEDDING (\"embedding\"): Embedding mode.\n        SUMMARIZE (\"summarize\"): Summarize mode. Used for hierarchical\n            summarization in the tree index.\n        SIMPLE (\"simple\"): Simple mode. Used for keyword extraction.\n        RAKE (\"rake\"): RAKE mode. Used for keyword extraction.\n        RECURSIVE (\"recursive\"): Recursive mode. Used to recursively query\n            over composed indices.\n\n    \"\"\"\n\n    DEFAULT =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/schema.py", "file_name": "schema.py"}, "index": 0, "child_indices": [], "ref_doc_id": "d7ed8486721f6f32f5c8ed69fbdce569a77b5ed0", "node_info": null}, "1": {"text": "  over composed indices.\n\n    \"\"\"\n\n    DEFAULT = \"default\"\n    # a special \"retrieve\" query for tree index that retrieves that top nodes\n    RETRIEVE = \"retrieve\"\n    # embedding-based query\n    EMBEDDING = \"embedding\"\n\n    # to hierarchically summarize using tree\n    SUMMARIZE = \"summarize\"\n\n    # for keyword extractor\n    SIMPLE = \"simple\"\n    RAKE = \"rake\"\n\n    # recursive queries (composable queries)\n    # NOTE: deprecated\n    RECURSIVE = \"recursive\"\n\n    # for sql queries\n    SQL = \"sql\"\n\n\n@dataclass\nclass QueryConfig(DataClassJsonMixin):\n    \"\"\"Query config.\n\n    Used under the hood for all queries.\n    The user must explicitly specify a list of query config objects is passed during\n    a query call to define configurations for each individual subindex within an\n    overall composed index.\n\n    The user may choose to specify either the query config objects directly,\n    or as a list of JSON dictionaries. For instance, the following are equivalent:\n\n    .. code-block:: python\n\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/schema.py", "file_name": "schema.py"}, "index": 1, "child_indices": [], "ref_doc_id": "d7ed8486721f6f32f5c8ed69fbdce569a77b5ed0", "node_info": null}, "2": {"text": "   .. code-block:: python\n\n        # using JSON dictionaries\n        query_configs = [\n            {\n                \"index_struct_type\": \"tree\",\n                \"query_mode\": \"default\",\n                \"query_kwargs\": {\n                    \"child_branch_factor\": 2\n                }\n            },\n            ...\n        ]\n        response = index.query(\n            \"<query_str>\", mode=\"recursive\", query_configs=query_configs\n        )\n\n    .. code-block:: python\n\n        query_configs = [\n            QueryConfig(\n                index_struct_type=IndexStructType.TREE,\n               ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/schema.py", "file_name": "schema.py"}, "index": 2, "child_indices": [], "ref_doc_id": "d7ed8486721f6f32f5c8ed69fbdce569a77b5ed0", "node_info": null}, "3": {"text": "               query_mode=QueryMode.DEFAULT,\n                query_kwargs={\n                    \"child_branch_factor\": 2\n                }\n            )\n            ...\n        ]\n        response = index.query(\n            \"<query_str>\", mode=\"recursive\", query_configs=query_configs\n        )\n\n\n    Args:\n        index_struct_type (IndexStructType): The type of index struct.\n        query_mode (QueryMode): The query mode.\n        query_kwargs (Dict[str, Any], optional): The query kwargs. Defaults to {}.\n\n    \"\"\"\n\n    # index_struct_type: IndexStructType\n    index_struct_type: str\n    query_mode: QueryMode\n    query_kwargs: Dict[str, Any] = field(default_factory=dict)\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/schema.py", "file_name": "schema.py"}, "index": 3, "child_indices": [], "ref_doc_id": "d7ed8486721f6f32f5c8ed69fbdce569a77b5ed0", "node_info": null}, "4": {"text": "This code file contains a schema for query configuration used for all queries in the GPT index. It includes an enum of query modes, a dataclass for query configs, and a dataclass-json mixin for serializing and deserializing query configs. The query modes include default, retrieve, embedding, summarize, simple, rake, recursive, and sql. The query configs include an index struct type, a query mode, and query kwargs. The query configs can be specified as either a list of query config objects or a list of JSON dictionaries.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"4": {"text": "This code file contains a schema for query configuration used for all queries in the GPT index. It includes an enum of query modes, a dataclass for query configs, and a dataclass-json mixin for serializing and deserializing query configs. The query modes include default, retrieve, embedding, summarize, simple, rake, recursive, and sql. The query configs include an index struct type, a query mode, and query kwargs. The query configs can be specified as either a list of query config objects or a list of JSON dictionaries.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}