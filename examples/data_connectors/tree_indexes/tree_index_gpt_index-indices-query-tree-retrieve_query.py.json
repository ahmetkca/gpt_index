{"index_struct": {"text": "\nThe GPTTreeIndexRetQuery class provides a method, _get_nodes_for_response(), which retrieves answers from the root nodes of an IndexGraph data structure. The method takes a query string and an optional SimilarityTracker object as arguments and returns a list of Node objects. The get_sorted_node_list() function is used to sort the root nodes of the IndexGraph and the get_text_from_nodes() function is used to generate the text for the Node objects. The purpose of the code is to provide a way to quickly and accurately retrieve answers from the root nodes of an IndexGraph data structure.", "doc_id": "bd7af4f9-6544-4577-8e9d-2b84a01f6d5a", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Retrieve query.\"\"\"\nimport logging\nfrom typing import List, Optional\n\nfrom gpt_index.data_structs.data_structs import IndexGraph, Node\nfrom gpt_index.indices.query.base import BaseGPTIndexQuery\nfrom gpt_index.indices.query.embedding_utils import SimilarityTracker\nfrom gpt_index.indices.utils import get_sorted_node_list\n\n\nclass GPTTreeIndexRetQuery(BaseGPTIndexQuery[IndexGraph]):\n    \"\"\"GPT Tree Index retrieve query.\n\n    This class directly retrieves the answer from the root nodes.\n\n    Unlike GPTTreeIndexLeafQuery, this class assumes the graph already stores\n    the answer (because it was constructed with a query_str), so it does not\n    attempt to parse information down the graph in order to synthesize an answer.\n\n    .. code-block:: python\n\n        response = index.query(\"<query_str>\", mode=\"retrieve\")\n\n    Args:\n        text_qa_template (Optional[QuestionAnswerPrompt]): Question-Answer Prompt\n            (see :ref:`Prompt-Templates`).\n\n    \"\"\"\n\n    def _get_nodes_for_response(\n        self,\n  ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/tree/retrieve_query.py", "file_name": "retrieve_query.py"}, "index": 0, "child_indices": [], "ref_doc_id": "71b67e07dcb1494c785428d1ecd9d9d6ca5f168a", "node_info": null}, "1": {"text": "       self,\n        query_str: str,\n        similarity_tracker: Optional[SimilarityTracker] = None,\n    ) -> List[Node]:\n        \"\"\"Get nodes for response.\"\"\"\n        logging.info(f\"> Starting query: {query_str}\")\n        node_list = get_sorted_node_list(self.index_struct.root_nodes)\n        text_qa_template = self.text_qa_template.partial_format(query_str=query_str)\n        node_text = self._prompt_helper.get_text_from_nodes(\n            node_list, prompt=text_qa_template\n        )\n        return [Node(text=node_text)]\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/tree/retrieve_query.py", "file_name": "retrieve_query.py"}, "index": 1, "child_indices": [], "ref_doc_id": "71b67e07dcb1494c785428d1ecd9d9d6ca5f168a", "node_info": null}, "2": {"text": "retrieve_query.py is a Python file that implements the GPTTreeIndexRetQuery class, which is used to retrieve answers from the root nodes of an IndexGraph data structure. The class provides a method, _get_nodes_for_response(), which takes a query string and an optional SimilarityTracker object as arguments and returns a list of Node objects. The method uses the get_sorted_node_list() function to sort the root nodes of the IndexGraph and the get_text_from_nodes() function to generate the text for the Node objects.", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"2": {"text": "retrieve_query.py is a Python file that implements the GPTTreeIndexRetQuery class, which is used to retrieve answers from the root nodes of an IndexGraph data structure. The class provides a method, _get_nodes_for_response(), which takes a query string and an optional SimilarityTracker object as arguments and returns a list of Node objects. The method uses the get_sorted_node_list() function to sort the root nodes of the IndexGraph and the get_text_from_nodes() function to generate the text for the Node objects.", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"71b67e07dcb1494c785428d1ecd9d9d6ca5f168a": {"text": "\"\"\"Retrieve query.\"\"\"\nimport logging\nfrom typing import List, Optional\n\nfrom gpt_index.data_structs.data_structs import IndexGraph, Node\nfrom gpt_index.indices.query.base import BaseGPTIndexQuery\nfrom gpt_index.indices.query.embedding_utils import SimilarityTracker\nfrom gpt_index.indices.utils import get_sorted_node_list\n\n\nclass GPTTreeIndexRetQuery(BaseGPTIndexQuery[IndexGraph]):\n    \"\"\"GPT Tree Index retrieve query.\n\n    This class directly retrieves the answer from the root nodes.\n\n    Unlike GPTTreeIndexLeafQuery, this class assumes the graph already stores\n    the answer (because it was constructed with a query_str), so it does not\n    attempt to parse information down the graph in order to synthesize an answer.\n\n    .. code-block:: python\n\n        response = index.query(\"<query_str>\", mode=\"retrieve\")\n\n    Args:\n        text_qa_template (Optional[QuestionAnswerPrompt]): Question-Answer Prompt\n            (see :ref:`Prompt-Templates`).\n\n    \"\"\"\n\n    def _get_nodes_for_response(\n        self,\n        query_str: str,\n        similarity_tracker: Optional[SimilarityTracker] = None,\n    ) -> List[Node]:\n        \"\"\"Get nodes for response.\"\"\"\n        logging.info(f\"> Starting query: {query_str}\")\n        node_list = get_sorted_node_list(self.index_struct.root_nodes)\n        text_qa_template = self.text_qa_template.partial_format(query_str=query_str)\n        node_text = self._prompt_helper.get_text_from_nodes(\n            node_list, prompt=text_qa_template\n        )\n        return [Node(text=node_text)]\n", "doc_id": "71b67e07dcb1494c785428d1ecd9d9d6ca5f168a", "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/tree/retrieve_query.py", "file_name": "retrieve_query.py"}, "__type__": "Document"}, "bd7af4f9-6544-4577-8e9d-2b84a01f6d5a": {"text": "\nThe GPTTreeIndexRetQuery class provides a method, _get_nodes_for_response(), which retrieves answers from the root nodes of an IndexGraph data structure. The method takes a query string and an optional SimilarityTracker object as arguments and returns a list of Node objects. The get_sorted_node_list() function is used to sort the root nodes of the IndexGraph and the get_text_from_nodes() function is used to generate the text for the Node objects. The purpose of the code is to provide a way to quickly and accurately retrieve answers from the root nodes of an IndexGraph data structure.", "doc_id": "bd7af4f9-6544-4577-8e9d-2b84a01f6d5a", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Retrieve query.\"\"\"\nimport logging\nfrom typing import List, Optional\n\nfrom gpt_index.data_structs.data_structs import IndexGraph, Node\nfrom gpt_index.indices.query.base import BaseGPTIndexQuery\nfrom gpt_index.indices.query.embedding_utils import SimilarityTracker\nfrom gpt_index.indices.utils import get_sorted_node_list\n\n\nclass GPTTreeIndexRetQuery(BaseGPTIndexQuery[IndexGraph]):\n    \"\"\"GPT Tree Index retrieve query.\n\n    This class directly retrieves the answer from the root nodes.\n\n    Unlike GPTTreeIndexLeafQuery, this class assumes the graph already stores\n    the answer (because it was constructed with a query_str), so it does not\n    attempt to parse information down the graph in order to synthesize an answer.\n\n    .. code-block:: python\n\n        response = index.query(\"<query_str>\", mode=\"retrieve\")\n\n    Args:\n        text_qa_template (Optional[QuestionAnswerPrompt]): Question-Answer Prompt\n            (see :ref:`Prompt-Templates`).\n\n    \"\"\"\n\n    def _get_nodes_for_response(\n        self,\n  ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/tree/retrieve_query.py", "file_name": "retrieve_query.py"}, "index": 0, "child_indices": [], "ref_doc_id": "71b67e07dcb1494c785428d1ecd9d9d6ca5f168a", "node_info": null}, "1": {"text": "       self,\n        query_str: str,\n        similarity_tracker: Optional[SimilarityTracker] = None,\n    ) -> List[Node]:\n        \"\"\"Get nodes for response.\"\"\"\n        logging.info(f\"> Starting query: {query_str}\")\n        node_list = get_sorted_node_list(self.index_struct.root_nodes)\n        text_qa_template = self.text_qa_template.partial_format(query_str=query_str)\n        node_text = self._prompt_helper.get_text_from_nodes(\n            node_list, prompt=text_qa_template\n        )\n        return [Node(text=node_text)]\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/tree/retrieve_query.py", "file_name": "retrieve_query.py"}, "index": 1, "child_indices": [], "ref_doc_id": "71b67e07dcb1494c785428d1ecd9d9d6ca5f168a", "node_info": null}, "2": {"text": "retrieve_query.py is a Python file that implements the GPTTreeIndexRetQuery class, which is used to retrieve answers from the root nodes of an IndexGraph data structure. The class provides a method, _get_nodes_for_response(), which takes a query string and an optional SimilarityTracker object as arguments and returns a list of Node objects. The method uses the get_sorted_node_list() function to sort the root nodes of the IndexGraph and the get_text_from_nodes() function to generate the text for the Node objects.", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"2": {"text": "retrieve_query.py is a Python file that implements the GPTTreeIndexRetQuery class, which is used to retrieve answers from the root nodes of an IndexGraph data structure. The class provides a method, _get_nodes_for_response(), which takes a query string and an optional SimilarityTracker object as arguments and returns a list of Node objects. The method uses the get_sorted_node_list() function to sort the root nodes of the IndexGraph and the get_text_from_nodes() function to generate the text for the Node objects.", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}