{"index_struct": {"text": "\nThe GPTTreeIndexSummarizeQuery class is a code file that builds a query-specific tree from leaf nodes to return a response. It takes an IndexGraph object, a query string, and an optional SimilarityTracker object as parameters. The IndexGraph object is used to store the nodes of the tree, and the query string is used to search for relevant nodes. The SimilarityTracker object is used to track the similarity between the query string and the nodes in the tree. The get_sorted_node_list() function is used to sort the nodes in the IndexGraph and return them as a list. The purpose of this code is to provide a way to summarize a query using a tree index. This code file utilizes data structures such as trees and graphs, as well as algorithms such as sorting and searching, to efficiently and accurately summarize a query.", "doc_id": "8e872fbd-83d3-4fe6-abe0-c49e467ffe1f", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Summarize query.\"\"\"\n\nimport logging\nfrom typing import Any, List, Optional, cast\n\nfrom gpt_index.data_structs.data_structs import IndexGraph, Node\nfrom gpt_index.indices.query.base import BaseGPTIndexQuery\nfrom gpt_index.indices.query.embedding_utils import SimilarityTracker\nfrom gpt_index.indices.response.builder import ResponseMode\nfrom gpt_index.indices.utils import get_sorted_node_list\n\n\nclass GPTTreeIndexSummarizeQuery(BaseGPTIndexQuery[IndexGraph]):\n    \"\"\"GPT Tree Index summarize query.\n\n    This class builds a query-specific tree from leaf nodes to return a response.\n    Using this query mode means that the tree index doesn't need to be built\n    when initialized, since we rebuild the tree for each query.\n\n    .. code-block:: python\n\n        response = index.query(\"<query_str>\", mode=\"summarize\")\n\n    Args:\n        text_qa_template (Optional[QuestionAnswerPrompt]): Question-Answer Prompt\n            (see :ref:`Prompt-Templates`).\n\n    \"\"\"\n\n    def __init__(\n        self,\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/tree/summarize_query.py", "file_name": "summarize_query.py"}, "index": 0, "child_indices": [], "ref_doc_id": "46f8def5a3bd788e7448ee6c0ec10c1522f2a425", "node_info": null}, "1": {"text": "       self,\n        index_struct: IndexGraph,\n        num_children: int = 10,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Initialize params.\"\"\"\n        if \"response_mode\" in kwargs:\n            raise ValueError(\n                \"response_mode should not be specified for summarize query\"\n            )\n        response_kwargs = kwargs.pop(\"response_kwargs\", {})\n        response_kwargs.update(num_children=num_children)\n        super().__init__(\n            index_struct,\n            response_mode=ResponseMode.TREE_SUMMARIZE,\n            response_kwargs=response_kwargs,\n            **kwargs,\n        )\n\n    def _get_nodes_for_response(\n        self,\n        query_str:", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/tree/summarize_query.py", "file_name": "summarize_query.py"}, "index": 1, "child_indices": [], "ref_doc_id": "46f8def5a3bd788e7448ee6c0ec10c1522f2a425", "node_info": null}, "2": {"text": "      self,\n        query_str: str,\n        similarity_tracker: Optional[SimilarityTracker] = None,\n    ) -> List[Node]:\n        \"\"\"Get nodes for response.\"\"\"\n        logging.info(f\"> Starting query: {query_str}\")\n        index_struct = cast(IndexGraph, self._index_struct)\n        sorted_node_list = get_sorted_node_list(index_struct.all_nodes)\n        return sorted_node_list\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/tree/summarize_query.py", "file_name": "summarize_query.py"}, "index": 2, "child_indices": [], "ref_doc_id": "46f8def5a3bd788e7448ee6c0ec10c1522f2a425", "node_info": null}, "3": {"text": "summarize_query.py is a Python file that contains the GPTTreeIndexSummarizeQuery class. This class builds a query-specific tree from leaf nodes to return a response. It takes an IndexGraph object, a query string, and an optional SimilarityTracker object as parameters. It then uses the get_sorted_node_list() function to sort the nodes in the IndexGraph and return them as a list. The purpose of this code is to provide a way to summarize a query using a tree index.", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"3": {"text": "summarize_query.py is a Python file that contains the GPTTreeIndexSummarizeQuery class. This class builds a query-specific tree from leaf nodes to return a response. It takes an IndexGraph object, a query string, and an optional SimilarityTracker object as parameters. It then uses the get_sorted_node_list() function to sort the nodes in the IndexGraph and return them as a list. The purpose of this code is to provide a way to summarize a query using a tree index.", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"46f8def5a3bd788e7448ee6c0ec10c1522f2a425": {"text": "\"\"\"Summarize query.\"\"\"\n\nimport logging\nfrom typing import Any, List, Optional, cast\n\nfrom gpt_index.data_structs.data_structs import IndexGraph, Node\nfrom gpt_index.indices.query.base import BaseGPTIndexQuery\nfrom gpt_index.indices.query.embedding_utils import SimilarityTracker\nfrom gpt_index.indices.response.builder import ResponseMode\nfrom gpt_index.indices.utils import get_sorted_node_list\n\n\nclass GPTTreeIndexSummarizeQuery(BaseGPTIndexQuery[IndexGraph]):\n    \"\"\"GPT Tree Index summarize query.\n\n    This class builds a query-specific tree from leaf nodes to return a response.\n    Using this query mode means that the tree index doesn't need to be built\n    when initialized, since we rebuild the tree for each query.\n\n    .. code-block:: python\n\n        response = index.query(\"<query_str>\", mode=\"summarize\")\n\n    Args:\n        text_qa_template (Optional[QuestionAnswerPrompt]): Question-Answer Prompt\n            (see :ref:`Prompt-Templates`).\n\n    \"\"\"\n\n    def __init__(\n        self,\n        index_struct: IndexGraph,\n        num_children: int = 10,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Initialize params.\"\"\"\n        if \"response_mode\" in kwargs:\n            raise ValueError(\n                \"response_mode should not be specified for summarize query\"\n            )\n        response_kwargs = kwargs.pop(\"response_kwargs\", {})\n        response_kwargs.update(num_children=num_children)\n        super().__init__(\n            index_struct,\n            response_mode=ResponseMode.TREE_SUMMARIZE,\n            response_kwargs=response_kwargs,\n            **kwargs,\n        )\n\n    def _get_nodes_for_response(\n        self,\n        query_str: str,\n        similarity_tracker: Optional[SimilarityTracker] = None,\n    ) -> List[Node]:\n        \"\"\"Get nodes for response.\"\"\"\n        logging.info(f\"> Starting query: {query_str}\")\n        index_struct = cast(IndexGraph, self._index_struct)\n        sorted_node_list = get_sorted_node_list(index_struct.all_nodes)\n        return sorted_node_list\n", "doc_id": "46f8def5a3bd788e7448ee6c0ec10c1522f2a425", "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/tree/summarize_query.py", "file_name": "summarize_query.py"}, "__type__": "Document"}, "8e872fbd-83d3-4fe6-abe0-c49e467ffe1f": {"text": "\nThe GPTTreeIndexSummarizeQuery class is a code file that builds a query-specific tree from leaf nodes to return a response. It takes an IndexGraph object, a query string, and an optional SimilarityTracker object as parameters. The IndexGraph object is used to store the nodes of the tree, and the query string is used to search for relevant nodes. The SimilarityTracker object is used to track the similarity between the query string and the nodes in the tree. The get_sorted_node_list() function is used to sort the nodes in the IndexGraph and return them as a list. The purpose of this code is to provide a way to summarize a query using a tree index. This code file utilizes data structures such as trees and graphs, as well as algorithms such as sorting and searching, to efficiently and accurately summarize a query.", "doc_id": "8e872fbd-83d3-4fe6-abe0-c49e467ffe1f", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Summarize query.\"\"\"\n\nimport logging\nfrom typing import Any, List, Optional, cast\n\nfrom gpt_index.data_structs.data_structs import IndexGraph, Node\nfrom gpt_index.indices.query.base import BaseGPTIndexQuery\nfrom gpt_index.indices.query.embedding_utils import SimilarityTracker\nfrom gpt_index.indices.response.builder import ResponseMode\nfrom gpt_index.indices.utils import get_sorted_node_list\n\n\nclass GPTTreeIndexSummarizeQuery(BaseGPTIndexQuery[IndexGraph]):\n    \"\"\"GPT Tree Index summarize query.\n\n    This class builds a query-specific tree from leaf nodes to return a response.\n    Using this query mode means that the tree index doesn't need to be built\n    when initialized, since we rebuild the tree for each query.\n\n    .. code-block:: python\n\n        response = index.query(\"<query_str>\", mode=\"summarize\")\n\n    Args:\n        text_qa_template (Optional[QuestionAnswerPrompt]): Question-Answer Prompt\n            (see :ref:`Prompt-Templates`).\n\n    \"\"\"\n\n    def __init__(\n        self,\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/tree/summarize_query.py", "file_name": "summarize_query.py"}, "index": 0, "child_indices": [], "ref_doc_id": "46f8def5a3bd788e7448ee6c0ec10c1522f2a425", "node_info": null}, "1": {"text": "       self,\n        index_struct: IndexGraph,\n        num_children: int = 10,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Initialize params.\"\"\"\n        if \"response_mode\" in kwargs:\n            raise ValueError(\n                \"response_mode should not be specified for summarize query\"\n            )\n        response_kwargs = kwargs.pop(\"response_kwargs\", {})\n        response_kwargs.update(num_children=num_children)\n        super().__init__(\n            index_struct,\n            response_mode=ResponseMode.TREE_SUMMARIZE,\n            response_kwargs=response_kwargs,\n            **kwargs,\n        )\n\n    def _get_nodes_for_response(\n        self,\n        query_str:", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/tree/summarize_query.py", "file_name": "summarize_query.py"}, "index": 1, "child_indices": [], "ref_doc_id": "46f8def5a3bd788e7448ee6c0ec10c1522f2a425", "node_info": null}, "2": {"text": "      self,\n        query_str: str,\n        similarity_tracker: Optional[SimilarityTracker] = None,\n    ) -> List[Node]:\n        \"\"\"Get nodes for response.\"\"\"\n        logging.info(f\"> Starting query: {query_str}\")\n        index_struct = cast(IndexGraph, self._index_struct)\n        sorted_node_list = get_sorted_node_list(index_struct.all_nodes)\n        return sorted_node_list\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/tree/summarize_query.py", "file_name": "summarize_query.py"}, "index": 2, "child_indices": [], "ref_doc_id": "46f8def5a3bd788e7448ee6c0ec10c1522f2a425", "node_info": null}, "3": {"text": "summarize_query.py is a Python file that contains the GPTTreeIndexSummarizeQuery class. This class builds a query-specific tree from leaf nodes to return a response. It takes an IndexGraph object, a query string, and an optional SimilarityTracker object as parameters. It then uses the get_sorted_node_list() function to sort the nodes in the IndexGraph and return them as a list. The purpose of this code is to provide a way to summarize a query using a tree index.", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"3": {"text": "summarize_query.py is a Python file that contains the GPTTreeIndexSummarizeQuery class. This class builds a query-specific tree from leaf nodes to return a response. It takes an IndexGraph object, a query string, and an optional SimilarityTracker object as parameters. It then uses the get_sorted_node_list() function to sort the nodes in the IndexGraph and return them as a list. The purpose of this code is to provide a way to summarize a query using a tree index.", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}