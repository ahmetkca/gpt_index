{"index_struct": {"text": "\nBase.py is a code file that contains the BaseGPTVectorStoreIndexQuery class, which is used to query a vector store index. This class is a subclass of the BaseGPTIndexQuery class and is generic, using the TypeVar \"BID\" to bound the IndexStruct. It takes in an index_struct, an optional embed_model, and an optional similarity_top_k parameter. It also takes in any additional keyword arguments. The purpose of this class is to provide a way to search for similar items in the index by initializing parameters for a vector store query. It allows users to search for items in the index based on their similarity to a given item. The class uses data structures and algorithms to compare items in the index and return the most similar items.", "doc_id": "d76eeda8-2479-4915-afbc-cb5ddd04c6b6", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Base vector store index query.\"\"\"\n\n\nfrom typing import Any, Generic, Optional, TypeVar\n\nfrom gpt_index.data_structs.data_structs import IndexStruct\nfrom gpt_index.embeddings.base import BaseEmbedding\nfrom gpt_index.indices.query.base import BaseGPTIndexQuery\n\nBID = TypeVar(\"BID\", bound=IndexStruct)\n\n\nclass BaseGPTVectorStoreIndexQuery(BaseGPTIndexQuery[BID], Generic[BID]):\n    \"\"\"Base vector store query.\"\"\"\n\n    def __init__(\n        self,\n        index_struct: BID,\n        embed_model: Optional[BaseEmbedding] = None,\n        similarity_top_k: Optional[int] = 1,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Initialize params.\"\"\"\n        super().__init__(index_struct=index_struct, embed_model=embed_model, **kwargs)\n        self.similarity_top_k = similarity_top_k\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/base.py", "file_name": "base.py"}, "index": 0, "child_indices": [], "ref_doc_id": "c99a92ca905368d8cf79d8d42bfe270fa9e76733", "node_info": null}, "1": {"text": "Base.py is a file that contains the BaseGPTVectorStoreIndexQuery class, which is a subclass of the BaseGPTIndexQuery class. This class is used to initialize parameters for a vector store query. It takes in an index_struct, an optional embed_model, and an optional similarity_top_k parameter. It also takes in any additional keyword arguments. The class is generic and uses the TypeVar \"BID\" to bound the IndexStruct.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 1, "child_indices": [0], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"1": {"text": "Base.py is a file that contains the BaseGPTVectorStoreIndexQuery class, which is a subclass of the BaseGPTIndexQuery class. This class is used to initialize parameters for a vector store query. It takes in an index_struct, an optional embed_model, and an optional similarity_top_k parameter. It also takes in any additional keyword arguments. The class is generic and uses the TypeVar \"BID\" to bound the IndexStruct.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 1, "child_indices": [0], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"c99a92ca905368d8cf79d8d42bfe270fa9e76733": {"text": "\"\"\"Base vector store index query.\"\"\"\n\n\nfrom typing import Any, Generic, Optional, TypeVar\n\nfrom gpt_index.data_structs.data_structs import IndexStruct\nfrom gpt_index.embeddings.base import BaseEmbedding\nfrom gpt_index.indices.query.base import BaseGPTIndexQuery\n\nBID = TypeVar(\"BID\", bound=IndexStruct)\n\n\nclass BaseGPTVectorStoreIndexQuery(BaseGPTIndexQuery[BID], Generic[BID]):\n    \"\"\"Base vector store query.\"\"\"\n\n    def __init__(\n        self,\n        index_struct: BID,\n        embed_model: Optional[BaseEmbedding] = None,\n        similarity_top_k: Optional[int] = 1,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Initialize params.\"\"\"\n        super().__init__(index_struct=index_struct, embed_model=embed_model, **kwargs)\n        self.similarity_top_k = similarity_top_k\n", "doc_id": "c99a92ca905368d8cf79d8d42bfe270fa9e76733", "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/base.py", "file_name": "base.py"}, "__type__": "Document"}, "d76eeda8-2479-4915-afbc-cb5ddd04c6b6": {"text": "\nBase.py is a code file that contains the BaseGPTVectorStoreIndexQuery class, which is used to query a vector store index. This class is a subclass of the BaseGPTIndexQuery class and is generic, using the TypeVar \"BID\" to bound the IndexStruct. It takes in an index_struct, an optional embed_model, and an optional similarity_top_k parameter. It also takes in any additional keyword arguments. The purpose of this class is to provide a way to search for similar items in the index by initializing parameters for a vector store query. It allows users to search for items in the index based on their similarity to a given item. The class uses data structures and algorithms to compare items in the index and return the most similar items.", "doc_id": "d76eeda8-2479-4915-afbc-cb5ddd04c6b6", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Base vector store index query.\"\"\"\n\n\nfrom typing import Any, Generic, Optional, TypeVar\n\nfrom gpt_index.data_structs.data_structs import IndexStruct\nfrom gpt_index.embeddings.base import BaseEmbedding\nfrom gpt_index.indices.query.base import BaseGPTIndexQuery\n\nBID = TypeVar(\"BID\", bound=IndexStruct)\n\n\nclass BaseGPTVectorStoreIndexQuery(BaseGPTIndexQuery[BID], Generic[BID]):\n    \"\"\"Base vector store query.\"\"\"\n\n    def __init__(\n        self,\n        index_struct: BID,\n        embed_model: Optional[BaseEmbedding] = None,\n        similarity_top_k: Optional[int] = 1,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Initialize params.\"\"\"\n        super().__init__(index_struct=index_struct, embed_model=embed_model, **kwargs)\n        self.similarity_top_k = similarity_top_k\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/base.py", "file_name": "base.py"}, "index": 0, "child_indices": [], "ref_doc_id": "c99a92ca905368d8cf79d8d42bfe270fa9e76733", "node_info": null}, "1": {"text": "Base.py is a file that contains the BaseGPTVectorStoreIndexQuery class, which is a subclass of the BaseGPTIndexQuery class. This class is used to initialize parameters for a vector store query. It takes in an index_struct, an optional embed_model, and an optional similarity_top_k parameter. It also takes in any additional keyword arguments. The class is generic and uses the TypeVar \"BID\" to bound the IndexStruct.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 1, "child_indices": [0], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"1": {"text": "Base.py is a file that contains the BaseGPTVectorStoreIndexQuery class, which is a subclass of the BaseGPTIndexQuery class. This class is used to initialize parameters for a vector store query. It takes in an index_struct, an optional embed_model, and an optional similarity_top_k parameter. It also takes in any additional keyword arguments. The class is generic and uses the TypeVar \"BID\" to bound the IndexStruct.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 1, "child_indices": [0], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}