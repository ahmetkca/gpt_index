{"index_struct": {"text": "\nThe GPTQdrantIndexQuery code file provides an efficient way to query a Qdrant index and retrieve the most relevant nodes. It implements an embedding-based query which uses the BaseEmbedding model to get the query embedding and the SimilarityTracker to track the similarity score of each node. The code file contains a class GPTQdrantIndexQuery which initializes the parameters and a method _get_nodes_for_response which retrieves the nodes from the Qdrant index and returns a list of nodes with their corresponding similarity scores. The purpose of this code is to provide an efficient way to query the Qdrant index and retrieve the most relevant nodes.", "doc_id": "057c3278-36bb-4bca-8ba1-e2cefd4b6765", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Qdrant vector store index query.\"\"\"\nimport logging\nfrom typing import Any, List, Optional, cast\n\nfrom gpt_index.data_structs import Node, QdrantIndexStruct\nfrom gpt_index.embeddings.base import BaseEmbedding\nfrom gpt_index.indices.query.embedding_utils import SimilarityTracker\nfrom gpt_index.indices.query.vector_store.base import BaseGPTVectorStoreIndexQuery\nfrom gpt_index.indices.utils import truncate_text\n\n\nclass GPTQdrantIndexQuery(BaseGPTVectorStoreIndexQuery[QdrantIndexStruct]):\n    \"\"\"GPTQdrantIndex query.\n\n    An embedding-based query for GPTQdrantIndex, which queries\n    an undelrying Qdrant index to retrieve top-k nodes by\n    embedding similarity to the query.\n\n    .. code-block:: python\n\n        response = index.query(\"<query_str>\", mode=\"default\")\n\n    Args:\n        text_qa_template (Optional[QuestionAnswerPrompt]): Question-Answer Prompt\n            (see :ref:`Prompt-Templates`).\n        refine_template (Optional[RefinePrompt]): Refinement Prompt\n      ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/qdrant.py", "file_name": "qdrant.py"}, "index": 0, "child_indices": [], "ref_doc_id": "666d66f5854bdfaa296829a9de353eddb6f46e69", "node_info": null}, "1": {"text": "(Optional[RefinePrompt]): Refinement Prompt\n            (see :ref:`Prompt-Templates`).\n        embed_model (Optional[BaseEmbedding]): Embedding model to use for\n            embedding similarity.\n        similarity_top_k (int): Number of similar nodes to retrieve.\n        client (Optional[Any]): QdrantClient instance from `qdrant-client` package\n\n    \"\"\"\n\n    def __init__(\n        self,\n        index_struct: QdrantIndexStruct,\n        embed_model: Optional[BaseEmbedding] = None,\n        similarity_top_k: int = 1,\n        client: Optional[Any] = None,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Initialize params.\"\"\"\n        super().__init__(\n            index_struct=index_struct,\n            embed_model=embed_model,\n           ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/qdrant.py", "file_name": "qdrant.py"}, "index": 1, "child_indices": [], "ref_doc_id": "666d66f5854bdfaa296829a9de353eddb6f46e69", "node_info": null}, "2": {"text": "embed_model=embed_model,\n            similarity_top_k=similarity_top_k,\n            **kwargs,\n        )\n\n        import_err_msg = (\n            \"`qdrant-client` package not found, please run `pip install qdrant-client`\"\n        )\n        try:\n            import qdrant_client  # noqa: F401\n        except ImportError:\n            raise ValueError(import_err_msg)\n\n        if client is None:\n            raise ValueError(\"client cannot be None.\")\n\n        self._client = cast(qdrant_client.QdrantClient, client)\n\n    def _get_nodes_for_response(\n        self,\n        query_str: str,\n        similarity_tracker: Optional[SimilarityTracker] = None,\n    ) -> List[Node]:\n        \"\"\"Get nodes for response.\"\"\"\n  ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/qdrant.py", "file_name": "qdrant.py"}, "index": 2, "child_indices": [], "ref_doc_id": "666d66f5854bdfaa296829a9de353eddb6f46e69", "node_info": null}, "3": {"text": "       \"\"\"Get nodes for response.\"\"\"\n        from qdrant_client.http.models.models import Payload\n\n        query_embedding = self._embed_model.get_query_embedding(query_str)\n\n        response = self._client.search(\n            collection_name=self.index_struct.get_collection_name(),\n            query_vector=query_embedding,\n            limit=cast(int, self.similarity_top_k),\n        )\n\n        logging.debug(f\"> Top {len(response)} nodes:\")\n\n        nodes = []\n        for point in response:\n            payload = cast(Payload, point.payload)\n            node = Node(\n                doc_id=payload.get(\"doc_id\"),\n                text=payload.get(\"text\"),\n            )\n           ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/qdrant.py", "file_name": "qdrant.py"}, "index": 3, "child_indices": [], "ref_doc_id": "666d66f5854bdfaa296829a9de353eddb6f46e69", "node_info": null}, "4": {"text": "       )\n            nodes.append(node)\n\n            if similarity_tracker is not None:\n                similarity_tracker.add(node, point.score)\n\n            logging.debug(\n                f\"> [Node {point.id}] [Similarity score: {point.score:.6}] \"\n                f\"{truncate_text(str(payload.get('text')), 100)}\"\n            )\n\n        return nodes\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/qdrant.py", "file_name": "qdrant.py"}, "index": 4, "child_indices": [], "ref_doc_id": "666d66f5854bdfaa296829a9de353eddb6f46e69", "node_info": null}, "5": {"text": "Qdrant vector store index query is a Python code file that implements an embedding-based query for GPTQdrantIndex. It queries an underlying Qdrant index to retrieve top-k nodes by embedding similarity to the query. It requires the qdrant-client package to be installed and a QdrantClient instance to be passed in. It uses the BaseEmbedding model to get the query embedding and the SimilarityTracker to track the similarity score of each node. It then returns a list of nodes with their corresponding similarity scores.", "doc_id": null, "embedding": null, "extra_info": null, "index": 5, "child_indices": [0, 1, 2, 3, 4], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"5": {"text": "Qdrant vector store index query is a Python code file that implements an embedding-based query for GPTQdrantIndex. It queries an underlying Qdrant index to retrieve top-k nodes by embedding similarity to the query. It requires the qdrant-client package to be installed and a QdrantClient instance to be passed in. It uses the BaseEmbedding model to get the query embedding and the SimilarityTracker to track the similarity score of each node. It then returns a list of nodes with their corresponding similarity scores.", "doc_id": null, "embedding": null, "extra_info": null, "index": 5, "child_indices": [0, 1, 2, 3, 4], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"666d66f5854bdfaa296829a9de353eddb6f46e69": {"text": "\"\"\"Qdrant vector store index query.\"\"\"\nimport logging\nfrom typing import Any, List, Optional, cast\n\nfrom gpt_index.data_structs import Node, QdrantIndexStruct\nfrom gpt_index.embeddings.base import BaseEmbedding\nfrom gpt_index.indices.query.embedding_utils import SimilarityTracker\nfrom gpt_index.indices.query.vector_store.base import BaseGPTVectorStoreIndexQuery\nfrom gpt_index.indices.utils import truncate_text\n\n\nclass GPTQdrantIndexQuery(BaseGPTVectorStoreIndexQuery[QdrantIndexStruct]):\n    \"\"\"GPTQdrantIndex query.\n\n    An embedding-based query for GPTQdrantIndex, which queries\n    an undelrying Qdrant index to retrieve top-k nodes by\n    embedding similarity to the query.\n\n    .. code-block:: python\n\n        response = index.query(\"<query_str>\", mode=\"default\")\n\n    Args:\n        text_qa_template (Optional[QuestionAnswerPrompt]): Question-Answer Prompt\n            (see :ref:`Prompt-Templates`).\n        refine_template (Optional[RefinePrompt]): Refinement Prompt\n            (see :ref:`Prompt-Templates`).\n        embed_model (Optional[BaseEmbedding]): Embedding model to use for\n            embedding similarity.\n        similarity_top_k (int): Number of similar nodes to retrieve.\n        client (Optional[Any]): QdrantClient instance from `qdrant-client` package\n\n    \"\"\"\n\n    def __init__(\n        self,\n        index_struct: QdrantIndexStruct,\n        embed_model: Optional[BaseEmbedding] = None,\n        similarity_top_k: int = 1,\n        client: Optional[Any] = None,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Initialize params.\"\"\"\n        super().__init__(\n            index_struct=index_struct,\n            embed_model=embed_model,\n            similarity_top_k=similarity_top_k,\n            **kwargs,\n        )\n\n        import_err_msg = (\n            \"`qdrant-client` package not found, please run `pip install qdrant-client`\"\n        )\n        try:\n            import qdrant_client  # noqa: F401\n        except ImportError:\n            raise ValueError(import_err_msg)\n\n        if client is None:\n            raise ValueError(\"client cannot be None.\")\n\n        self._client = cast(qdrant_client.QdrantClient, client)\n\n    def _get_nodes_for_response(\n        self,\n        query_str: str,\n        similarity_tracker: Optional[SimilarityTracker] = None,\n    ) -> List[Node]:\n        \"\"\"Get nodes for response.\"\"\"\n        from qdrant_client.http.models.models import Payload\n\n        query_embedding = self._embed_model.get_query_embedding(query_str)\n\n        response = self._client.search(\n            collection_name=self.index_struct.get_collection_name(),\n            query_vector=query_embedding,\n            limit=cast(int, self.similarity_top_k),\n        )\n\n        logging.debug(f\"> Top {len(response)} nodes:\")\n\n        nodes = []\n        for point in response:\n            payload = cast(Payload, point.payload)\n            node = Node(\n                doc_id=payload.get(\"doc_id\"),\n                text=payload.get(\"text\"),\n            )\n            nodes.append(node)\n\n            if similarity_tracker is not None:\n                similarity_tracker.add(node, point.score)\n\n            logging.debug(\n                f\"> [Node {point.id}] [Similarity score: {point.score:.6}] \"\n                f\"{truncate_text(str(payload.get('text')), 100)}\"\n            )\n\n        return nodes\n", "doc_id": "666d66f5854bdfaa296829a9de353eddb6f46e69", "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/qdrant.py", "file_name": "qdrant.py"}, "__type__": "Document"}, "057c3278-36bb-4bca-8ba1-e2cefd4b6765": {"text": "\nThe GPTQdrantIndexQuery code file provides an efficient way to query a Qdrant index and retrieve the most relevant nodes. It implements an embedding-based query which uses the BaseEmbedding model to get the query embedding and the SimilarityTracker to track the similarity score of each node. The code file contains a class GPTQdrantIndexQuery which initializes the parameters and a method _get_nodes_for_response which retrieves the nodes from the Qdrant index and returns a list of nodes with their corresponding similarity scores. The purpose of this code is to provide an efficient way to query the Qdrant index and retrieve the most relevant nodes.", "doc_id": "057c3278-36bb-4bca-8ba1-e2cefd4b6765", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Qdrant vector store index query.\"\"\"\nimport logging\nfrom typing import Any, List, Optional, cast\n\nfrom gpt_index.data_structs import Node, QdrantIndexStruct\nfrom gpt_index.embeddings.base import BaseEmbedding\nfrom gpt_index.indices.query.embedding_utils import SimilarityTracker\nfrom gpt_index.indices.query.vector_store.base import BaseGPTVectorStoreIndexQuery\nfrom gpt_index.indices.utils import truncate_text\n\n\nclass GPTQdrantIndexQuery(BaseGPTVectorStoreIndexQuery[QdrantIndexStruct]):\n    \"\"\"GPTQdrantIndex query.\n\n    An embedding-based query for GPTQdrantIndex, which queries\n    an undelrying Qdrant index to retrieve top-k nodes by\n    embedding similarity to the query.\n\n    .. code-block:: python\n\n        response = index.query(\"<query_str>\", mode=\"default\")\n\n    Args:\n        text_qa_template (Optional[QuestionAnswerPrompt]): Question-Answer Prompt\n            (see :ref:`Prompt-Templates`).\n        refine_template (Optional[RefinePrompt]): Refinement Prompt\n      ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/qdrant.py", "file_name": "qdrant.py"}, "index": 0, "child_indices": [], "ref_doc_id": "666d66f5854bdfaa296829a9de353eddb6f46e69", "node_info": null}, "1": {"text": "(Optional[RefinePrompt]): Refinement Prompt\n            (see :ref:`Prompt-Templates`).\n        embed_model (Optional[BaseEmbedding]): Embedding model to use for\n            embedding similarity.\n        similarity_top_k (int): Number of similar nodes to retrieve.\n        client (Optional[Any]): QdrantClient instance from `qdrant-client` package\n\n    \"\"\"\n\n    def __init__(\n        self,\n        index_struct: QdrantIndexStruct,\n        embed_model: Optional[BaseEmbedding] = None,\n        similarity_top_k: int = 1,\n        client: Optional[Any] = None,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Initialize params.\"\"\"\n        super().__init__(\n            index_struct=index_struct,\n            embed_model=embed_model,\n           ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/qdrant.py", "file_name": "qdrant.py"}, "index": 1, "child_indices": [], "ref_doc_id": "666d66f5854bdfaa296829a9de353eddb6f46e69", "node_info": null}, "2": {"text": "embed_model=embed_model,\n            similarity_top_k=similarity_top_k,\n            **kwargs,\n        )\n\n        import_err_msg = (\n            \"`qdrant-client` package not found, please run `pip install qdrant-client`\"\n        )\n        try:\n            import qdrant_client  # noqa: F401\n        except ImportError:\n            raise ValueError(import_err_msg)\n\n        if client is None:\n            raise ValueError(\"client cannot be None.\")\n\n        self._client = cast(qdrant_client.QdrantClient, client)\n\n    def _get_nodes_for_response(\n        self,\n        query_str: str,\n        similarity_tracker: Optional[SimilarityTracker] = None,\n    ) -> List[Node]:\n        \"\"\"Get nodes for response.\"\"\"\n  ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/qdrant.py", "file_name": "qdrant.py"}, "index": 2, "child_indices": [], "ref_doc_id": "666d66f5854bdfaa296829a9de353eddb6f46e69", "node_info": null}, "3": {"text": "       \"\"\"Get nodes for response.\"\"\"\n        from qdrant_client.http.models.models import Payload\n\n        query_embedding = self._embed_model.get_query_embedding(query_str)\n\n        response = self._client.search(\n            collection_name=self.index_struct.get_collection_name(),\n            query_vector=query_embedding,\n            limit=cast(int, self.similarity_top_k),\n        )\n\n        logging.debug(f\"> Top {len(response)} nodes:\")\n\n        nodes = []\n        for point in response:\n            payload = cast(Payload, point.payload)\n            node = Node(\n                doc_id=payload.get(\"doc_id\"),\n                text=payload.get(\"text\"),\n            )\n           ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/qdrant.py", "file_name": "qdrant.py"}, "index": 3, "child_indices": [], "ref_doc_id": "666d66f5854bdfaa296829a9de353eddb6f46e69", "node_info": null}, "4": {"text": "       )\n            nodes.append(node)\n\n            if similarity_tracker is not None:\n                similarity_tracker.add(node, point.score)\n\n            logging.debug(\n                f\"> [Node {point.id}] [Similarity score: {point.score:.6}] \"\n                f\"{truncate_text(str(payload.get('text')), 100)}\"\n            )\n\n        return nodes\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/qdrant.py", "file_name": "qdrant.py"}, "index": 4, "child_indices": [], "ref_doc_id": "666d66f5854bdfaa296829a9de353eddb6f46e69", "node_info": null}, "5": {"text": "Qdrant vector store index query is a Python code file that implements an embedding-based query for GPTQdrantIndex. It queries an underlying Qdrant index to retrieve top-k nodes by embedding similarity to the query. It requires the qdrant-client package to be installed and a QdrantClient instance to be passed in. It uses the BaseEmbedding model to get the query embedding and the SimilarityTracker to track the similarity score of each node. It then returns a list of nodes with their corresponding similarity scores.", "doc_id": null, "embedding": null, "extra_info": null, "index": 5, "child_indices": [0, 1, 2, 3, 4], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"5": {"text": "Qdrant vector store index query is a Python code file that implements an embedding-based query for GPTQdrantIndex. It queries an underlying Qdrant index to retrieve top-k nodes by embedding similarity to the query. It requires the qdrant-client package to be installed and a QdrantClient instance to be passed in. It uses the BaseEmbedding model to get the query embedding and the SimilarityTracker to track the similarity score of each node. It then returns a list of nodes with their corresponding similarity scores.", "doc_id": null, "embedding": null, "extra_info": null, "index": 5, "child_indices": [0, 1, 2, 3, 4], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}