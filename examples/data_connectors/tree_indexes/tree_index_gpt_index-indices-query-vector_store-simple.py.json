{"index_struct": {"text": "\nThe GPTSimpleVectorIndexQuery class is a query for GPTSimpleVectorIndex, a dict-based embedding store. It allows users to query the store and retrieve the top-k nodes by embedding similarity to the query. The class contains a Question-Answer Prompt, Refinement Prompt, and Embedding model to use for embedding similarity. The _get_nodes_for_response() function retrieves the top-k nodes and their similarities and logs them for debugging purposes. The query is used to quickly retrieve relevant information from the underlying store.", "doc_id": "d4a93dae-2011-4961-861c-38bdaa0b5004", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Default query for GPTSimpleVectorIndex.\"\"\"\nimport logging\nfrom typing import List, Optional\n\nfrom gpt_index.data_structs.data_structs import Node, SimpleIndexDict\nfrom gpt_index.indices.query.embedding_utils import (\n    SimilarityTracker,\n    get_top_k_embeddings,\n)\nfrom gpt_index.indices.query.vector_store.base import BaseGPTVectorStoreIndexQuery\nfrom gpt_index.indices.utils import truncate_text\n\n\nclass GPTSimpleVectorIndexQuery(BaseGPTVectorStoreIndexQuery[SimpleIndexDict]):\n    \"\"\"GPTSimpleVectorIndex query.\n\n    An embedding-based query for GPTSimpleVectorIndex, which queries\n    an underlying dict-based embedding store to retrieve top-k nodes by\n    embedding similarity to the query.\n\n    .. code-block:: python\n\n        response = index.query(\"<query_str>\", mode=\"default\")\n\n    Args:\n        text_qa_template (Optional[QuestionAnswerPrompt]): Question-Answer Prompt\n            (see :ref:`Prompt-Templates`).\n        refine_template (Optional[RefinePrompt]): Refinement Prompt\n   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/simple.py", "file_name": "simple.py"}, "index": 0, "child_indices": [], "ref_doc_id": "33f9551e7c7f50285582555c35fb754a11a4c61c", "node_info": null}, "1": {"text": "(Optional[RefinePrompt]): Refinement Prompt\n            (see :ref:`Prompt-Templates`).\n        embed_model (Optional[BaseEmbedding]): Embedding model to use for\n            embedding similarity.\n        similarity_top_k (int): Number of similar nodes to retrieve.\n\n    \"\"\"\n\n    def _get_nodes_for_response(\n        self,\n        query_str: str,\n        similarity_tracker: Optional[SimilarityTracker] = None,\n    ) -> List[Node]:\n        \"\"\"Get nodes for response.\"\"\"\n        # TODO: consolidate with get_query_text_embedding_similarities\n        query_embedding = self._embed_model.get_query_embedding(query_str)\n        items = self._index_struct.embedding_dict.items()\n        node_ids = [t[0] for t in items]\n        embeddings = [t[1] for t in items]\n\n        top_similarities, top_ids =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/simple.py", "file_name": "simple.py"}, "index": 1, "child_indices": [], "ref_doc_id": "33f9551e7c7f50285582555c35fb754a11a4c61c", "node_info": null}, "2": {"text": "in items]\n\n        top_similarities, top_ids = get_top_k_embeddings(\n            self._embed_model,\n            query_embedding,\n            embeddings,\n            similarity_top_k=self.similarity_top_k,\n            embedding_ids=node_ids,\n        )\n        top_k_nodes = self._index_struct.get_nodes(top_ids)\n        if similarity_tracker is not None:\n            for node, similarity in zip(top_k_nodes, top_similarities):\n                similarity_tracker.add(node, similarity)\n\n        if logging.getLogger(__name__).getEffectiveLevel() == logging.DEBUG:\n            fmt_txts = []\n            for node_idx, node_similarity, node in zip(\n                top_ids,", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/simple.py", "file_name": "simple.py"}, "index": 2, "child_indices": [], "ref_doc_id": "33f9551e7c7f50285582555c35fb754a11a4c61c", "node_info": null}, "3": {"text": "               top_ids, top_similarities, top_k_nodes\n            ):\n                fmt_txt = f\"> [Node {node_idx}] [Similarity score: \\\n                    {node_similarity:.6}] {truncate_text(node.get_text(), 100)}\"\n                fmt_txts.append(fmt_txt)\n            top_k_node_text = \"\\n\".join(fmt_txts)\n            logging.debug(f\"> Top {len(top_k_nodes)} nodes:\\n{top_k_node_text}\")\n\n        return top_k_nodes\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/simple.py", "file_name": "simple.py"}, "index": 3, "child_indices": [], "ref_doc_id": "33f9551e7c7f50285582555c35fb754a11a4c61c", "node_info": null}, "4": {"text": "This code file contains the GPTSimpleVectorIndexQuery class, which is an embedding-based query for GPTSimpleVectorIndex. It queries an underlying dict-based embedding store to retrieve top-k nodes by embedding similarity to the query. It also contains a _get_nodes_for_response() function which retrieves the top-k nodes and their similarities and logs them for debugging purposes.", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"4": {"text": "This code file contains the GPTSimpleVectorIndexQuery class, which is an embedding-based query for GPTSimpleVectorIndex. It queries an underlying dict-based embedding store to retrieve top-k nodes by embedding similarity to the query. It also contains a _get_nodes_for_response() function which retrieves the top-k nodes and their similarities and logs them for debugging purposes.", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"33f9551e7c7f50285582555c35fb754a11a4c61c": {"text": "\"\"\"Default query for GPTSimpleVectorIndex.\"\"\"\nimport logging\nfrom typing import List, Optional\n\nfrom gpt_index.data_structs.data_structs import Node, SimpleIndexDict\nfrom gpt_index.indices.query.embedding_utils import (\n    SimilarityTracker,\n    get_top_k_embeddings,\n)\nfrom gpt_index.indices.query.vector_store.base import BaseGPTVectorStoreIndexQuery\nfrom gpt_index.indices.utils import truncate_text\n\n\nclass GPTSimpleVectorIndexQuery(BaseGPTVectorStoreIndexQuery[SimpleIndexDict]):\n    \"\"\"GPTSimpleVectorIndex query.\n\n    An embedding-based query for GPTSimpleVectorIndex, which queries\n    an underlying dict-based embedding store to retrieve top-k nodes by\n    embedding similarity to the query.\n\n    .. code-block:: python\n\n        response = index.query(\"<query_str>\", mode=\"default\")\n\n    Args:\n        text_qa_template (Optional[QuestionAnswerPrompt]): Question-Answer Prompt\n            (see :ref:`Prompt-Templates`).\n        refine_template (Optional[RefinePrompt]): Refinement Prompt\n            (see :ref:`Prompt-Templates`).\n        embed_model (Optional[BaseEmbedding]): Embedding model to use for\n            embedding similarity.\n        similarity_top_k (int): Number of similar nodes to retrieve.\n\n    \"\"\"\n\n    def _get_nodes_for_response(\n        self,\n        query_str: str,\n        similarity_tracker: Optional[SimilarityTracker] = None,\n    ) -> List[Node]:\n        \"\"\"Get nodes for response.\"\"\"\n        # TODO: consolidate with get_query_text_embedding_similarities\n        query_embedding = self._embed_model.get_query_embedding(query_str)\n        items = self._index_struct.embedding_dict.items()\n        node_ids = [t[0] for t in items]\n        embeddings = [t[1] for t in items]\n\n        top_similarities, top_ids = get_top_k_embeddings(\n            self._embed_model,\n            query_embedding,\n            embeddings,\n            similarity_top_k=self.similarity_top_k,\n            embedding_ids=node_ids,\n        )\n        top_k_nodes = self._index_struct.get_nodes(top_ids)\n        if similarity_tracker is not None:\n            for node, similarity in zip(top_k_nodes, top_similarities):\n                similarity_tracker.add(node, similarity)\n\n        if logging.getLogger(__name__).getEffectiveLevel() == logging.DEBUG:\n            fmt_txts = []\n            for node_idx, node_similarity, node in zip(\n                top_ids, top_similarities, top_k_nodes\n            ):\n                fmt_txt = f\"> [Node {node_idx}] [Similarity score: \\\n                    {node_similarity:.6}] {truncate_text(node.get_text(), 100)}\"\n                fmt_txts.append(fmt_txt)\n            top_k_node_text = \"\\n\".join(fmt_txts)\n            logging.debug(f\"> Top {len(top_k_nodes)} nodes:\\n{top_k_node_text}\")\n\n        return top_k_nodes\n", "doc_id": "33f9551e7c7f50285582555c35fb754a11a4c61c", "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/simple.py", "file_name": "simple.py"}, "__type__": "Document"}, "d4a93dae-2011-4961-861c-38bdaa0b5004": {"text": "\nThe GPTSimpleVectorIndexQuery class is a query for GPTSimpleVectorIndex, a dict-based embedding store. It allows users to query the store and retrieve the top-k nodes by embedding similarity to the query. The class contains a Question-Answer Prompt, Refinement Prompt, and Embedding model to use for embedding similarity. The _get_nodes_for_response() function retrieves the top-k nodes and their similarities and logs them for debugging purposes. The query is used to quickly retrieve relevant information from the underlying store.", "doc_id": "d4a93dae-2011-4961-861c-38bdaa0b5004", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Default query for GPTSimpleVectorIndex.\"\"\"\nimport logging\nfrom typing import List, Optional\n\nfrom gpt_index.data_structs.data_structs import Node, SimpleIndexDict\nfrom gpt_index.indices.query.embedding_utils import (\n    SimilarityTracker,\n    get_top_k_embeddings,\n)\nfrom gpt_index.indices.query.vector_store.base import BaseGPTVectorStoreIndexQuery\nfrom gpt_index.indices.utils import truncate_text\n\n\nclass GPTSimpleVectorIndexQuery(BaseGPTVectorStoreIndexQuery[SimpleIndexDict]):\n    \"\"\"GPTSimpleVectorIndex query.\n\n    An embedding-based query for GPTSimpleVectorIndex, which queries\n    an underlying dict-based embedding store to retrieve top-k nodes by\n    embedding similarity to the query.\n\n    .. code-block:: python\n\n        response = index.query(\"<query_str>\", mode=\"default\")\n\n    Args:\n        text_qa_template (Optional[QuestionAnswerPrompt]): Question-Answer Prompt\n            (see :ref:`Prompt-Templates`).\n        refine_template (Optional[RefinePrompt]): Refinement Prompt\n   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/simple.py", "file_name": "simple.py"}, "index": 0, "child_indices": [], "ref_doc_id": "33f9551e7c7f50285582555c35fb754a11a4c61c", "node_info": null}, "1": {"text": "(Optional[RefinePrompt]): Refinement Prompt\n            (see :ref:`Prompt-Templates`).\n        embed_model (Optional[BaseEmbedding]): Embedding model to use for\n            embedding similarity.\n        similarity_top_k (int): Number of similar nodes to retrieve.\n\n    \"\"\"\n\n    def _get_nodes_for_response(\n        self,\n        query_str: str,\n        similarity_tracker: Optional[SimilarityTracker] = None,\n    ) -> List[Node]:\n        \"\"\"Get nodes for response.\"\"\"\n        # TODO: consolidate with get_query_text_embedding_similarities\n        query_embedding = self._embed_model.get_query_embedding(query_str)\n        items = self._index_struct.embedding_dict.items()\n        node_ids = [t[0] for t in items]\n        embeddings = [t[1] for t in items]\n\n        top_similarities, top_ids =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/simple.py", "file_name": "simple.py"}, "index": 1, "child_indices": [], "ref_doc_id": "33f9551e7c7f50285582555c35fb754a11a4c61c", "node_info": null}, "2": {"text": "in items]\n\n        top_similarities, top_ids = get_top_k_embeddings(\n            self._embed_model,\n            query_embedding,\n            embeddings,\n            similarity_top_k=self.similarity_top_k,\n            embedding_ids=node_ids,\n        )\n        top_k_nodes = self._index_struct.get_nodes(top_ids)\n        if similarity_tracker is not None:\n            for node, similarity in zip(top_k_nodes, top_similarities):\n                similarity_tracker.add(node, similarity)\n\n        if logging.getLogger(__name__).getEffectiveLevel() == logging.DEBUG:\n            fmt_txts = []\n            for node_idx, node_similarity, node in zip(\n                top_ids,", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/simple.py", "file_name": "simple.py"}, "index": 2, "child_indices": [], "ref_doc_id": "33f9551e7c7f50285582555c35fb754a11a4c61c", "node_info": null}, "3": {"text": "               top_ids, top_similarities, top_k_nodes\n            ):\n                fmt_txt = f\"> [Node {node_idx}] [Similarity score: \\\n                    {node_similarity:.6}] {truncate_text(node.get_text(), 100)}\"\n                fmt_txts.append(fmt_txt)\n            top_k_node_text = \"\\n\".join(fmt_txts)\n            logging.debug(f\"> Top {len(top_k_nodes)} nodes:\\n{top_k_node_text}\")\n\n        return top_k_nodes\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/simple.py", "file_name": "simple.py"}, "index": 3, "child_indices": [], "ref_doc_id": "33f9551e7c7f50285582555c35fb754a11a4c61c", "node_info": null}, "4": {"text": "This code file contains the GPTSimpleVectorIndexQuery class, which is an embedding-based query for GPTSimpleVectorIndex. It queries an underlying dict-based embedding store to retrieve top-k nodes by embedding similarity to the query. It also contains a _get_nodes_for_response() function which retrieves the top-k nodes and their similarities and logs them for debugging purposes.", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"4": {"text": "This code file contains the GPTSimpleVectorIndexQuery class, which is an embedding-based query for GPTSimpleVectorIndex. It queries an underlying dict-based embedding store to retrieve top-k nodes by embedding similarity to the query. It also contains a _get_nodes_for_response() function which retrieves the top-k nodes and their similarities and logs them for debugging purposes.", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}