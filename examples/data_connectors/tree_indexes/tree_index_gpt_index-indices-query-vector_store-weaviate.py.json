{"index_struct": {"text": "\nThe GPTWeaviateIndexQuery class is a code file that provides a way to query a vector store index. It initializes parameters such as the index structure, embedding model, and similarity top k, and then uses the weaviate client to get nodes for the response. It also has a logging feature to debug the top k nodes. The purpose of this code is to allow users to query a vector store index and to debug the results of the query. The code file contains functions, classes, and variables that are used to set up the query, retrieve the nodes, and debug the results. The algorithms used are the index structure, embedding model, and similarity top k. The data structures used are the weaviate client and the logging feature.", "doc_id": "ce6fe2e9-9d73-43d1-9a5c-ba45e748b321", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Weaviate vector store index query.\"\"\"\n\n\nimport logging\nfrom typing import Any, List, Optional, cast\n\nfrom gpt_index.data_structs.data_structs import Node, WeaviateIndexStruct\nfrom gpt_index.embeddings.base import BaseEmbedding\nfrom gpt_index.indices.query.base import BaseGPTIndexQuery\nfrom gpt_index.indices.query.embedding_utils import SimilarityTracker\nfrom gpt_index.indices.utils import truncate_text\nfrom gpt_index.readers.weaviate.data_structs import WeaviateNode\n\n\nclass GPTWeaviateIndexQuery(BaseGPTIndexQuery[WeaviateIndexStruct]):\n    \"\"\"Base vector store query.\"\"\"\n\n    def __init__(\n        self,\n        index_struct: WeaviateIndexStruct,\n        embed_model: Optional[BaseEmbedding] = None,\n        similarity_top_k: Optional[int] = 1,\n        weaviate_client: Optional[Any] = None,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Initialize params.\"\"\"\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/weaviate.py", "file_name": "weaviate.py"}, "index": 0, "child_indices": [], "ref_doc_id": "c74c84559cd6f32007980215425c5cdaeb0843b8", "node_info": null}, "1": {"text": "      \"\"\"Initialize params.\"\"\"\n        super().__init__(index_struct=index_struct, embed_model=embed_model, **kwargs)\n        self.similarity_top_k = similarity_top_k\n        import_err_msg = (\n            \"`weaviate` package not found, please run `pip install weaviate-client`\"\n        )\n        try:\n            import weaviate  # noqa: F401\n            from weaviate import Client  # noqa: F401\n        except ImportError:\n            raise ValueError(import_err_msg)\n        self.client = cast(Client, weaviate_client)\n\n    def _get_nodes_for_response(\n        self,\n        query_str: str,\n        similarity_tracker: Optional[SimilarityTracker] = None,\n    ) -> List[Node]:\n        \"\"\"Get nodes for response.\"\"\"\n        query_embedding", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/weaviate.py", "file_name": "weaviate.py"}, "index": 1, "child_indices": [], "ref_doc_id": "c74c84559cd6f32007980215425c5cdaeb0843b8", "node_info": null}, "2": {"text": "\"\"\"Get nodes for response.\"\"\"\n        query_embedding = self._embed_model.get_query_embedding(query_str)\n        nodes = WeaviateNode.to_gpt_index_list(\n            self.client,\n            self._index_struct.get_class_prefix(),\n            vector=query_embedding,\n            object_limit=self.similarity_top_k,\n        )\n        nodes = nodes[: self.similarity_top_k]\n        node_idxs = [str(i) for i in range(len(nodes))]\n\n        if logging.getLogger(__name__).getEffectiveLevel() == logging.DEBUG:\n            fmt_txts = []\n            for node_idx, node in zip(node_idxs, nodes):\n                fmt_txt = f\"> [Node {node_idx}] {truncate_text(node.get_text(), 100)}\"\n     ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/weaviate.py", "file_name": "weaviate.py"}, "index": 2, "child_indices": [], "ref_doc_id": "c74c84559cd6f32007980215425c5cdaeb0843b8", "node_info": null}, "3": {"text": "100)}\"\n                fmt_txts.append(fmt_txt)\n            top_k_node_text = \"\\n\".join(fmt_txts)\n            logging.debug(f\"> Top {len(nodes)} nodes:\\n{top_k_node_text}\")\n        return nodes\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/weaviate.py", "file_name": "weaviate.py"}, "index": 3, "child_indices": [], "ref_doc_id": "c74c84559cd6f32007980215425c5cdaeb0843b8", "node_info": null}, "4": {"text": "This code file is for the GPTWeaviateIndexQuery class, which is used to query a vector store index. It initializes parameters, such as the index structure, embedding model, and similarity top k, and then uses the weaviate client to get nodes for the response. It also has a logging feature to debug the top k nodes.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"4": {"text": "This code file is for the GPTWeaviateIndexQuery class, which is used to query a vector store index. It initializes parameters, such as the index structure, embedding model, and similarity top k, and then uses the weaviate client to get nodes for the response. It also has a logging feature to debug the top k nodes.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"c74c84559cd6f32007980215425c5cdaeb0843b8": {"text": "\"\"\"Weaviate vector store index query.\"\"\"\n\n\nimport logging\nfrom typing import Any, List, Optional, cast\n\nfrom gpt_index.data_structs.data_structs import Node, WeaviateIndexStruct\nfrom gpt_index.embeddings.base import BaseEmbedding\nfrom gpt_index.indices.query.base import BaseGPTIndexQuery\nfrom gpt_index.indices.query.embedding_utils import SimilarityTracker\nfrom gpt_index.indices.utils import truncate_text\nfrom gpt_index.readers.weaviate.data_structs import WeaviateNode\n\n\nclass GPTWeaviateIndexQuery(BaseGPTIndexQuery[WeaviateIndexStruct]):\n    \"\"\"Base vector store query.\"\"\"\n\n    def __init__(\n        self,\n        index_struct: WeaviateIndexStruct,\n        embed_model: Optional[BaseEmbedding] = None,\n        similarity_top_k: Optional[int] = 1,\n        weaviate_client: Optional[Any] = None,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Initialize params.\"\"\"\n        super().__init__(index_struct=index_struct, embed_model=embed_model, **kwargs)\n        self.similarity_top_k = similarity_top_k\n        import_err_msg = (\n            \"`weaviate` package not found, please run `pip install weaviate-client`\"\n        )\n        try:\n            import weaviate  # noqa: F401\n            from weaviate import Client  # noqa: F401\n        except ImportError:\n            raise ValueError(import_err_msg)\n        self.client = cast(Client, weaviate_client)\n\n    def _get_nodes_for_response(\n        self,\n        query_str: str,\n        similarity_tracker: Optional[SimilarityTracker] = None,\n    ) -> List[Node]:\n        \"\"\"Get nodes for response.\"\"\"\n        query_embedding = self._embed_model.get_query_embedding(query_str)\n        nodes = WeaviateNode.to_gpt_index_list(\n            self.client,\n            self._index_struct.get_class_prefix(),\n            vector=query_embedding,\n            object_limit=self.similarity_top_k,\n        )\n        nodes = nodes[: self.similarity_top_k]\n        node_idxs = [str(i) for i in range(len(nodes))]\n\n        if logging.getLogger(__name__).getEffectiveLevel() == logging.DEBUG:\n            fmt_txts = []\n            for node_idx, node in zip(node_idxs, nodes):\n                fmt_txt = f\"> [Node {node_idx}] {truncate_text(node.get_text(), 100)}\"\n                fmt_txts.append(fmt_txt)\n            top_k_node_text = \"\\n\".join(fmt_txts)\n            logging.debug(f\"> Top {len(nodes)} nodes:\\n{top_k_node_text}\")\n        return nodes\n", "doc_id": "c74c84559cd6f32007980215425c5cdaeb0843b8", "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/weaviate.py", "file_name": "weaviate.py"}, "__type__": "Document"}, "ce6fe2e9-9d73-43d1-9a5c-ba45e748b321": {"text": "\nThe GPTWeaviateIndexQuery class is a code file that provides a way to query a vector store index. It initializes parameters such as the index structure, embedding model, and similarity top k, and then uses the weaviate client to get nodes for the response. It also has a logging feature to debug the top k nodes. The purpose of this code is to allow users to query a vector store index and to debug the results of the query. The code file contains functions, classes, and variables that are used to set up the query, retrieve the nodes, and debug the results. The algorithms used are the index structure, embedding model, and similarity top k. The data structures used are the weaviate client and the logging feature.", "doc_id": "ce6fe2e9-9d73-43d1-9a5c-ba45e748b321", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Weaviate vector store index query.\"\"\"\n\n\nimport logging\nfrom typing import Any, List, Optional, cast\n\nfrom gpt_index.data_structs.data_structs import Node, WeaviateIndexStruct\nfrom gpt_index.embeddings.base import BaseEmbedding\nfrom gpt_index.indices.query.base import BaseGPTIndexQuery\nfrom gpt_index.indices.query.embedding_utils import SimilarityTracker\nfrom gpt_index.indices.utils import truncate_text\nfrom gpt_index.readers.weaviate.data_structs import WeaviateNode\n\n\nclass GPTWeaviateIndexQuery(BaseGPTIndexQuery[WeaviateIndexStruct]):\n    \"\"\"Base vector store query.\"\"\"\n\n    def __init__(\n        self,\n        index_struct: WeaviateIndexStruct,\n        embed_model: Optional[BaseEmbedding] = None,\n        similarity_top_k: Optional[int] = 1,\n        weaviate_client: Optional[Any] = None,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Initialize params.\"\"\"\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/weaviate.py", "file_name": "weaviate.py"}, "index": 0, "child_indices": [], "ref_doc_id": "c74c84559cd6f32007980215425c5cdaeb0843b8", "node_info": null}, "1": {"text": "      \"\"\"Initialize params.\"\"\"\n        super().__init__(index_struct=index_struct, embed_model=embed_model, **kwargs)\n        self.similarity_top_k = similarity_top_k\n        import_err_msg = (\n            \"`weaviate` package not found, please run `pip install weaviate-client`\"\n        )\n        try:\n            import weaviate  # noqa: F401\n            from weaviate import Client  # noqa: F401\n        except ImportError:\n            raise ValueError(import_err_msg)\n        self.client = cast(Client, weaviate_client)\n\n    def _get_nodes_for_response(\n        self,\n        query_str: str,\n        similarity_tracker: Optional[SimilarityTracker] = None,\n    ) -> List[Node]:\n        \"\"\"Get nodes for response.\"\"\"\n        query_embedding", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/weaviate.py", "file_name": "weaviate.py"}, "index": 1, "child_indices": [], "ref_doc_id": "c74c84559cd6f32007980215425c5cdaeb0843b8", "node_info": null}, "2": {"text": "\"\"\"Get nodes for response.\"\"\"\n        query_embedding = self._embed_model.get_query_embedding(query_str)\n        nodes = WeaviateNode.to_gpt_index_list(\n            self.client,\n            self._index_struct.get_class_prefix(),\n            vector=query_embedding,\n            object_limit=self.similarity_top_k,\n        )\n        nodes = nodes[: self.similarity_top_k]\n        node_idxs = [str(i) for i in range(len(nodes))]\n\n        if logging.getLogger(__name__).getEffectiveLevel() == logging.DEBUG:\n            fmt_txts = []\n            for node_idx, node in zip(node_idxs, nodes):\n                fmt_txt = f\"> [Node {node_idx}] {truncate_text(node.get_text(), 100)}\"\n     ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/weaviate.py", "file_name": "weaviate.py"}, "index": 2, "child_indices": [], "ref_doc_id": "c74c84559cd6f32007980215425c5cdaeb0843b8", "node_info": null}, "3": {"text": "100)}\"\n                fmt_txts.append(fmt_txt)\n            top_k_node_text = \"\\n\".join(fmt_txts)\n            logging.debug(f\"> Top {len(nodes)} nodes:\\n{top_k_node_text}\")\n        return nodes\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/query/vector_store/weaviate.py", "file_name": "weaviate.py"}, "index": 3, "child_indices": [], "ref_doc_id": "c74c84559cd6f32007980215425c5cdaeb0843b8", "node_info": null}, "4": {"text": "This code file is for the GPTWeaviateIndexQuery class, which is used to query a vector store index. It initializes parameters, such as the index structure, embedding model, and similarity top k, and then uses the weaviate client to get nodes for the response. It also has a logging feature to debug the top k nodes.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"4": {"text": "This code file is for the GPTWeaviateIndexQuery class, which is used to query a vector store index. It initializes parameters, such as the index structure, embedding model, and similarity top k, and then uses the weaviate client to get nodes for the response. It also has a logging feature to debug the top k nodes.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}