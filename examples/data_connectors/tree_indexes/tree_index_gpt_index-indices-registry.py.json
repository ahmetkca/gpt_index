{"index_struct": {"text": "\nThe registry.py file is part of the GPT-Index library and provides a way to store and manage different index types and their associated data structures and queries. It contains a dataclass, IndexRegistry, which stores a mapping from index type to index_struct and queries, as well as a mapping from mode to query class. The update() method allows users to update the registry with another registry, allowing them to easily manage and organize the different index types and their associated data structures and queries. This code file provides a way to store and access the appropriate query for a given index type, allowing users to easily manage and organize their data.", "doc_id": "ea26ec59-b10e-40ca-a572-7fcc6aa26ffe", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Index registry.\"\"\"\n\nfrom dataclasses import dataclass, field\nfrom typing import Dict, Type\n\nfrom gpt_index.data_structs.data_structs import IndexStruct\nfrom gpt_index.indices.query.base import BaseGPTIndexQuery\n\n# map from mode to query class\nQUERY_MAP_TYPE = Dict[str, Type[BaseGPTIndexQuery]]\n\n\n@dataclass\nclass IndexRegistry:\n    \"\"\"Index registry.\n\n    Stores mapping from index type to index_struct + queries.\n    NOTE: this cannot be easily serialized, so must be re-initialized\n    each time.\n    If the user defines custom IndexStruct or query classes,\n    they must be added to the registry manually.\n\n    \"\"\"\n\n    type_to_struct: Dict[str, Type[IndexStruct]] = field(default_factory=dict)\n    type_to_query: Dict[str, QUERY_MAP_TYPE] = field(default_factory=dict)\n\n    def update(self, other: \"IndexRegistry\") -> None:\n        \"\"\"Update the registry with another registry.\"\"\"\n        self.type_to_struct.update(other.type_to_struct)\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/registry.py", "file_name": "registry.py"}, "index": 0, "child_indices": [], "ref_doc_id": "4d36a4f799b01b46bb1527a5b95f7186cc3554b6", "node_info": null}, "1": {"text": "       self.type_to_query.update(other.type_to_query)\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/registry.py", "file_name": "registry.py"}, "index": 1, "child_indices": [], "ref_doc_id": "4d36a4f799b01b46bb1527a5b95f7186cc3554b6", "node_info": null}, "2": {"text": "The registry.py file is part of the GPT-Index library and provides a registry for index types and their associated data structures and queries. It contains a dataclass, IndexRegistry, which stores a mapping from index type to index_struct and queries. It also provides a method, update(), which allows the user to update the registry with another registry. This code is useful for managing and organizing the different index types and their associated data structures and queries.", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"2": {"text": "The registry.py file is part of the GPT-Index library and provides a registry for index types and their associated data structures and queries. It contains a dataclass, IndexRegistry, which stores a mapping from index type to index_struct and queries. It also provides a method, update(), which allows the user to update the registry with another registry. This code is useful for managing and organizing the different index types and their associated data structures and queries.", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"4d36a4f799b01b46bb1527a5b95f7186cc3554b6": {"text": "\"\"\"Index registry.\"\"\"\n\nfrom dataclasses import dataclass, field\nfrom typing import Dict, Type\n\nfrom gpt_index.data_structs.data_structs import IndexStruct\nfrom gpt_index.indices.query.base import BaseGPTIndexQuery\n\n# map from mode to query class\nQUERY_MAP_TYPE = Dict[str, Type[BaseGPTIndexQuery]]\n\n\n@dataclass\nclass IndexRegistry:\n    \"\"\"Index registry.\n\n    Stores mapping from index type to index_struct + queries.\n    NOTE: this cannot be easily serialized, so must be re-initialized\n    each time.\n    If the user defines custom IndexStruct or query classes,\n    they must be added to the registry manually.\n\n    \"\"\"\n\n    type_to_struct: Dict[str, Type[IndexStruct]] = field(default_factory=dict)\n    type_to_query: Dict[str, QUERY_MAP_TYPE] = field(default_factory=dict)\n\n    def update(self, other: \"IndexRegistry\") -> None:\n        \"\"\"Update the registry with another registry.\"\"\"\n        self.type_to_struct.update(other.type_to_struct)\n        self.type_to_query.update(other.type_to_query)\n", "doc_id": "4d36a4f799b01b46bb1527a5b95f7186cc3554b6", "embedding": null, "extra_info": {"file_path": "gpt_index/indices/registry.py", "file_name": "registry.py"}, "__type__": "Document"}, "ea26ec59-b10e-40ca-a572-7fcc6aa26ffe": {"text": "\nThe registry.py file is part of the GPT-Index library and provides a way to store and manage different index types and their associated data structures and queries. It contains a dataclass, IndexRegistry, which stores a mapping from index type to index_struct and queries, as well as a mapping from mode to query class. The update() method allows users to update the registry with another registry, allowing them to easily manage and organize the different index types and their associated data structures and queries. This code file provides a way to store and access the appropriate query for a given index type, allowing users to easily manage and organize their data.", "doc_id": "ea26ec59-b10e-40ca-a572-7fcc6aa26ffe", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Index registry.\"\"\"\n\nfrom dataclasses import dataclass, field\nfrom typing import Dict, Type\n\nfrom gpt_index.data_structs.data_structs import IndexStruct\nfrom gpt_index.indices.query.base import BaseGPTIndexQuery\n\n# map from mode to query class\nQUERY_MAP_TYPE = Dict[str, Type[BaseGPTIndexQuery]]\n\n\n@dataclass\nclass IndexRegistry:\n    \"\"\"Index registry.\n\n    Stores mapping from index type to index_struct + queries.\n    NOTE: this cannot be easily serialized, so must be re-initialized\n    each time.\n    If the user defines custom IndexStruct or query classes,\n    they must be added to the registry manually.\n\n    \"\"\"\n\n    type_to_struct: Dict[str, Type[IndexStruct]] = field(default_factory=dict)\n    type_to_query: Dict[str, QUERY_MAP_TYPE] = field(default_factory=dict)\n\n    def update(self, other: \"IndexRegistry\") -> None:\n        \"\"\"Update the registry with another registry.\"\"\"\n        self.type_to_struct.update(other.type_to_struct)\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/registry.py", "file_name": "registry.py"}, "index": 0, "child_indices": [], "ref_doc_id": "4d36a4f799b01b46bb1527a5b95f7186cc3554b6", "node_info": null}, "1": {"text": "       self.type_to_query.update(other.type_to_query)\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/registry.py", "file_name": "registry.py"}, "index": 1, "child_indices": [], "ref_doc_id": "4d36a4f799b01b46bb1527a5b95f7186cc3554b6", "node_info": null}, "2": {"text": "The registry.py file is part of the GPT-Index library and provides a registry for index types and their associated data structures and queries. It contains a dataclass, IndexRegistry, which stores a mapping from index type to index_struct and queries. It also provides a method, update(), which allows the user to update the registry with another registry. This code is useful for managing and organizing the different index types and their associated data structures and queries.", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"2": {"text": "The registry.py file is part of the GPT-Index library and provides a registry for index types and their associated data structures and queries. It contains a dataclass, IndexRegistry, which stores a mapping from index type to index_struct and queries. It also provides a method, update(), which allows the user to update the registry with another registry. This code is useful for managing and organizing the different index types and their associated data structures and queries.", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}