{"index_struct": {"text": "\nThis code file contains utilities for GPT indices, which are used to process and manipulate data for tree-structured indices. It includes functions for getting a sorted list of nodes from a dictionary of nodes, extracting numbers from a GPT-generated response, expanding a set of tokens with subtokens, and truncating text to a maximum length. The get_sorted_node_list() function takes a dictionary of nodes and returns a sorted list of nodes. The extract_numbers_given_response() function takes a GPT-generated response and extracts the first n numbers from it. The expand_tokens_with_subtokens() function takes a set of tokens and returns a set of subtokens, filtering out stopwords. Finally, the truncate_text() function takes a string and a maximum length and returns a truncated version of the string. These functions are used to help process and manipulate data for tree-structured indices.", "doc_id": "cd60243d-905b-4340-9196-13bb6d58f08d", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Utilities for GPT indices.\"\"\"\nimport re\nfrom typing import Dict, List, Optional, Set\n\nfrom gpt_index.data_structs.data_structs import Node\nfrom gpt_index.utils import globals_helper\n\n\ndef get_sorted_node_list(node_dict: Dict[int, Node]) -> List[Node]:\n    \"\"\"Get sorted node list. Used by tree-strutured indices.\"\"\"\n    sorted_indices = sorted(node_dict.keys())\n    return [node_dict[index] for index in sorted_indices]\n\n\ndef extract_numbers_given_response(response: str, n: int = 1) -> Optional[List[int]]:\n    \"\"\"Extract number given the GPT-generated response.\n\n    Used by tree-structured indices.\n\n    \"\"\"\n    numbers = re.findall(r\"\\d+\", response)\n    if len(numbers) == 0:\n        return None\n    else:\n        return numbers[:n]\n\n\ndef expand_tokens_with_subtokens(tokens: Set[str]) -> Set[str]:\n    \"\"\"Get subtokens from a list of tokens., filtering for stopwords.\"\"\"\n    results = set()\n    for token in", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/utils.py", "file_name": "utils.py"}, "index": 0, "child_indices": [], "ref_doc_id": "4622a34aedaeb346c6f275d45c96bb8ae57d202b", "node_info": null}, "1": {"text": "for stopwords.\"\"\"\n    results = set()\n    for token in tokens:\n        results.add(token)\n        sub_tokens = re.findall(r\"\\w+\", token)\n        if len(sub_tokens) > 1:\n            results.update({w for w in sub_tokens if w not in globals_helper.stopwords})\n\n    return results\n\n\ndef truncate_text(text: str, max_length: int) -> str:\n    \"\"\"Truncate text to a maximum length.\"\"\"\n    return text[: max_length - 3] + \"...\"\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/utils.py", "file_name": "utils.py"}, "index": 1, "child_indices": [], "ref_doc_id": "4622a34aedaeb346c6f275d45c96bb8ae57d202b", "node_info": null}, "2": {"text": "This code file contains utilities for GPT indices. It includes functions for getting a sorted list of nodes from a dictionary of nodes, extracting numbers from a GPT-generated response, expanding a set of tokens with subtokens, and truncating text to a maximum length. These functions are used by tree-structured indices to help process and manipulate data.", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"2": {"text": "This code file contains utilities for GPT indices. It includes functions for getting a sorted list of nodes from a dictionary of nodes, extracting numbers from a GPT-generated response, expanding a set of tokens with subtokens, and truncating text to a maximum length. These functions are used by tree-structured indices to help process and manipulate data.", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"4622a34aedaeb346c6f275d45c96bb8ae57d202b": {"text": "\"\"\"Utilities for GPT indices.\"\"\"\nimport re\nfrom typing import Dict, List, Optional, Set\n\nfrom gpt_index.data_structs.data_structs import Node\nfrom gpt_index.utils import globals_helper\n\n\ndef get_sorted_node_list(node_dict: Dict[int, Node]) -> List[Node]:\n    \"\"\"Get sorted node list. Used by tree-strutured indices.\"\"\"\n    sorted_indices = sorted(node_dict.keys())\n    return [node_dict[index] for index in sorted_indices]\n\n\ndef extract_numbers_given_response(response: str, n: int = 1) -> Optional[List[int]]:\n    \"\"\"Extract number given the GPT-generated response.\n\n    Used by tree-structured indices.\n\n    \"\"\"\n    numbers = re.findall(r\"\\d+\", response)\n    if len(numbers) == 0:\n        return None\n    else:\n        return numbers[:n]\n\n\ndef expand_tokens_with_subtokens(tokens: Set[str]) -> Set[str]:\n    \"\"\"Get subtokens from a list of tokens., filtering for stopwords.\"\"\"\n    results = set()\n    for token in tokens:\n        results.add(token)\n        sub_tokens = re.findall(r\"\\w+\", token)\n        if len(sub_tokens) > 1:\n            results.update({w for w in sub_tokens if w not in globals_helper.stopwords})\n\n    return results\n\n\ndef truncate_text(text: str, max_length: int) -> str:\n    \"\"\"Truncate text to a maximum length.\"\"\"\n    return text[: max_length - 3] + \"...\"\n", "doc_id": "4622a34aedaeb346c6f275d45c96bb8ae57d202b", "embedding": null, "extra_info": {"file_path": "gpt_index/indices/utils.py", "file_name": "utils.py"}, "__type__": "Document"}, "cd60243d-905b-4340-9196-13bb6d58f08d": {"text": "\nThis code file contains utilities for GPT indices, which are used to process and manipulate data for tree-structured indices. It includes functions for getting a sorted list of nodes from a dictionary of nodes, extracting numbers from a GPT-generated response, expanding a set of tokens with subtokens, and truncating text to a maximum length. The get_sorted_node_list() function takes a dictionary of nodes and returns a sorted list of nodes. The extract_numbers_given_response() function takes a GPT-generated response and extracts the first n numbers from it. The expand_tokens_with_subtokens() function takes a set of tokens and returns a set of subtokens, filtering out stopwords. Finally, the truncate_text() function takes a string and a maximum length and returns a truncated version of the string. These functions are used to help process and manipulate data for tree-structured indices.", "doc_id": "cd60243d-905b-4340-9196-13bb6d58f08d", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Utilities for GPT indices.\"\"\"\nimport re\nfrom typing import Dict, List, Optional, Set\n\nfrom gpt_index.data_structs.data_structs import Node\nfrom gpt_index.utils import globals_helper\n\n\ndef get_sorted_node_list(node_dict: Dict[int, Node]) -> List[Node]:\n    \"\"\"Get sorted node list. Used by tree-strutured indices.\"\"\"\n    sorted_indices = sorted(node_dict.keys())\n    return [node_dict[index] for index in sorted_indices]\n\n\ndef extract_numbers_given_response(response: str, n: int = 1) -> Optional[List[int]]:\n    \"\"\"Extract number given the GPT-generated response.\n\n    Used by tree-structured indices.\n\n    \"\"\"\n    numbers = re.findall(r\"\\d+\", response)\n    if len(numbers) == 0:\n        return None\n    else:\n        return numbers[:n]\n\n\ndef expand_tokens_with_subtokens(tokens: Set[str]) -> Set[str]:\n    \"\"\"Get subtokens from a list of tokens., filtering for stopwords.\"\"\"\n    results = set()\n    for token in", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/utils.py", "file_name": "utils.py"}, "index": 0, "child_indices": [], "ref_doc_id": "4622a34aedaeb346c6f275d45c96bb8ae57d202b", "node_info": null}, "1": {"text": "for stopwords.\"\"\"\n    results = set()\n    for token in tokens:\n        results.add(token)\n        sub_tokens = re.findall(r\"\\w+\", token)\n        if len(sub_tokens) > 1:\n            results.update({w for w in sub_tokens if w not in globals_helper.stopwords})\n\n    return results\n\n\ndef truncate_text(text: str, max_length: int) -> str:\n    \"\"\"Truncate text to a maximum length.\"\"\"\n    return text[: max_length - 3] + \"...\"\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/indices/utils.py", "file_name": "utils.py"}, "index": 1, "child_indices": [], "ref_doc_id": "4622a34aedaeb346c6f275d45c96bb8ae57d202b", "node_info": null}, "2": {"text": "This code file contains utilities for GPT indices. It includes functions for getting a sorted list of nodes from a dictionary of nodes, extracting numbers from a GPT-generated response, expanding a set of tokens with subtokens, and truncating text to a maximum length. These functions are used by tree-structured indices to help process and manipulate data.", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"2": {"text": "This code file contains utilities for GPT indices. It includes functions for getting a sorted list of nodes from a dictionary of nodes, extracting numbers from a GPT-generated response, expanding a set of tokens with subtokens, and truncating text to a maximum length. These functions are used by tree-structured indices to help process and manipulate data.", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}