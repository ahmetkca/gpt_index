{"index_struct": {"text": "\nThis code file provides a SQL wrapper around the SQLDatabase class from langchain. It offers a range of helper utilities for interacting with a SQL database, such as methods for constructing a SQLAlchemy engine from a URI, getting table columns, getting table info for a single table, inserting data into a table, and running a SQL statement. It also provides a property for returning a SQL Alchemy engine. The purpose of this code is to make it easier to access and manipulate data stored in a SQL database, by providing a convenient way to interact with the SQLDatabase class from langchain.", "doc_id": "d4a0b441-490a-453a-9b94-f4bff41dca49", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"SQL wrapper around SQLDatabase in langchain.\"\"\"\nfrom typing import Any, Dict, List, Tuple\n\nfrom langchain.sql_database import SQLDatabase as LangchainSQLDatabase\nfrom sqlalchemy import MetaData, create_engine, insert\nfrom sqlalchemy.engine import Engine\n\n\nclass SQLDatabase(LangchainSQLDatabase):\n    \"\"\"SQL Database.\n\n    Wrapper around SQLDatabase object from langchain. Offers\n    some helper utilities for insertion and querying.\n    See `langchain documentation <https://tinyurl.com/4we5ku8j>`_ for more details:\n\n    Args:\n        *args: Arguments to pass to langchain SQLDatabase.\n        **kwargs: Keyword arguments to pass to langchain SQLDatabase.\n\n    \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"Init params.\"\"\"\n        super().__init__(*args, **kwargs)\n        self.metadata_obj = MetaData(bind=self._engine)\n        self.metadata_obj.reflect()\n\n    @property\n    def engine(self) -> Engine:\n        \"\"\"Return SQL Alchemy engine.\"\"\"\n        return", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/langchain_helpers/sql_wrapper.py", "file_name": "sql_wrapper.py"}, "index": 0, "child_indices": [], "ref_doc_id": "e541c393c777483dca55d898b374d77f2dd7e023", "node_info": null}, "1": {"text": "   \"\"\"Return SQL Alchemy engine.\"\"\"\n        return self._engine\n\n    @classmethod\n    def from_uri(cls, database_uri: str, **kwargs: Any) -> \"SQLDatabase\":\n        \"\"\"Construct a SQLAlchemy engine from URI.\"\"\"\n        return cls(create_engine(database_uri), **kwargs)\n\n    def get_table_columns(self, table_name: str) -> List[dict]:\n        \"\"\"Get table columns.\"\"\"\n        return self._inspector.get_columns(table_name)\n\n    def get_single_table_info(self, table_name: str) -> str:\n        \"\"\"Get table info for a single table.\"\"\"\n        # same logic as table_info, but with specific table names\n        template = \"Table '{table_name}' has columns: {columns}.\"\n        columns = []\n        for column in self._inspector.get_columns(table_name):\n            columns.append(f\"{column['name']} ({str(column['type'])})\")\n        column_str = \",", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/langchain_helpers/sql_wrapper.py", "file_name": "sql_wrapper.py"}, "index": 1, "child_indices": [], "ref_doc_id": "e541c393c777483dca55d898b374d77f2dd7e023", "node_info": null}, "2": {"text": "       column_str = \", \".join(columns)\n        table_str = template.format(table_name=table_name, columns=column_str)\n        return table_str\n\n    def insert_into_table(self, table_name: str, data: dict) -> None:\n        \"\"\"Insert data into a table.\"\"\"\n        table = self.metadata_obj.tables[table_name]\n        stmt = insert(table).values(**data)\n        self._engine.execute(stmt)\n\n    def run_sql(self, command: str) -> Tuple[str, Dict]:\n        \"\"\"Execute a SQL statement and return a string representing the results.\n\n        If the statement returns rows, a string of the results is returned.\n        If the statement returns no rows, an empty string is returned.\n        \"\"\"\n        with self._engine.connect() as connection:\n            cursor = connection.exec_driver_sql(command)\n            if cursor.returns_rows:\n              ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/langchain_helpers/sql_wrapper.py", "file_name": "sql_wrapper.py"}, "index": 2, "child_indices": [], "ref_doc_id": "e541c393c777483dca55d898b374d77f2dd7e023", "node_info": null}, "3": {"text": "               result = cursor.fetchall()\n                return str(result), {\"result\": result}\n        return \"\", {}\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/langchain_helpers/sql_wrapper.py", "file_name": "sql_wrapper.py"}, "index": 3, "child_indices": [], "ref_doc_id": "e541c393c777483dca55d898b374d77f2dd7e023", "node_info": null}, "4": {"text": "This code file is a SQL wrapper around the SQLDatabase class from langchain. It provides helper utilities for insertion and querying of data. It includes methods for constructing a SQLAlchemy engine from a URI, getting table columns, getting table info for a single table, inserting data into a table, and running a SQL statement. It also provides a property for returning a SQL Alchemy engine.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"4": {"text": "This code file is a SQL wrapper around the SQLDatabase class from langchain. It provides helper utilities for insertion and querying of data. It includes methods for constructing a SQLAlchemy engine from a URI, getting table columns, getting table info for a single table, inserting data into a table, and running a SQL statement. It also provides a property for returning a SQL Alchemy engine.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"e541c393c777483dca55d898b374d77f2dd7e023": {"text": "\"\"\"SQL wrapper around SQLDatabase in langchain.\"\"\"\nfrom typing import Any, Dict, List, Tuple\n\nfrom langchain.sql_database import SQLDatabase as LangchainSQLDatabase\nfrom sqlalchemy import MetaData, create_engine, insert\nfrom sqlalchemy.engine import Engine\n\n\nclass SQLDatabase(LangchainSQLDatabase):\n    \"\"\"SQL Database.\n\n    Wrapper around SQLDatabase object from langchain. Offers\n    some helper utilities for insertion and querying.\n    See `langchain documentation <https://tinyurl.com/4we5ku8j>`_ for more details:\n\n    Args:\n        *args: Arguments to pass to langchain SQLDatabase.\n        **kwargs: Keyword arguments to pass to langchain SQLDatabase.\n\n    \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"Init params.\"\"\"\n        super().__init__(*args, **kwargs)\n        self.metadata_obj = MetaData(bind=self._engine)\n        self.metadata_obj.reflect()\n\n    @property\n    def engine(self) -> Engine:\n        \"\"\"Return SQL Alchemy engine.\"\"\"\n        return self._engine\n\n    @classmethod\n    def from_uri(cls, database_uri: str, **kwargs: Any) -> \"SQLDatabase\":\n        \"\"\"Construct a SQLAlchemy engine from URI.\"\"\"\n        return cls(create_engine(database_uri), **kwargs)\n\n    def get_table_columns(self, table_name: str) -> List[dict]:\n        \"\"\"Get table columns.\"\"\"\n        return self._inspector.get_columns(table_name)\n\n    def get_single_table_info(self, table_name: str) -> str:\n        \"\"\"Get table info for a single table.\"\"\"\n        # same logic as table_info, but with specific table names\n        template = \"Table '{table_name}' has columns: {columns}.\"\n        columns = []\n        for column in self._inspector.get_columns(table_name):\n            columns.append(f\"{column['name']} ({str(column['type'])})\")\n        column_str = \", \".join(columns)\n        table_str = template.format(table_name=table_name, columns=column_str)\n        return table_str\n\n    def insert_into_table(self, table_name: str, data: dict) -> None:\n        \"\"\"Insert data into a table.\"\"\"\n        table = self.metadata_obj.tables[table_name]\n        stmt = insert(table).values(**data)\n        self._engine.execute(stmt)\n\n    def run_sql(self, command: str) -> Tuple[str, Dict]:\n        \"\"\"Execute a SQL statement and return a string representing the results.\n\n        If the statement returns rows, a string of the results is returned.\n        If the statement returns no rows, an empty string is returned.\n        \"\"\"\n        with self._engine.connect() as connection:\n            cursor = connection.exec_driver_sql(command)\n            if cursor.returns_rows:\n                result = cursor.fetchall()\n                return str(result), {\"result\": result}\n        return \"\", {}\n", "doc_id": "e541c393c777483dca55d898b374d77f2dd7e023", "embedding": null, "extra_info": {"file_path": "gpt_index/langchain_helpers/sql_wrapper.py", "file_name": "sql_wrapper.py"}, "__type__": "Document"}, "d4a0b441-490a-453a-9b94-f4bff41dca49": {"text": "\nThis code file provides a SQL wrapper around the SQLDatabase class from langchain. It offers a range of helper utilities for interacting with a SQL database, such as methods for constructing a SQLAlchemy engine from a URI, getting table columns, getting table info for a single table, inserting data into a table, and running a SQL statement. It also provides a property for returning a SQL Alchemy engine. The purpose of this code is to make it easier to access and manipulate data stored in a SQL database, by providing a convenient way to interact with the SQLDatabase class from langchain.", "doc_id": "d4a0b441-490a-453a-9b94-f4bff41dca49", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"SQL wrapper around SQLDatabase in langchain.\"\"\"\nfrom typing import Any, Dict, List, Tuple\n\nfrom langchain.sql_database import SQLDatabase as LangchainSQLDatabase\nfrom sqlalchemy import MetaData, create_engine, insert\nfrom sqlalchemy.engine import Engine\n\n\nclass SQLDatabase(LangchainSQLDatabase):\n    \"\"\"SQL Database.\n\n    Wrapper around SQLDatabase object from langchain. Offers\n    some helper utilities for insertion and querying.\n    See `langchain documentation <https://tinyurl.com/4we5ku8j>`_ for more details:\n\n    Args:\n        *args: Arguments to pass to langchain SQLDatabase.\n        **kwargs: Keyword arguments to pass to langchain SQLDatabase.\n\n    \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"Init params.\"\"\"\n        super().__init__(*args, **kwargs)\n        self.metadata_obj = MetaData(bind=self._engine)\n        self.metadata_obj.reflect()\n\n    @property\n    def engine(self) -> Engine:\n        \"\"\"Return SQL Alchemy engine.\"\"\"\n        return", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/langchain_helpers/sql_wrapper.py", "file_name": "sql_wrapper.py"}, "index": 0, "child_indices": [], "ref_doc_id": "e541c393c777483dca55d898b374d77f2dd7e023", "node_info": null}, "1": {"text": "   \"\"\"Return SQL Alchemy engine.\"\"\"\n        return self._engine\n\n    @classmethod\n    def from_uri(cls, database_uri: str, **kwargs: Any) -> \"SQLDatabase\":\n        \"\"\"Construct a SQLAlchemy engine from URI.\"\"\"\n        return cls(create_engine(database_uri), **kwargs)\n\n    def get_table_columns(self, table_name: str) -> List[dict]:\n        \"\"\"Get table columns.\"\"\"\n        return self._inspector.get_columns(table_name)\n\n    def get_single_table_info(self, table_name: str) -> str:\n        \"\"\"Get table info for a single table.\"\"\"\n        # same logic as table_info, but with specific table names\n        template = \"Table '{table_name}' has columns: {columns}.\"\n        columns = []\n        for column in self._inspector.get_columns(table_name):\n            columns.append(f\"{column['name']} ({str(column['type'])})\")\n        column_str = \",", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/langchain_helpers/sql_wrapper.py", "file_name": "sql_wrapper.py"}, "index": 1, "child_indices": [], "ref_doc_id": "e541c393c777483dca55d898b374d77f2dd7e023", "node_info": null}, "2": {"text": "       column_str = \", \".join(columns)\n        table_str = template.format(table_name=table_name, columns=column_str)\n        return table_str\n\n    def insert_into_table(self, table_name: str, data: dict) -> None:\n        \"\"\"Insert data into a table.\"\"\"\n        table = self.metadata_obj.tables[table_name]\n        stmt = insert(table).values(**data)\n        self._engine.execute(stmt)\n\n    def run_sql(self, command: str) -> Tuple[str, Dict]:\n        \"\"\"Execute a SQL statement and return a string representing the results.\n\n        If the statement returns rows, a string of the results is returned.\n        If the statement returns no rows, an empty string is returned.\n        \"\"\"\n        with self._engine.connect() as connection:\n            cursor = connection.exec_driver_sql(command)\n            if cursor.returns_rows:\n              ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/langchain_helpers/sql_wrapper.py", "file_name": "sql_wrapper.py"}, "index": 2, "child_indices": [], "ref_doc_id": "e541c393c777483dca55d898b374d77f2dd7e023", "node_info": null}, "3": {"text": "               result = cursor.fetchall()\n                return str(result), {\"result\": result}\n        return \"\", {}\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/langchain_helpers/sql_wrapper.py", "file_name": "sql_wrapper.py"}, "index": 3, "child_indices": [], "ref_doc_id": "e541c393c777483dca55d898b374d77f2dd7e023", "node_info": null}, "4": {"text": "This code file is a SQL wrapper around the SQLDatabase class from langchain. It provides helper utilities for insertion and querying of data. It includes methods for constructing a SQLAlchemy engine from a URI, getting table columns, getting table info for a single table, inserting data into a table, and running a SQL statement. It also provides a property for returning a SQL Alchemy engine.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"4": {"text": "This code file is a SQL wrapper around the SQLDatabase class from langchain. It provides helper utilities for insertion and querying of data. It includes methods for constructing a SQLAlchemy engine from a URI, getting table columns, getting table info for a single table, inserting data into a table, and running a SQL statement. It also provides a property for returning a SQL Alchemy engine.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}