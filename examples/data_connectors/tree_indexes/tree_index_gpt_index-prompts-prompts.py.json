{"index_struct": {"text": "\nThis code file contains a set of subclasses from the base Prompt class. These subclasses are used to generate natural language responses based on a template and a set of input variables. Each prompt type has a prompt_type attribute and a list of input variables that are required for the prompt. The purpose of this code is to provide a way to generate natural language responses from a set of input variables. The code includes algorithms and data structures to process the input variables and generate the natural language responses. The relationships between the functions, classes, and variables are used to generate the natural language responses.", "doc_id": "0d984322-1a41-40bd-a64a-4f6d969341e5", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Subclasses from base prompt.\"\"\"\nfrom typing import List\n\nfrom gpt_index.prompts.base import Prompt\nfrom gpt_index.prompts.prompt_type import PromptType\n\n\nclass SummaryPrompt(Prompt):\n    \"\"\"Summary prompt.\n\n    Prompt to summarize the provided `context_str`.\n\n    Required template variables: `context_str`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type: PromptType = PromptType.SUMMARY\n    input_variables: List[str] = [\"context_str\"]\n\n\nclass TreeInsertPrompt(Prompt):\n    \"\"\"Tree Insert prompt.\n\n    Prompt to insert a new chunk of text `new_chunk_text` into the tree index.\n    More specifically, this prompt has the LLM select the relevant candidate\n    child node to continue tree traversal.\n\n    Required template variables: `num_chunks`, `context_list`, `new_chunk_text`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/prompts/prompts.py", "file_name": "prompts.py"}, "index": 0, "child_indices": [], "ref_doc_id": "583437e9d61e15269b7b59a5121fa41dedd096c3", "node_info": null}, "1": {"text": "       **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type: PromptType = PromptType.TREE_INSERT\n    input_variables: List[str] = [\"num_chunks\", \"context_list\", \"new_chunk_text\"]\n\n\nclass TreeSelectPrompt(Prompt):\n    \"\"\"Tree select prompt.\n\n    Prompt to select a candidate child node out of all child nodes\n    provided in `context_list`, given a query `query_str`. `num_chunks` is\n    the number of child nodes in `context_list`.\n\n    Required template variables: `num_chunks`, `context_list`, `query_str`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type: PromptType = PromptType.TREE_SELECT\n    input_variables: List[str] = [\"num_chunks\", \"context_list\", \"query_str\"]\n\n\nclass TreeSelectMultiplePrompt(Prompt):\n    \"\"\"Tree select multiple prompt.\n\n    Prompt to select multiple candidate child nodes out of all\n    child nodes provided in `context_list`, given", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/prompts/prompts.py", "file_name": "prompts.py"}, "index": 1, "child_indices": [], "ref_doc_id": "583437e9d61e15269b7b59a5121fa41dedd096c3", "node_info": null}, "2": {"text": "nodes out of all\n    child nodes provided in `context_list`, given a query `query_str`.\n    `branching_factor` refers to the number of child nodes to select, and\n    `num_chunks` is the number of child nodes in `context_list`.\n\n    Required template variables: `num_chunks`, `context_list`, `query_str`,\n        `branching_factor`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type = PromptType.TREE_SELECT_MULTIPLE\n    input_variables: List[str] = [\n        \"num_chunks\",\n        \"context_list\",\n        \"query_str\",\n        \"branching_factor\",\n    ]\n\n\nclass RefinePrompt(Prompt):\n    \"\"\"Refine prompt.\n\n    Prompt to refine an existing answer `existing_answer` given a context `context_msg`,\n    and a query `query_str`.\n\n    Required template variables: `query_str`, `existing_answer`, `context_msg`\n\n  ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/prompts/prompts.py", "file_name": "prompts.py"}, "index": 2, "child_indices": [], "ref_doc_id": "583437e9d61e15269b7b59a5121fa41dedd096c3", "node_info": null}, "3": {"text": "`query_str`, `existing_answer`, `context_msg`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    # TODO: rename context_msg to context_str\n\n    prompt_type: PromptType = PromptType.REFINE\n    input_variables: List[str] = [\"query_str\", \"existing_answer\", \"context_msg\"]\n\n\nclass QuestionAnswerPrompt(Prompt):\n    \"\"\"Question Answer prompt.\n\n    Prompt to answer a question `query_str` given a context `context_str`.\n\n    Required template variables: `context_str`, `query_str`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type: PromptType = PromptType.QUESTION_ANSWER\n    input_variables: List[str] = [\"context_str\", \"query_str\"]\n\n\nclass KeywordExtractPrompt(Prompt):\n    \"\"\"Keyword extract prompt.\n\n    Prompt to extract keywords from a text `text` with a maximum of\n   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/prompts/prompts.py", "file_name": "prompts.py"}, "index": 3, "child_indices": [], "ref_doc_id": "583437e9d61e15269b7b59a5121fa41dedd096c3", "node_info": null}, "4": {"text": "to extract keywords from a text `text` with a maximum of\n    `max_keywords` keywords.\n\n    Required template variables: `text`, `max_keywords`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type: PromptType = PromptType.KEYWORD_EXTRACT\n    input_variables: List[str] = [\"text\", \"max_keywords\"]\n\n\nclass QueryKeywordExtractPrompt(Prompt):\n    \"\"\"Query keyword extract prompt.\n\n    Prompt to extract keywords from a query `query_str` with a maximum\n    of `max_keywords` keywords.\n\n    Required template variables: `query_str`, `max_keywords`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type: PromptType = PromptType.QUERY_KEYWORD_EXTRACT\n    input_variables: List[str] = [\"question\", \"max_keywords\"]\n\n\nclass SchemaExtractPrompt(Prompt):\n   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/prompts/prompts.py", "file_name": "prompts.py"}, "index": 4, "child_indices": [], "ref_doc_id": "583437e9d61e15269b7b59a5121fa41dedd096c3", "node_info": null}, "5": {"text": "SchemaExtractPrompt(Prompt):\n    \"\"\"Schema extract prompt.\n\n    Prompt to extract schema from unstructured text `text`.\n\n    Required template variables: `text`, `schema`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type: PromptType = PromptType.SCHEMA_EXTRACT\n    input_variables: List[str] = [\"text\", \"schema\"]\n\n\nclass TextToSQLPrompt(Prompt):\n    \"\"\"Text to SQL prompt.\n\n    Prompt to translate a natural language query into SQL,\n    given a schema `schema`.\n\n    Required template variables: `query_str`, `schema`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type: PromptType = PromptType.TEXT_TO_SQL\n    input_variables: List[str] = [\"query_str\", \"schema\"]\n\n\nclass TableContextPrompt(Prompt):\n    \"\"\"Table context prompt.\n\n    Prompt", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/prompts/prompts.py", "file_name": "prompts.py"}, "index": 5, "child_indices": [], "ref_doc_id": "583437e9d61e15269b7b59a5121fa41dedd096c3", "node_info": null}, "6": {"text": "   \"\"\"Table context prompt.\n\n    Prompt to generate a table context given a table schema `schema`,\n    as well as unstructured text context `context_str`, and\n    a task `query_str`.\n    This includes both a high-level description of the table\n    as well as a description of each column in the table.\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type: PromptType = PromptType.TABLE_CONTEXT\n    input_variables: List[str] = [\"schema\", \"context_str\", \"query_str\"]\n\n\nclass RefineTableContextPrompt(Prompt):\n    \"\"\"Refine Table context prompt.\n\n    Prompt to refine a table context given a table schema `schema`,\n    as well as unstructured text context `context_msg`, and\n    a task `query_str`.\n    This includes both a high-level description of the table\n    as well as a description of each column in the table.\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n  ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/prompts/prompts.py", "file_name": "prompts.py"}, "index": 6, "child_indices": [], "ref_doc_id": "583437e9d61e15269b7b59a5121fa41dedd096c3", "node_info": null}, "7": {"text": " **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    # TODO: rename context_msg to context_str\n\n    prompt_type: PromptType = PromptType.TABLE_CONTEXT\n    input_variables: List[str] = [\n        \"schema\",\n        \"context_msg\",\n        \"query_str\",\n        \"existing_answer\",\n    ]\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/prompts/prompts.py", "file_name": "prompts.py"}, "index": 7, "child_indices": [], "ref_doc_id": "583437e9d61e15269b7b59a5121fa41dedd096c3", "node_info": null}, "8": {"text": "This code file contains subclasses from the base prompt class. Each subclass is a prompt type, such as SummaryPrompt, TreeInsertPrompt, TreeSelectPrompt, TreeSelectMultiplePrompt, RefinePrompt, QuestionAnswerPrompt, KeywordExtractPrompt, QueryKeywordExtractPrompt, SchemaExtractPrompt, TextToSQLPrompt, TableContextPrompt, and RefineTableContextPrompt. Each prompt type has a prompt_type attribute and a list of input variables that are required for the prompt. The purpose of this code is to provide a set of prompts that can be used to generate natural language responses.", "doc_id": null, "embedding": null, "extra_info": null, "index": 8, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"8": {"text": "This code file contains subclasses from the base prompt class. Each subclass is a prompt type, such as SummaryPrompt, TreeInsertPrompt, TreeSelectPrompt, TreeSelectMultiplePrompt, RefinePrompt, QuestionAnswerPrompt, KeywordExtractPrompt, QueryKeywordExtractPrompt, SchemaExtractPrompt, TextToSQLPrompt, TableContextPrompt, and RefineTableContextPrompt. Each prompt type has a prompt_type attribute and a list of input variables that are required for the prompt. The purpose of this code is to provide a set of prompts that can be used to generate natural language responses.", "doc_id": null, "embedding": null, "extra_info": null, "index": 8, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"583437e9d61e15269b7b59a5121fa41dedd096c3": {"text": "\"\"\"Subclasses from base prompt.\"\"\"\nfrom typing import List\n\nfrom gpt_index.prompts.base import Prompt\nfrom gpt_index.prompts.prompt_type import PromptType\n\n\nclass SummaryPrompt(Prompt):\n    \"\"\"Summary prompt.\n\n    Prompt to summarize the provided `context_str`.\n\n    Required template variables: `context_str`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type: PromptType = PromptType.SUMMARY\n    input_variables: List[str] = [\"context_str\"]\n\n\nclass TreeInsertPrompt(Prompt):\n    \"\"\"Tree Insert prompt.\n\n    Prompt to insert a new chunk of text `new_chunk_text` into the tree index.\n    More specifically, this prompt has the LLM select the relevant candidate\n    child node to continue tree traversal.\n\n    Required template variables: `num_chunks`, `context_list`, `new_chunk_text`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type: PromptType = PromptType.TREE_INSERT\n    input_variables: List[str] = [\"num_chunks\", \"context_list\", \"new_chunk_text\"]\n\n\nclass TreeSelectPrompt(Prompt):\n    \"\"\"Tree select prompt.\n\n    Prompt to select a candidate child node out of all child nodes\n    provided in `context_list`, given a query `query_str`. `num_chunks` is\n    the number of child nodes in `context_list`.\n\n    Required template variables: `num_chunks`, `context_list`, `query_str`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type: PromptType = PromptType.TREE_SELECT\n    input_variables: List[str] = [\"num_chunks\", \"context_list\", \"query_str\"]\n\n\nclass TreeSelectMultiplePrompt(Prompt):\n    \"\"\"Tree select multiple prompt.\n\n    Prompt to select multiple candidate child nodes out of all\n    child nodes provided in `context_list`, given a query `query_str`.\n    `branching_factor` refers to the number of child nodes to select, and\n    `num_chunks` is the number of child nodes in `context_list`.\n\n    Required template variables: `num_chunks`, `context_list`, `query_str`,\n        `branching_factor`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type = PromptType.TREE_SELECT_MULTIPLE\n    input_variables: List[str] = [\n        \"num_chunks\",\n        \"context_list\",\n        \"query_str\",\n        \"branching_factor\",\n    ]\n\n\nclass RefinePrompt(Prompt):\n    \"\"\"Refine prompt.\n\n    Prompt to refine an existing answer `existing_answer` given a context `context_msg`,\n    and a query `query_str`.\n\n    Required template variables: `query_str`, `existing_answer`, `context_msg`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    # TODO: rename context_msg to context_str\n\n    prompt_type: PromptType = PromptType.REFINE\n    input_variables: List[str] = [\"query_str\", \"existing_answer\", \"context_msg\"]\n\n\nclass QuestionAnswerPrompt(Prompt):\n    \"\"\"Question Answer prompt.\n\n    Prompt to answer a question `query_str` given a context `context_str`.\n\n    Required template variables: `context_str`, `query_str`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type: PromptType = PromptType.QUESTION_ANSWER\n    input_variables: List[str] = [\"context_str\", \"query_str\"]\n\n\nclass KeywordExtractPrompt(Prompt):\n    \"\"\"Keyword extract prompt.\n\n    Prompt to extract keywords from a text `text` with a maximum of\n    `max_keywords` keywords.\n\n    Required template variables: `text`, `max_keywords`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type: PromptType = PromptType.KEYWORD_EXTRACT\n    input_variables: List[str] = [\"text\", \"max_keywords\"]\n\n\nclass QueryKeywordExtractPrompt(Prompt):\n    \"\"\"Query keyword extract prompt.\n\n    Prompt to extract keywords from a query `query_str` with a maximum\n    of `max_keywords` keywords.\n\n    Required template variables: `query_str`, `max_keywords`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type: PromptType = PromptType.QUERY_KEYWORD_EXTRACT\n    input_variables: List[str] = [\"question\", \"max_keywords\"]\n\n\nclass SchemaExtractPrompt(Prompt):\n    \"\"\"Schema extract prompt.\n\n    Prompt to extract schema from unstructured text `text`.\n\n    Required template variables: `text`, `schema`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type: PromptType = PromptType.SCHEMA_EXTRACT\n    input_variables: List[str] = [\"text\", \"schema\"]\n\n\nclass TextToSQLPrompt(Prompt):\n    \"\"\"Text to SQL prompt.\n\n    Prompt to translate a natural language query into SQL,\n    given a schema `schema`.\n\n    Required template variables: `query_str`, `schema`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type: PromptType = PromptType.TEXT_TO_SQL\n    input_variables: List[str] = [\"query_str\", \"schema\"]\n\n\nclass TableContextPrompt(Prompt):\n    \"\"\"Table context prompt.\n\n    Prompt to generate a table context given a table schema `schema`,\n    as well as unstructured text context `context_str`, and\n    a task `query_str`.\n    This includes both a high-level description of the table\n    as well as a description of each column in the table.\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type: PromptType = PromptType.TABLE_CONTEXT\n    input_variables: List[str] = [\"schema\", \"context_str\", \"query_str\"]\n\n\nclass RefineTableContextPrompt(Prompt):\n    \"\"\"Refine Table context prompt.\n\n    Prompt to refine a table context given a table schema `schema`,\n    as well as unstructured text context `context_msg`, and\n    a task `query_str`.\n    This includes both a high-level description of the table\n    as well as a description of each column in the table.\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    # TODO: rename context_msg to context_str\n\n    prompt_type: PromptType = PromptType.TABLE_CONTEXT\n    input_variables: List[str] = [\n        \"schema\",\n        \"context_msg\",\n        \"query_str\",\n        \"existing_answer\",\n    ]\n", "doc_id": "583437e9d61e15269b7b59a5121fa41dedd096c3", "embedding": null, "extra_info": {"file_path": "gpt_index/prompts/prompts.py", "file_name": "prompts.py"}, "__type__": "Document"}, "0d984322-1a41-40bd-a64a-4f6d969341e5": {"text": "\nThis code file contains a set of subclasses from the base Prompt class. These subclasses are used to generate natural language responses based on a template and a set of input variables. Each prompt type has a prompt_type attribute and a list of input variables that are required for the prompt. The purpose of this code is to provide a way to generate natural language responses from a set of input variables. The code includes algorithms and data structures to process the input variables and generate the natural language responses. The relationships between the functions, classes, and variables are used to generate the natural language responses.", "doc_id": "0d984322-1a41-40bd-a64a-4f6d969341e5", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Subclasses from base prompt.\"\"\"\nfrom typing import List\n\nfrom gpt_index.prompts.base import Prompt\nfrom gpt_index.prompts.prompt_type import PromptType\n\n\nclass SummaryPrompt(Prompt):\n    \"\"\"Summary prompt.\n\n    Prompt to summarize the provided `context_str`.\n\n    Required template variables: `context_str`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type: PromptType = PromptType.SUMMARY\n    input_variables: List[str] = [\"context_str\"]\n\n\nclass TreeInsertPrompt(Prompt):\n    \"\"\"Tree Insert prompt.\n\n    Prompt to insert a new chunk of text `new_chunk_text` into the tree index.\n    More specifically, this prompt has the LLM select the relevant candidate\n    child node to continue tree traversal.\n\n    Required template variables: `num_chunks`, `context_list`, `new_chunk_text`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/prompts/prompts.py", "file_name": "prompts.py"}, "index": 0, "child_indices": [], "ref_doc_id": "583437e9d61e15269b7b59a5121fa41dedd096c3", "node_info": null}, "1": {"text": "       **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type: PromptType = PromptType.TREE_INSERT\n    input_variables: List[str] = [\"num_chunks\", \"context_list\", \"new_chunk_text\"]\n\n\nclass TreeSelectPrompt(Prompt):\n    \"\"\"Tree select prompt.\n\n    Prompt to select a candidate child node out of all child nodes\n    provided in `context_list`, given a query `query_str`. `num_chunks` is\n    the number of child nodes in `context_list`.\n\n    Required template variables: `num_chunks`, `context_list`, `query_str`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type: PromptType = PromptType.TREE_SELECT\n    input_variables: List[str] = [\"num_chunks\", \"context_list\", \"query_str\"]\n\n\nclass TreeSelectMultiplePrompt(Prompt):\n    \"\"\"Tree select multiple prompt.\n\n    Prompt to select multiple candidate child nodes out of all\n    child nodes provided in `context_list`, given", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/prompts/prompts.py", "file_name": "prompts.py"}, "index": 1, "child_indices": [], "ref_doc_id": "583437e9d61e15269b7b59a5121fa41dedd096c3", "node_info": null}, "2": {"text": "nodes out of all\n    child nodes provided in `context_list`, given a query `query_str`.\n    `branching_factor` refers to the number of child nodes to select, and\n    `num_chunks` is the number of child nodes in `context_list`.\n\n    Required template variables: `num_chunks`, `context_list`, `query_str`,\n        `branching_factor`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type = PromptType.TREE_SELECT_MULTIPLE\n    input_variables: List[str] = [\n        \"num_chunks\",\n        \"context_list\",\n        \"query_str\",\n        \"branching_factor\",\n    ]\n\n\nclass RefinePrompt(Prompt):\n    \"\"\"Refine prompt.\n\n    Prompt to refine an existing answer `existing_answer` given a context `context_msg`,\n    and a query `query_str`.\n\n    Required template variables: `query_str`, `existing_answer`, `context_msg`\n\n  ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/prompts/prompts.py", "file_name": "prompts.py"}, "index": 2, "child_indices": [], "ref_doc_id": "583437e9d61e15269b7b59a5121fa41dedd096c3", "node_info": null}, "3": {"text": "`query_str`, `existing_answer`, `context_msg`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    # TODO: rename context_msg to context_str\n\n    prompt_type: PromptType = PromptType.REFINE\n    input_variables: List[str] = [\"query_str\", \"existing_answer\", \"context_msg\"]\n\n\nclass QuestionAnswerPrompt(Prompt):\n    \"\"\"Question Answer prompt.\n\n    Prompt to answer a question `query_str` given a context `context_str`.\n\n    Required template variables: `context_str`, `query_str`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type: PromptType = PromptType.QUESTION_ANSWER\n    input_variables: List[str] = [\"context_str\", \"query_str\"]\n\n\nclass KeywordExtractPrompt(Prompt):\n    \"\"\"Keyword extract prompt.\n\n    Prompt to extract keywords from a text `text` with a maximum of\n   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/prompts/prompts.py", "file_name": "prompts.py"}, "index": 3, "child_indices": [], "ref_doc_id": "583437e9d61e15269b7b59a5121fa41dedd096c3", "node_info": null}, "4": {"text": "to extract keywords from a text `text` with a maximum of\n    `max_keywords` keywords.\n\n    Required template variables: `text`, `max_keywords`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type: PromptType = PromptType.KEYWORD_EXTRACT\n    input_variables: List[str] = [\"text\", \"max_keywords\"]\n\n\nclass QueryKeywordExtractPrompt(Prompt):\n    \"\"\"Query keyword extract prompt.\n\n    Prompt to extract keywords from a query `query_str` with a maximum\n    of `max_keywords` keywords.\n\n    Required template variables: `query_str`, `max_keywords`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type: PromptType = PromptType.QUERY_KEYWORD_EXTRACT\n    input_variables: List[str] = [\"question\", \"max_keywords\"]\n\n\nclass SchemaExtractPrompt(Prompt):\n   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/prompts/prompts.py", "file_name": "prompts.py"}, "index": 4, "child_indices": [], "ref_doc_id": "583437e9d61e15269b7b59a5121fa41dedd096c3", "node_info": null}, "5": {"text": "SchemaExtractPrompt(Prompt):\n    \"\"\"Schema extract prompt.\n\n    Prompt to extract schema from unstructured text `text`.\n\n    Required template variables: `text`, `schema`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type: PromptType = PromptType.SCHEMA_EXTRACT\n    input_variables: List[str] = [\"text\", \"schema\"]\n\n\nclass TextToSQLPrompt(Prompt):\n    \"\"\"Text to SQL prompt.\n\n    Prompt to translate a natural language query into SQL,\n    given a schema `schema`.\n\n    Required template variables: `query_str`, `schema`\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type: PromptType = PromptType.TEXT_TO_SQL\n    input_variables: List[str] = [\"query_str\", \"schema\"]\n\n\nclass TableContextPrompt(Prompt):\n    \"\"\"Table context prompt.\n\n    Prompt", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/prompts/prompts.py", "file_name": "prompts.py"}, "index": 5, "child_indices": [], "ref_doc_id": "583437e9d61e15269b7b59a5121fa41dedd096c3", "node_info": null}, "6": {"text": "   \"\"\"Table context prompt.\n\n    Prompt to generate a table context given a table schema `schema`,\n    as well as unstructured text context `context_str`, and\n    a task `query_str`.\n    This includes both a high-level description of the table\n    as well as a description of each column in the table.\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    prompt_type: PromptType = PromptType.TABLE_CONTEXT\n    input_variables: List[str] = [\"schema\", \"context_str\", \"query_str\"]\n\n\nclass RefineTableContextPrompt(Prompt):\n    \"\"\"Refine Table context prompt.\n\n    Prompt to refine a table context given a table schema `schema`,\n    as well as unstructured text context `context_msg`, and\n    a task `query_str`.\n    This includes both a high-level description of the table\n    as well as a description of each column in the table.\n\n    Args:\n        template (str): Template for the prompt.\n        **prompt_kwargs: Keyword arguments for the prompt.\n\n  ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/prompts/prompts.py", "file_name": "prompts.py"}, "index": 6, "child_indices": [], "ref_doc_id": "583437e9d61e15269b7b59a5121fa41dedd096c3", "node_info": null}, "7": {"text": " **prompt_kwargs: Keyword arguments for the prompt.\n\n    \"\"\"\n\n    # TODO: rename context_msg to context_str\n\n    prompt_type: PromptType = PromptType.TABLE_CONTEXT\n    input_variables: List[str] = [\n        \"schema\",\n        \"context_msg\",\n        \"query_str\",\n        \"existing_answer\",\n    ]\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/prompts/prompts.py", "file_name": "prompts.py"}, "index": 7, "child_indices": [], "ref_doc_id": "583437e9d61e15269b7b59a5121fa41dedd096c3", "node_info": null}, "8": {"text": "This code file contains subclasses from the base prompt class. Each subclass is a prompt type, such as SummaryPrompt, TreeInsertPrompt, TreeSelectPrompt, TreeSelectMultiplePrompt, RefinePrompt, QuestionAnswerPrompt, KeywordExtractPrompt, QueryKeywordExtractPrompt, SchemaExtractPrompt, TextToSQLPrompt, TableContextPrompt, and RefineTableContextPrompt. Each prompt type has a prompt_type attribute and a list of input variables that are required for the prompt. The purpose of this code is to provide a set of prompts that can be used to generate natural language responses.", "doc_id": null, "embedding": null, "extra_info": null, "index": 8, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"8": {"text": "This code file contains subclasses from the base prompt class. Each subclass is a prompt type, such as SummaryPrompt, TreeInsertPrompt, TreeSelectPrompt, TreeSelectMultiplePrompt, RefinePrompt, QuestionAnswerPrompt, KeywordExtractPrompt, QueryKeywordExtractPrompt, SchemaExtractPrompt, TextToSQLPrompt, TableContextPrompt, and RefineTableContextPrompt. Each prompt type has a prompt_type attribute and a list of input variables that are required for the prompt. The purpose of this code is to provide a set of prompts that can be used to generate natural language responses.", "doc_id": null, "embedding": null, "extra_info": null, "index": 8, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}