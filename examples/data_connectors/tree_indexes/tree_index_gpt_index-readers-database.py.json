{"index_struct": {"text": "\nDatabaseReader is a class that provides a simple way to read data from a database and use it in GPT Index. It can be initialized with either a SQLDatabase, a SQL Alchemy Engine, a valid connection URI, or a valid set of credentials. The load_data() method takes a query parameter to filter tables and rows, and returns a list of Document objects. The Document objects are created by concatenating each row of the database. This class allows users to quickly and easily read data from a database and use it in GPT Index.", "doc_id": "ce186827-2f12-4ecb-a12c-a36cb06d6ed5", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Database Reader.\"\"\"\n\nfrom typing import Any, List, Optional\n\nfrom sqlalchemy import text\nfrom sqlalchemy.engine import Engine\n\nfrom gpt_index.langchain_helpers.sql_wrapper import SQLDatabase\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\n\nclass DatabaseReader(BaseReader):\n    \"\"\"Simple Database reader.\n\n    Concatenates each row into Document used by GPT Index.\n\n    Args:\n        sql_database (Optional[SQLDatabase]): SQL database to use,\n            including table names to specify.\n            See :ref:`Ref-Struct-Store` for more details.\n\n        OR\n\n        engine (Optional[Engine]): SQLAlchemy Engine object of the database connection.\n\n        OR\n\n        uri (Optional[str]): uri of the database connection.\n\n        OR\n\n        scheme (Optional[str]): scheme of the database connection.\n        host (Optional[str]): host of the database connection.\n        port (Optional[int]): port of the database connection.\n        user (Optional[str]): user of the database", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/database.py", "file_name": "database.py"}, "index": 0, "child_indices": [], "ref_doc_id": "4098c3e4bb1452ddb95150e467c23f0d503b34e1", "node_info": null}, "1": {"text": "       user (Optional[str]): user of the database connection.\n        password (Optional[str]): password of the database connection.\n        dbname (Optional[str]): dbname of the database connection.\n\n    Returns:\n        DatabaseReader: A DatabaseReader object.\n    \"\"\"\n\n    def __init__(\n        self,\n        sql_database: Optional[SQLDatabase] = None,\n        engine: Optional[Engine] = None,\n        uri: Optional[str] = None,\n        scheme: Optional[str] = None,\n        host: Optional[str] = None,\n        port: Optional[str] = None,\n        user: Optional[str] = None,\n        password: Optional[str] = None,\n        dbname: Optional[str] = None,\n        *args: Optional[Any],\n        **kwargs: Optional[Any],\n    ) -> None:\n        \"\"\"Initialize with parameters.\"\"\"\n        if sql_database:\n           ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/database.py", "file_name": "database.py"}, "index": 1, "child_indices": [], "ref_doc_id": "4098c3e4bb1452ddb95150e467c23f0d503b34e1", "node_info": null}, "2": {"text": "   if sql_database:\n            self.sql_database = sql_database\n        elif engine:\n            self.sql_database = SQLDatabase(engine, *args, **kwargs)\n        elif uri:\n            self.uri = uri\n            self.sql_database = SQLDatabase.from_uri(uri, *args, **kwargs)\n        elif scheme and host and port and user and password and dbname:\n            uri = f\"{scheme}://{user}:{password}@{host}:{port}/{dbname}\"\n            self.uri = uri\n            self.sql_database = SQLDatabase.from_uri(uri, *args, **kwargs)\n        else:\n            raise ValueError(\n                \"You must provide either a SQLDatabase, \"\n                \"a SQL Alchemy Engine, a valid connection URI, or a valid \"\n                \"set of", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/database.py", "file_name": "database.py"}, "index": 2, "child_indices": [], "ref_doc_id": "4098c3e4bb1452ddb95150e467c23f0d503b34e1", "node_info": null}, "3": {"text": "\"\n                \"set of credentials.\"\n            )\n\n    def load_data(self, query: str) -> List[Document]:\n        \"\"\"Query and load data from the Database, returning a list of Documents.\n\n        Args:\n            query (str): Query parameter to filter tables and rows.\n\n        Returns:\n            List[Document]: A list of Document objects.\n        \"\"\"\n        documents = []\n        with self.sql_database.engine.connect() as connection:\n            if query is None:\n                raise ValueError(\"A query parameter is necessary to filter the data\")\n            else:\n                result = connection.execute(text(query))\n\n            for item in result.fetchall():\n                documents.append(Document(item[0]))\n        return documents\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/database.py", "file_name": "database.py"}, "index": 3, "child_indices": [], "ref_doc_id": "4098c3e4bb1452ddb95150e467c23f0d503b34e1", "node_info": null}, "4": {"text": "DatabaseReader is a class that reads data from a database and concatenates each row into a Document object used by GPT Index. It can be initialized with either a SQLDatabase, a SQL Alchemy Engine, a valid connection URI, or a valid set of credentials. The load_data() method takes a query parameter to filter tables and rows, and returns a list of Document objects.", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"4": {"text": "DatabaseReader is a class that reads data from a database and concatenates each row into a Document object used by GPT Index. It can be initialized with either a SQLDatabase, a SQL Alchemy Engine, a valid connection URI, or a valid set of credentials. The load_data() method takes a query parameter to filter tables and rows, and returns a list of Document objects.", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"4098c3e4bb1452ddb95150e467c23f0d503b34e1": {"text": "\"\"\"Database Reader.\"\"\"\n\nfrom typing import Any, List, Optional\n\nfrom sqlalchemy import text\nfrom sqlalchemy.engine import Engine\n\nfrom gpt_index.langchain_helpers.sql_wrapper import SQLDatabase\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\n\nclass DatabaseReader(BaseReader):\n    \"\"\"Simple Database reader.\n\n    Concatenates each row into Document used by GPT Index.\n\n    Args:\n        sql_database (Optional[SQLDatabase]): SQL database to use,\n            including table names to specify.\n            See :ref:`Ref-Struct-Store` for more details.\n\n        OR\n\n        engine (Optional[Engine]): SQLAlchemy Engine object of the database connection.\n\n        OR\n\n        uri (Optional[str]): uri of the database connection.\n\n        OR\n\n        scheme (Optional[str]): scheme of the database connection.\n        host (Optional[str]): host of the database connection.\n        port (Optional[int]): port of the database connection.\n        user (Optional[str]): user of the database connection.\n        password (Optional[str]): password of the database connection.\n        dbname (Optional[str]): dbname of the database connection.\n\n    Returns:\n        DatabaseReader: A DatabaseReader object.\n    \"\"\"\n\n    def __init__(\n        self,\n        sql_database: Optional[SQLDatabase] = None,\n        engine: Optional[Engine] = None,\n        uri: Optional[str] = None,\n        scheme: Optional[str] = None,\n        host: Optional[str] = None,\n        port: Optional[str] = None,\n        user: Optional[str] = None,\n        password: Optional[str] = None,\n        dbname: Optional[str] = None,\n        *args: Optional[Any],\n        **kwargs: Optional[Any],\n    ) -> None:\n        \"\"\"Initialize with parameters.\"\"\"\n        if sql_database:\n            self.sql_database = sql_database\n        elif engine:\n            self.sql_database = SQLDatabase(engine, *args, **kwargs)\n        elif uri:\n            self.uri = uri\n            self.sql_database = SQLDatabase.from_uri(uri, *args, **kwargs)\n        elif scheme and host and port and user and password and dbname:\n            uri = f\"{scheme}://{user}:{password}@{host}:{port}/{dbname}\"\n            self.uri = uri\n            self.sql_database = SQLDatabase.from_uri(uri, *args, **kwargs)\n        else:\n            raise ValueError(\n                \"You must provide either a SQLDatabase, \"\n                \"a SQL Alchemy Engine, a valid connection URI, or a valid \"\n                \"set of credentials.\"\n            )\n\n    def load_data(self, query: str) -> List[Document]:\n        \"\"\"Query and load data from the Database, returning a list of Documents.\n\n        Args:\n            query (str): Query parameter to filter tables and rows.\n\n        Returns:\n            List[Document]: A list of Document objects.\n        \"\"\"\n        documents = []\n        with self.sql_database.engine.connect() as connection:\n            if query is None:\n                raise ValueError(\"A query parameter is necessary to filter the data\")\n            else:\n                result = connection.execute(text(query))\n\n            for item in result.fetchall():\n                documents.append(Document(item[0]))\n        return documents\n", "doc_id": "4098c3e4bb1452ddb95150e467c23f0d503b34e1", "embedding": null, "extra_info": {"file_path": "gpt_index/readers/database.py", "file_name": "database.py"}, "__type__": "Document"}, "ce186827-2f12-4ecb-a12c-a36cb06d6ed5": {"text": "\nDatabaseReader is a class that provides a simple way to read data from a database and use it in GPT Index. It can be initialized with either a SQLDatabase, a SQL Alchemy Engine, a valid connection URI, or a valid set of credentials. The load_data() method takes a query parameter to filter tables and rows, and returns a list of Document objects. The Document objects are created by concatenating each row of the database. This class allows users to quickly and easily read data from a database and use it in GPT Index.", "doc_id": "ce186827-2f12-4ecb-a12c-a36cb06d6ed5", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Database Reader.\"\"\"\n\nfrom typing import Any, List, Optional\n\nfrom sqlalchemy import text\nfrom sqlalchemy.engine import Engine\n\nfrom gpt_index.langchain_helpers.sql_wrapper import SQLDatabase\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\n\nclass DatabaseReader(BaseReader):\n    \"\"\"Simple Database reader.\n\n    Concatenates each row into Document used by GPT Index.\n\n    Args:\n        sql_database (Optional[SQLDatabase]): SQL database to use,\n            including table names to specify.\n            See :ref:`Ref-Struct-Store` for more details.\n\n        OR\n\n        engine (Optional[Engine]): SQLAlchemy Engine object of the database connection.\n\n        OR\n\n        uri (Optional[str]): uri of the database connection.\n\n        OR\n\n        scheme (Optional[str]): scheme of the database connection.\n        host (Optional[str]): host of the database connection.\n        port (Optional[int]): port of the database connection.\n        user (Optional[str]): user of the database", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/database.py", "file_name": "database.py"}, "index": 0, "child_indices": [], "ref_doc_id": "4098c3e4bb1452ddb95150e467c23f0d503b34e1", "node_info": null}, "1": {"text": "       user (Optional[str]): user of the database connection.\n        password (Optional[str]): password of the database connection.\n        dbname (Optional[str]): dbname of the database connection.\n\n    Returns:\n        DatabaseReader: A DatabaseReader object.\n    \"\"\"\n\n    def __init__(\n        self,\n        sql_database: Optional[SQLDatabase] = None,\n        engine: Optional[Engine] = None,\n        uri: Optional[str] = None,\n        scheme: Optional[str] = None,\n        host: Optional[str] = None,\n        port: Optional[str] = None,\n        user: Optional[str] = None,\n        password: Optional[str] = None,\n        dbname: Optional[str] = None,\n        *args: Optional[Any],\n        **kwargs: Optional[Any],\n    ) -> None:\n        \"\"\"Initialize with parameters.\"\"\"\n        if sql_database:\n           ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/database.py", "file_name": "database.py"}, "index": 1, "child_indices": [], "ref_doc_id": "4098c3e4bb1452ddb95150e467c23f0d503b34e1", "node_info": null}, "2": {"text": "   if sql_database:\n            self.sql_database = sql_database\n        elif engine:\n            self.sql_database = SQLDatabase(engine, *args, **kwargs)\n        elif uri:\n            self.uri = uri\n            self.sql_database = SQLDatabase.from_uri(uri, *args, **kwargs)\n        elif scheme and host and port and user and password and dbname:\n            uri = f\"{scheme}://{user}:{password}@{host}:{port}/{dbname}\"\n            self.uri = uri\n            self.sql_database = SQLDatabase.from_uri(uri, *args, **kwargs)\n        else:\n            raise ValueError(\n                \"You must provide either a SQLDatabase, \"\n                \"a SQL Alchemy Engine, a valid connection URI, or a valid \"\n                \"set of", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/database.py", "file_name": "database.py"}, "index": 2, "child_indices": [], "ref_doc_id": "4098c3e4bb1452ddb95150e467c23f0d503b34e1", "node_info": null}, "3": {"text": "\"\n                \"set of credentials.\"\n            )\n\n    def load_data(self, query: str) -> List[Document]:\n        \"\"\"Query and load data from the Database, returning a list of Documents.\n\n        Args:\n            query (str): Query parameter to filter tables and rows.\n\n        Returns:\n            List[Document]: A list of Document objects.\n        \"\"\"\n        documents = []\n        with self.sql_database.engine.connect() as connection:\n            if query is None:\n                raise ValueError(\"A query parameter is necessary to filter the data\")\n            else:\n                result = connection.execute(text(query))\n\n            for item in result.fetchall():\n                documents.append(Document(item[0]))\n        return documents\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/database.py", "file_name": "database.py"}, "index": 3, "child_indices": [], "ref_doc_id": "4098c3e4bb1452ddb95150e467c23f0d503b34e1", "node_info": null}, "4": {"text": "DatabaseReader is a class that reads data from a database and concatenates each row into a Document object used by GPT Index. It can be initialized with either a SQLDatabase, a SQL Alchemy Engine, a valid connection URI, or a valid set of credentials. The load_data() method takes a query parameter to filter tables and rows, and returns a list of Document objects.", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"4": {"text": "DatabaseReader is a class that reads data from a database and concatenates each row into a Document object used by GPT Index. It can be initialized with either a SQLDatabase, a SQL Alchemy Engine, a valid connection URI, or a valid set of credentials. The load_data() method takes a query parameter to filter tables and rows, and returns a list of Document objects.", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}