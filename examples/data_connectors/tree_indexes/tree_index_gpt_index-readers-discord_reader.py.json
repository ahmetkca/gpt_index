{"index_struct": {"text": "\nThis code file is a Discord reader that reads conversations from channels using the Discord API and the asyncio module. It contains a class called DiscordReader which takes a Discord token as an argument and has a method called load_data which takes a list of channel ids, a limit, and a boolean for oldest_first as arguments. This method returns a list of documents containing the channel content. Additionally, there is a function called read_channel which reads the channel and returns the content as a string. The purpose of this code is to read conversations from Discord channels and store them in a list of documents for further analysis.", "doc_id": "3abdd1e9-8333-44c9-8261-7e95b459689b", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Discord reader.\n\nNote: this file is named discord_reader.py to avoid conflicts with the\ndiscord.py module.\n\n\"\"\"\n\nimport asyncio\nimport logging\nimport os\nfrom typing import List, Optional\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\n\nasync def read_channel(\n    discord_token: str, channel_id: int, limit: Optional[int], oldest_first: bool\n) -> str:\n    \"\"\"Async read channel.\n\n    Note: This is our hack to create a synchronous interface to the\n    async discord.py API. We use the `asyncio` module to run\n    this function with `asyncio.get_event_loop().run_until_complete`.\n\n    \"\"\"\n    import discord  # noqa: F401\n\n    messages: List[discord.Message] = []\n\n    class CustomClient(discord.Client):\n        async def on_ready(self) -> None:\n            try:\n                logging.info(f\"{self.user} has connected to Discord!\")\n                channel =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/discord_reader.py", "file_name": "discord_reader.py"}, "index": 0, "child_indices": [], "ref_doc_id": "8d9a229a3248b1617b67774eac291a2594ec686e", "node_info": null}, "1": {"text": "               channel = client.get_channel(channel_id)\n                # only work for text channels for now\n                if not isinstance(channel, discord.TextChannel):\n                    raise ValueError(\n                        f\"Channel {channel_id} is not a text channel. \"\n                        \"Only text channels are supported for now.\"\n                    )\n                # thread_dict maps thread_id to thread\n                thread_dict = {}\n                for thread in channel.threads:\n                    thread_dict[thread.id] = thread\n\n                async for msg in channel.history(\n                   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/discord_reader.py", "file_name": "discord_reader.py"}, "index": 1, "child_indices": [], "ref_doc_id": "8d9a229a3248b1617b67774eac291a2594ec686e", "node_info": null}, "2": {"text": "                   limit=limit, oldest_first=oldest_first\n                ):\n                    messages.append(msg)\n                    if msg.id in thread_dict:\n                        thread = thread_dict[msg.id]\n                        async for thread_msg in thread.history(\n                            limit=limit, oldest_first=oldest_first\n                        ):\n                            messages.append(thread_msg)\n            except Exception as e:\n                logging.error(\"Encountered error: \" + str(e))\n            finally:\n     ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/discord_reader.py", "file_name": "discord_reader.py"}, "index": 2, "child_indices": [], "ref_doc_id": "8d9a229a3248b1617b67774eac291a2594ec686e", "node_info": null}, "3": {"text": "           finally:\n                await self.close()\n\n    intents = discord.Intents.default()\n    intents.message_content = True\n    client = CustomClient(intents=intents)\n    await client.start(discord_token)\n\n    msg_txt_list = [m.content for m in messages]\n\n    return \"\\n\\n\".join(msg_txt_list)\n\n\nclass DiscordReader(BaseReader):\n    \"\"\"Discord reader.\n\n    Reads conversations from channels.\n\n    Args:\n        discord_token (Optional[str]): Discord token. If not provided, we\n            assume the environment variable `DISCORD_TOKEN` is set.\n\n    \"\"\"\n\n    def __init__(self, discord_token: Optional[str] = None) -> None:\n        \"\"\"Initialize with parameters.\"\"\"\n        try:\n            import discord  # noqa: F401\n        except ImportError:\n            raise ValueError(\n              ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/discord_reader.py", "file_name": "discord_reader.py"}, "index": 3, "child_indices": [], "ref_doc_id": "8d9a229a3248b1617b67774eac291a2594ec686e", "node_info": null}, "4": {"text": " raise ValueError(\n                \"`discord.py` package not found, please run `pip install discord.py`\"\n            )\n        if discord_token is None:\n            discord_token = os.environ[\"DISCORD_TOKEN\"]\n            if discord_token is None:\n                raise ValueError(\n                    \"Must specify `discord_token` or set environment \"\n                    \"variable `DISCORD_TOKEN`.\"\n                )\n\n        self.discord_token = discord_token\n\n    def _read_channel(\n        self, channel_id: int, limit: Optional[int] = None, oldest_first: bool = True\n    ) -> str:\n        \"\"\"Read channel.\"\"\"\n        result = asyncio.get_event_loop().run_until_complete(\n           ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/discord_reader.py", "file_name": "discord_reader.py"}, "index": 4, "child_indices": [], "ref_doc_id": "8d9a229a3248b1617b67774eac291a2594ec686e", "node_info": null}, "5": {"text": "           read_channel(\n                self.discord_token, channel_id, limit=limit, oldest_first=oldest_first\n            )\n        )\n        return result\n\n    def load_data(\n        self,\n        channel_ids: List[int],\n        limit: Optional[int] = None,\n        oldest_first: bool = True,\n    ) -> List[Document]:\n        \"\"\"Load data from the input directory.\n\n        Args:\n            channel_ids (List[int]): List of channel ids to read.\n            limit (Optional[int]): Maximum number of messages to read.\n            oldest_first (bool): Whether to read oldest messages first.\n                Defaults to `True`.\n\n        Returns:\n            List[Document]: List of documents.\n\n        \"\"\"\n        results:", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/discord_reader.py", "file_name": "discord_reader.py"}, "index": 5, "child_indices": [], "ref_doc_id": "8d9a229a3248b1617b67774eac291a2594ec686e", "node_info": null}, "6": {"text": "       \"\"\"\n        results: List[Document] = []\n        for channel_id in channel_ids:\n            if not isinstance(channel_id, int):\n                raise ValueError(\n                    f\"Channel id {channel_id} must be an integer, \"\n                    f\"not {type(channel_id)}.\"\n                )\n            channel_content = self._read_channel(\n                channel_id, limit=limit, oldest_first=oldest_first\n            )\n            results.append(\n                Document(channel_content, extra_info={\"channel\": channel_id})\n            )\n        return results\n\n\nif __name__ == \"__main__\":\n    reader = DiscordReader()\n    logging.info(\"initialized reader\")\n    output =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/discord_reader.py", "file_name": "discord_reader.py"}, "index": 6, "child_indices": [], "ref_doc_id": "8d9a229a3248b1617b67774eac291a2594ec686e", "node_info": null}, "7": {"text": "   logging.info(\"initialized reader\")\n    output = reader.load_data(channel_ids=[1057178784895348746], limit=10)\n    logging.info(output)\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/discord_reader.py", "file_name": "discord_reader.py"}, "index": 7, "child_indices": [], "ref_doc_id": "8d9a229a3248b1617b67774eac291a2594ec686e", "node_info": null}, "8": {"text": "This code file is a discord reader that reads conversations from channels. It uses the discord.py module to access the Discord API and the asyncio module to create a synchronous interface. It has a class called DiscordReader which takes a discord token as an argument and has a method called load_data which takes a list of channel ids, a limit, and a boolean for oldest_first as arguments. This method returns a list of documents containing the channel content. The code also has a function called read_channel which reads the channel and returns the content as a string. This code is used to read conversations from Discord channels.", "doc_id": null, "embedding": null, "extra_info": null, "index": 8, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"8": {"text": "This code file is a discord reader that reads conversations from channels. It uses the discord.py module to access the Discord API and the asyncio module to create a synchronous interface. It has a class called DiscordReader which takes a discord token as an argument and has a method called load_data which takes a list of channel ids, a limit, and a boolean for oldest_first as arguments. This method returns a list of documents containing the channel content. The code also has a function called read_channel which reads the channel and returns the content as a string. This code is used to read conversations from Discord channels.", "doc_id": null, "embedding": null, "extra_info": null, "index": 8, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"8d9a229a3248b1617b67774eac291a2594ec686e": {"text": "\"\"\"Discord reader.\n\nNote: this file is named discord_reader.py to avoid conflicts with the\ndiscord.py module.\n\n\"\"\"\n\nimport asyncio\nimport logging\nimport os\nfrom typing import List, Optional\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\n\nasync def read_channel(\n    discord_token: str, channel_id: int, limit: Optional[int], oldest_first: bool\n) -> str:\n    \"\"\"Async read channel.\n\n    Note: This is our hack to create a synchronous interface to the\n    async discord.py API. We use the `asyncio` module to run\n    this function with `asyncio.get_event_loop().run_until_complete`.\n\n    \"\"\"\n    import discord  # noqa: F401\n\n    messages: List[discord.Message] = []\n\n    class CustomClient(discord.Client):\n        async def on_ready(self) -> None:\n            try:\n                logging.info(f\"{self.user} has connected to Discord!\")\n                channel = client.get_channel(channel_id)\n                # only work for text channels for now\n                if not isinstance(channel, discord.TextChannel):\n                    raise ValueError(\n                        f\"Channel {channel_id} is not a text channel. \"\n                        \"Only text channels are supported for now.\"\n                    )\n                # thread_dict maps thread_id to thread\n                thread_dict = {}\n                for thread in channel.threads:\n                    thread_dict[thread.id] = thread\n\n                async for msg in channel.history(\n                    limit=limit, oldest_first=oldest_first\n                ):\n                    messages.append(msg)\n                    if msg.id in thread_dict:\n                        thread = thread_dict[msg.id]\n                        async for thread_msg in thread.history(\n                            limit=limit, oldest_first=oldest_first\n                        ):\n                            messages.append(thread_msg)\n            except Exception as e:\n                logging.error(\"Encountered error: \" + str(e))\n            finally:\n                await self.close()\n\n    intents = discord.Intents.default()\n    intents.message_content = True\n    client = CustomClient(intents=intents)\n    await client.start(discord_token)\n\n    msg_txt_list = [m.content for m in messages]\n\n    return \"\\n\\n\".join(msg_txt_list)\n\n\nclass DiscordReader(BaseReader):\n    \"\"\"Discord reader.\n\n    Reads conversations from channels.\n\n    Args:\n        discord_token (Optional[str]): Discord token. If not provided, we\n            assume the environment variable `DISCORD_TOKEN` is set.\n\n    \"\"\"\n\n    def __init__(self, discord_token: Optional[str] = None) -> None:\n        \"\"\"Initialize with parameters.\"\"\"\n        try:\n            import discord  # noqa: F401\n        except ImportError:\n            raise ValueError(\n                \"`discord.py` package not found, please run `pip install discord.py`\"\n            )\n        if discord_token is None:\n            discord_token = os.environ[\"DISCORD_TOKEN\"]\n            if discord_token is None:\n                raise ValueError(\n                    \"Must specify `discord_token` or set environment \"\n                    \"variable `DISCORD_TOKEN`.\"\n                )\n\n        self.discord_token = discord_token\n\n    def _read_channel(\n        self, channel_id: int, limit: Optional[int] = None, oldest_first: bool = True\n    ) -> str:\n        \"\"\"Read channel.\"\"\"\n        result = asyncio.get_event_loop().run_until_complete(\n            read_channel(\n                self.discord_token, channel_id, limit=limit, oldest_first=oldest_first\n            )\n        )\n        return result\n\n    def load_data(\n        self,\n        channel_ids: List[int],\n        limit: Optional[int] = None,\n        oldest_first: bool = True,\n    ) -> List[Document]:\n        \"\"\"Load data from the input directory.\n\n        Args:\n            channel_ids (List[int]): List of channel ids to read.\n            limit (Optional[int]): Maximum number of messages to read.\n            oldest_first (bool): Whether to read oldest messages first.\n                Defaults to `True`.\n\n        Returns:\n            List[Document]: List of documents.\n\n        \"\"\"\n        results: List[Document] = []\n        for channel_id in channel_ids:\n            if not isinstance(channel_id, int):\n                raise ValueError(\n                    f\"Channel id {channel_id} must be an integer, \"\n                    f\"not {type(channel_id)}.\"\n                )\n            channel_content = self._read_channel(\n                channel_id, limit=limit, oldest_first=oldest_first\n            )\n            results.append(\n                Document(channel_content, extra_info={\"channel\": channel_id})\n            )\n        return results\n\n\nif __name__ == \"__main__\":\n    reader = DiscordReader()\n    logging.info(\"initialized reader\")\n    output = reader.load_data(channel_ids=[1057178784895348746], limit=10)\n    logging.info(output)\n", "doc_id": "8d9a229a3248b1617b67774eac291a2594ec686e", "embedding": null, "extra_info": {"file_path": "gpt_index/readers/discord_reader.py", "file_name": "discord_reader.py"}, "__type__": "Document"}, "3abdd1e9-8333-44c9-8261-7e95b459689b": {"text": "\nThis code file is a Discord reader that reads conversations from channels using the Discord API and the asyncio module. It contains a class called DiscordReader which takes a Discord token as an argument and has a method called load_data which takes a list of channel ids, a limit, and a boolean for oldest_first as arguments. This method returns a list of documents containing the channel content. Additionally, there is a function called read_channel which reads the channel and returns the content as a string. The purpose of this code is to read conversations from Discord channels and store them in a list of documents for further analysis.", "doc_id": "3abdd1e9-8333-44c9-8261-7e95b459689b", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Discord reader.\n\nNote: this file is named discord_reader.py to avoid conflicts with the\ndiscord.py module.\n\n\"\"\"\n\nimport asyncio\nimport logging\nimport os\nfrom typing import List, Optional\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\n\nasync def read_channel(\n    discord_token: str, channel_id: int, limit: Optional[int], oldest_first: bool\n) -> str:\n    \"\"\"Async read channel.\n\n    Note: This is our hack to create a synchronous interface to the\n    async discord.py API. We use the `asyncio` module to run\n    this function with `asyncio.get_event_loop().run_until_complete`.\n\n    \"\"\"\n    import discord  # noqa: F401\n\n    messages: List[discord.Message] = []\n\n    class CustomClient(discord.Client):\n        async def on_ready(self) -> None:\n            try:\n                logging.info(f\"{self.user} has connected to Discord!\")\n                channel =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/discord_reader.py", "file_name": "discord_reader.py"}, "index": 0, "child_indices": [], "ref_doc_id": "8d9a229a3248b1617b67774eac291a2594ec686e", "node_info": null}, "1": {"text": "               channel = client.get_channel(channel_id)\n                # only work for text channels for now\n                if not isinstance(channel, discord.TextChannel):\n                    raise ValueError(\n                        f\"Channel {channel_id} is not a text channel. \"\n                        \"Only text channels are supported for now.\"\n                    )\n                # thread_dict maps thread_id to thread\n                thread_dict = {}\n                for thread in channel.threads:\n                    thread_dict[thread.id] = thread\n\n                async for msg in channel.history(\n                   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/discord_reader.py", "file_name": "discord_reader.py"}, "index": 1, "child_indices": [], "ref_doc_id": "8d9a229a3248b1617b67774eac291a2594ec686e", "node_info": null}, "2": {"text": "                   limit=limit, oldest_first=oldest_first\n                ):\n                    messages.append(msg)\n                    if msg.id in thread_dict:\n                        thread = thread_dict[msg.id]\n                        async for thread_msg in thread.history(\n                            limit=limit, oldest_first=oldest_first\n                        ):\n                            messages.append(thread_msg)\n            except Exception as e:\n                logging.error(\"Encountered error: \" + str(e))\n            finally:\n     ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/discord_reader.py", "file_name": "discord_reader.py"}, "index": 2, "child_indices": [], "ref_doc_id": "8d9a229a3248b1617b67774eac291a2594ec686e", "node_info": null}, "3": {"text": "           finally:\n                await self.close()\n\n    intents = discord.Intents.default()\n    intents.message_content = True\n    client = CustomClient(intents=intents)\n    await client.start(discord_token)\n\n    msg_txt_list = [m.content for m in messages]\n\n    return \"\\n\\n\".join(msg_txt_list)\n\n\nclass DiscordReader(BaseReader):\n    \"\"\"Discord reader.\n\n    Reads conversations from channels.\n\n    Args:\n        discord_token (Optional[str]): Discord token. If not provided, we\n            assume the environment variable `DISCORD_TOKEN` is set.\n\n    \"\"\"\n\n    def __init__(self, discord_token: Optional[str] = None) -> None:\n        \"\"\"Initialize with parameters.\"\"\"\n        try:\n            import discord  # noqa: F401\n        except ImportError:\n            raise ValueError(\n              ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/discord_reader.py", "file_name": "discord_reader.py"}, "index": 3, "child_indices": [], "ref_doc_id": "8d9a229a3248b1617b67774eac291a2594ec686e", "node_info": null}, "4": {"text": " raise ValueError(\n                \"`discord.py` package not found, please run `pip install discord.py`\"\n            )\n        if discord_token is None:\n            discord_token = os.environ[\"DISCORD_TOKEN\"]\n            if discord_token is None:\n                raise ValueError(\n                    \"Must specify `discord_token` or set environment \"\n                    \"variable `DISCORD_TOKEN`.\"\n                )\n\n        self.discord_token = discord_token\n\n    def _read_channel(\n        self, channel_id: int, limit: Optional[int] = None, oldest_first: bool = True\n    ) -> str:\n        \"\"\"Read channel.\"\"\"\n        result = asyncio.get_event_loop().run_until_complete(\n           ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/discord_reader.py", "file_name": "discord_reader.py"}, "index": 4, "child_indices": [], "ref_doc_id": "8d9a229a3248b1617b67774eac291a2594ec686e", "node_info": null}, "5": {"text": "           read_channel(\n                self.discord_token, channel_id, limit=limit, oldest_first=oldest_first\n            )\n        )\n        return result\n\n    def load_data(\n        self,\n        channel_ids: List[int],\n        limit: Optional[int] = None,\n        oldest_first: bool = True,\n    ) -> List[Document]:\n        \"\"\"Load data from the input directory.\n\n        Args:\n            channel_ids (List[int]): List of channel ids to read.\n            limit (Optional[int]): Maximum number of messages to read.\n            oldest_first (bool): Whether to read oldest messages first.\n                Defaults to `True`.\n\n        Returns:\n            List[Document]: List of documents.\n\n        \"\"\"\n        results:", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/discord_reader.py", "file_name": "discord_reader.py"}, "index": 5, "child_indices": [], "ref_doc_id": "8d9a229a3248b1617b67774eac291a2594ec686e", "node_info": null}, "6": {"text": "       \"\"\"\n        results: List[Document] = []\n        for channel_id in channel_ids:\n            if not isinstance(channel_id, int):\n                raise ValueError(\n                    f\"Channel id {channel_id} must be an integer, \"\n                    f\"not {type(channel_id)}.\"\n                )\n            channel_content = self._read_channel(\n                channel_id, limit=limit, oldest_first=oldest_first\n            )\n            results.append(\n                Document(channel_content, extra_info={\"channel\": channel_id})\n            )\n        return results\n\n\nif __name__ == \"__main__\":\n    reader = DiscordReader()\n    logging.info(\"initialized reader\")\n    output =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/discord_reader.py", "file_name": "discord_reader.py"}, "index": 6, "child_indices": [], "ref_doc_id": "8d9a229a3248b1617b67774eac291a2594ec686e", "node_info": null}, "7": {"text": "   logging.info(\"initialized reader\")\n    output = reader.load_data(channel_ids=[1057178784895348746], limit=10)\n    logging.info(output)\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/discord_reader.py", "file_name": "discord_reader.py"}, "index": 7, "child_indices": [], "ref_doc_id": "8d9a229a3248b1617b67774eac291a2594ec686e", "node_info": null}, "8": {"text": "This code file is a discord reader that reads conversations from channels. It uses the discord.py module to access the Discord API and the asyncio module to create a synchronous interface. It has a class called DiscordReader which takes a discord token as an argument and has a method called load_data which takes a list of channel ids, a limit, and a boolean for oldest_first as arguments. This method returns a list of documents containing the channel content. The code also has a function called read_channel which reads the channel and returns the content as a string. This code is used to read conversations from Discord channels.", "doc_id": null, "embedding": null, "extra_info": null, "index": 8, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"8": {"text": "This code file is a discord reader that reads conversations from channels. It uses the discord.py module to access the Discord API and the asyncio module to create a synchronous interface. It has a class called DiscordReader which takes a discord token as an argument and has a method called load_data which takes a list of channel ids, a limit, and a boolean for oldest_first as arguments. This method returns a list of documents containing the channel content. The code also has a function called read_channel which reads the channel and returns the content as a string. This code is used to read conversations from Discord channels.", "doc_id": null, "embedding": null, "extra_info": null, "index": 8, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}