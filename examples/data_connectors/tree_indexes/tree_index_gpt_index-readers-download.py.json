{"index_struct": {"text": "\nThis code file provides a way to download a single loader from the Loader Hub, install any necessary dependencies, and return the loader class. It uses the requests library to make a GET request to the Loader Hub URL and parse the response into a JSON object. It then looks up the loader id and creates a new directory if it does not exist. It then downloads the base.py file and the requirements.txt file if they do not exist. The pkg_resources library is used to parse the requirements.txt file and install any dependencies that are not already installed. Finally, the importlib library is used to load the module and return the loader class.", "doc_id": "0f42c286-dc51-4bc6-9036-95a77fd620bc", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Download loader from the Loader Hub.\"\"\"\n\nimport json\nimport os\nimport subprocess\nimport sys\nfrom importlib import util\nfrom pathlib import Path\n\nimport pkg_resources\nimport requests\nfrom pkg_resources import DistributionNotFound\n\nfrom gpt_index.readers.base import BaseReader\n\nLOADER_HUB_URL = (\n    \"https://raw.githubusercontent.com/emptycrown/loader-hub/main/loader_hub\"\n)\n\n\ndef download_loader(loader_class: str) -> BaseReader:\n    \"\"\"Download a single loader from the Loader Hub.\n\n    Args:\n        loader_class: The name of the loader class you want to download,\n            such as `SimpleWebPageReader`.\n    Returns:\n        A Loader.\n    \"\"\"\n    response = requests.get(f\"{LOADER_HUB_URL}/library.json\")\n    library = json.loads(response.text)\n\n    # Look up the loader id (e.g. `web/simple_web`)\n    loader_id = library[loader_class][\"id\"]\n    dirpath = \".modules\"\n    loader_filename = loader_id.replace(\"/\", \"-\")\n    loader_path = f\"{dirpath}/{loader_filename}.py\"\n    requirements_path", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/download.py", "file_name": "download.py"}, "index": 0, "child_indices": [], "ref_doc_id": "71585e29180e9ae11f0774b391bf9fd877e5ac54", "node_info": null}, "1": {"text": "   requirements_path = f\"{dirpath}/{loader_filename}_requirements.txt\"\n\n    if not os.path.exists(dirpath):\n        # Create a new directory because it does not exist\n        os.makedirs(dirpath)\n\n    if not os.path.exists(loader_path):\n        response = requests.get(f\"{LOADER_HUB_URL}/{loader_id}/base.py\")\n        with open(loader_path, \"w\") as f:\n            f.write(response.text)\n\n    if not os.path.exists(requirements_path):\n        response = requests.get(f\"{LOADER_HUB_URL}/{loader_id}/requirements.txt\")\n        if response.status_code == 200:\n            with open(requirements_path, \"w\") as f:\n                f.write(response.text)\n\n    # Install dependencies if there are any and not already installed\n    if os.path.exists(requirements_path):\n        try:\n           ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/download.py", "file_name": "download.py"}, "index": 1, "child_indices": [], "ref_doc_id": "71585e29180e9ae11f0774b391bf9fd877e5ac54", "node_info": null}, "2": {"text": "      try:\n            requirements = pkg_resources.parse_requirements(\n                Path(requirements_path).open()\n            )\n            pkg_resources.require([str(r) for r in requirements])\n        except DistributionNotFound:\n            subprocess.check_call(\n                [sys.executable, \"-m\", \"pip\", \"install\", \"-r\", requirements_path]\n            )\n\n    spec = util.spec_from_file_location(\"custom_loader\", location=loader_path)\n    if spec is None:\n        raise ValueError(f\"Could not find file: {loader_path}.\")\n    module = util.module_from_spec(spec)\n    spec.loader.exec_module(module)  # type: ignore\n\n    return getattr(module, loader_class)\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/download.py", "file_name": "download.py"}, "index": 2, "child_indices": [], "ref_doc_id": "71585e29180e9ae11f0774b391bf9fd877e5ac54", "node_info": null}, "3": {"text": "This code file is used to download a single loader from the Loader Hub. It uses the requests library to make a GET request to the Loader Hub URL and then parses the response into a JSON object. It then looks up the loader id and creates a new directory if it does not exist. It then downloads the base.py file and the requirements.txt file if they do not exist. It then uses the pkg_resources library to parse the requirements.txt file and install any dependencies that are not already installed. Finally, it uses the importlib library to load the module and return the loader class.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"3": {"text": "This code file is used to download a single loader from the Loader Hub. It uses the requests library to make a GET request to the Loader Hub URL and then parses the response into a JSON object. It then looks up the loader id and creates a new directory if it does not exist. It then downloads the base.py file and the requirements.txt file if they do not exist. It then uses the pkg_resources library to parse the requirements.txt file and install any dependencies that are not already installed. Finally, it uses the importlib library to load the module and return the loader class.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"71585e29180e9ae11f0774b391bf9fd877e5ac54": {"text": "\"\"\"Download loader from the Loader Hub.\"\"\"\n\nimport json\nimport os\nimport subprocess\nimport sys\nfrom importlib import util\nfrom pathlib import Path\n\nimport pkg_resources\nimport requests\nfrom pkg_resources import DistributionNotFound\n\nfrom gpt_index.readers.base import BaseReader\n\nLOADER_HUB_URL = (\n    \"https://raw.githubusercontent.com/emptycrown/loader-hub/main/loader_hub\"\n)\n\n\ndef download_loader(loader_class: str) -> BaseReader:\n    \"\"\"Download a single loader from the Loader Hub.\n\n    Args:\n        loader_class: The name of the loader class you want to download,\n            such as `SimpleWebPageReader`.\n    Returns:\n        A Loader.\n    \"\"\"\n    response = requests.get(f\"{LOADER_HUB_URL}/library.json\")\n    library = json.loads(response.text)\n\n    # Look up the loader id (e.g. `web/simple_web`)\n    loader_id = library[loader_class][\"id\"]\n    dirpath = \".modules\"\n    loader_filename = loader_id.replace(\"/\", \"-\")\n    loader_path = f\"{dirpath}/{loader_filename}.py\"\n    requirements_path = f\"{dirpath}/{loader_filename}_requirements.txt\"\n\n    if not os.path.exists(dirpath):\n        # Create a new directory because it does not exist\n        os.makedirs(dirpath)\n\n    if not os.path.exists(loader_path):\n        response = requests.get(f\"{LOADER_HUB_URL}/{loader_id}/base.py\")\n        with open(loader_path, \"w\") as f:\n            f.write(response.text)\n\n    if not os.path.exists(requirements_path):\n        response = requests.get(f\"{LOADER_HUB_URL}/{loader_id}/requirements.txt\")\n        if response.status_code == 200:\n            with open(requirements_path, \"w\") as f:\n                f.write(response.text)\n\n    # Install dependencies if there are any and not already installed\n    if os.path.exists(requirements_path):\n        try:\n            requirements = pkg_resources.parse_requirements(\n                Path(requirements_path).open()\n            )\n            pkg_resources.require([str(r) for r in requirements])\n        except DistributionNotFound:\n            subprocess.check_call(\n                [sys.executable, \"-m\", \"pip\", \"install\", \"-r\", requirements_path]\n            )\n\n    spec = util.spec_from_file_location(\"custom_loader\", location=loader_path)\n    if spec is None:\n        raise ValueError(f\"Could not find file: {loader_path}.\")\n    module = util.module_from_spec(spec)\n    spec.loader.exec_module(module)  # type: ignore\n\n    return getattr(module, loader_class)\n", "doc_id": "71585e29180e9ae11f0774b391bf9fd877e5ac54", "embedding": null, "extra_info": {"file_path": "gpt_index/readers/download.py", "file_name": "download.py"}, "__type__": "Document"}, "0f42c286-dc51-4bc6-9036-95a77fd620bc": {"text": "\nThis code file provides a way to download a single loader from the Loader Hub, install any necessary dependencies, and return the loader class. It uses the requests library to make a GET request to the Loader Hub URL and parse the response into a JSON object. It then looks up the loader id and creates a new directory if it does not exist. It then downloads the base.py file and the requirements.txt file if they do not exist. The pkg_resources library is used to parse the requirements.txt file and install any dependencies that are not already installed. Finally, the importlib library is used to load the module and return the loader class.", "doc_id": "0f42c286-dc51-4bc6-9036-95a77fd620bc", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Download loader from the Loader Hub.\"\"\"\n\nimport json\nimport os\nimport subprocess\nimport sys\nfrom importlib import util\nfrom pathlib import Path\n\nimport pkg_resources\nimport requests\nfrom pkg_resources import DistributionNotFound\n\nfrom gpt_index.readers.base import BaseReader\n\nLOADER_HUB_URL = (\n    \"https://raw.githubusercontent.com/emptycrown/loader-hub/main/loader_hub\"\n)\n\n\ndef download_loader(loader_class: str) -> BaseReader:\n    \"\"\"Download a single loader from the Loader Hub.\n\n    Args:\n        loader_class: The name of the loader class you want to download,\n            such as `SimpleWebPageReader`.\n    Returns:\n        A Loader.\n    \"\"\"\n    response = requests.get(f\"{LOADER_HUB_URL}/library.json\")\n    library = json.loads(response.text)\n\n    # Look up the loader id (e.g. `web/simple_web`)\n    loader_id = library[loader_class][\"id\"]\n    dirpath = \".modules\"\n    loader_filename = loader_id.replace(\"/\", \"-\")\n    loader_path = f\"{dirpath}/{loader_filename}.py\"\n    requirements_path", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/download.py", "file_name": "download.py"}, "index": 0, "child_indices": [], "ref_doc_id": "71585e29180e9ae11f0774b391bf9fd877e5ac54", "node_info": null}, "1": {"text": "   requirements_path = f\"{dirpath}/{loader_filename}_requirements.txt\"\n\n    if not os.path.exists(dirpath):\n        # Create a new directory because it does not exist\n        os.makedirs(dirpath)\n\n    if not os.path.exists(loader_path):\n        response = requests.get(f\"{LOADER_HUB_URL}/{loader_id}/base.py\")\n        with open(loader_path, \"w\") as f:\n            f.write(response.text)\n\n    if not os.path.exists(requirements_path):\n        response = requests.get(f\"{LOADER_HUB_URL}/{loader_id}/requirements.txt\")\n        if response.status_code == 200:\n            with open(requirements_path, \"w\") as f:\n                f.write(response.text)\n\n    # Install dependencies if there are any and not already installed\n    if os.path.exists(requirements_path):\n        try:\n           ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/download.py", "file_name": "download.py"}, "index": 1, "child_indices": [], "ref_doc_id": "71585e29180e9ae11f0774b391bf9fd877e5ac54", "node_info": null}, "2": {"text": "      try:\n            requirements = pkg_resources.parse_requirements(\n                Path(requirements_path).open()\n            )\n            pkg_resources.require([str(r) for r in requirements])\n        except DistributionNotFound:\n            subprocess.check_call(\n                [sys.executable, \"-m\", \"pip\", \"install\", \"-r\", requirements_path]\n            )\n\n    spec = util.spec_from_file_location(\"custom_loader\", location=loader_path)\n    if spec is None:\n        raise ValueError(f\"Could not find file: {loader_path}.\")\n    module = util.module_from_spec(spec)\n    spec.loader.exec_module(module)  # type: ignore\n\n    return getattr(module, loader_class)\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/download.py", "file_name": "download.py"}, "index": 2, "child_indices": [], "ref_doc_id": "71585e29180e9ae11f0774b391bf9fd877e5ac54", "node_info": null}, "3": {"text": "This code file is used to download a single loader from the Loader Hub. It uses the requests library to make a GET request to the Loader Hub URL and then parses the response into a JSON object. It then looks up the loader id and creates a new directory if it does not exist. It then downloads the base.py file and the requirements.txt file if they do not exist. It then uses the pkg_resources library to parse the requirements.txt file and install any dependencies that are not already installed. Finally, it uses the importlib library to load the module and return the loader class.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"3": {"text": "This code file is used to download a single loader from the Loader Hub. It uses the requests library to make a GET request to the Loader Hub URL and then parses the response into a JSON object. It then looks up the loader id and creates a new directory if it does not exist. It then downloads the base.py file and the requirements.txt file if they do not exist. It then uses the pkg_resources library to parse the requirements.txt file and install any dependencies that are not already installed. Finally, it uses the importlib library to load the module and return the loader class.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}