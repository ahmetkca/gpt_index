{"index_struct": {"text": "\nThe FaissReader class from the gpt_index/readers/faiss.py file provides a way to retrieve documents from an existing in-memory Faiss index. It takes a Faiss Index object as an argument and provides a load_data() method that takes a 2D numpy array of query vectors, a map from ID's to text, and an optional k parameter for the number of nearest neighbors to retrieve. The load_data() method returns a list of documents, which can be joined into one document if the separate_documents parameter is set to False. The FaissReader class is useful for quickly retrieving documents from an existing Faiss index and using them in a downstream GPT Index data structure. The FaissReader class provides a convenient way to access documents stored in a Faiss index, allowing for efficient retrieval of documents based on query vectors.", "doc_id": "a87326bc-ea42-46f4-bcfc-4883df5fbb5c", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Faiss reader.\"\"\"\n\nfrom typing import Any, Dict, List\n\nimport numpy as np\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\n\nclass FaissReader(BaseReader):\n    \"\"\"Faiss reader.\n\n    Retrieves documents through an existing in-memory Faiss index.\n    These documents can then be used in a downstream GPT Index data structure.\n    If you wish use Faiss itself as an index to to organize documents,\n    insert documents, and perform queries on them, please use GPTFaissIndex.\n\n    Args:\n        faiss_index (faiss.Index): A Faiss Index object (required)\n\n    \"\"\"\n\n    def __init__(self, index: Any):\n        \"\"\"Initialize with parameters.\"\"\"\n        import_err_msg = \"\"\"\n            `faiss` package not found. For instructions on\n            how to install `faiss` please visit\n            https://github.com/facebookresearch/faiss/wiki/Installing-Faiss\n        \"\"\"\n        try:\n      ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/faiss.py", "file_name": "faiss.py"}, "index": 0, "child_indices": [], "ref_doc_id": "82f076eb7558c8648d1b13d5ccec126b5cb6a5f3", "node_info": null}, "1": {"text": "  \"\"\"\n        try:\n            import faiss  # noqa: F401\n        except ImportError:\n            raise ValueError(import_err_msg)\n\n        self._index = index\n\n    def load_data(\n        self,\n        query: np.ndarray,\n        id_to_text_map: Dict[str, str],\n        k: int = 4,\n        separate_documents: bool = True,\n    ) -> List[Document]:\n        \"\"\"Load data from Faiss.\n\n        Args:\n            query (np.ndarray): A 2D numpy array of query vectors.\n            id_to_text_map (Dict[str, str]): A map from ID's to text.\n            k (int): Number of nearest neighbors to retrieve. Defaults to 4.\n            separate_documents (Optional[bool]): Whether to return separate\n               ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/faiss.py", "file_name": "faiss.py"}, "index": 1, "child_indices": [], "ref_doc_id": "82f076eb7558c8648d1b13d5ccec126b5cb6a5f3", "node_info": null}, "2": {"text": "to return separate\n                documents. Defaults to True.\n        Returns:\n            List[Document]: A list of documents.\n\n        \"\"\"\n        dists, indices = self._index.search(query, k)\n        documents = []\n        for qidx in range(indices.shape[0]):\n            for didx in range(indices.shape[1]):\n                doc_id = indices[qidx, didx]\n                if doc_id not in id_to_text_map:\n                    raise ValueError(\n                        f\"Document ID {doc_id} not found in id_to_text_map.\"\n                    )\n                text = id_to_text_map[doc_id]\n               ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/faiss.py", "file_name": "faiss.py"}, "index": 2, "child_indices": [], "ref_doc_id": "82f076eb7558c8648d1b13d5ccec126b5cb6a5f3", "node_info": null}, "3": {"text": "               documents.append(Document(text=text))\n\n        if not separate_documents:\n            # join all documents into one\n            text_list = [doc.get_text() for doc in documents]\n            text = \"\\n\\n\".join(text_list)\n            documents = [Document(text=text)]\n\n        return documents\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/faiss.py", "file_name": "faiss.py"}, "index": 3, "child_indices": [], "ref_doc_id": "82f076eb7558c8648d1b13d5ccec126b5cb6a5f3", "node_info": null}, "4": {"text": "FaissReader is a class from the gpt_index/readers/faiss.py file that retrieves documents from an existing in-memory Faiss index. It takes a Faiss Index object as an argument and provides a load_data() method that takes a 2D numpy array of query vectors, a map from ID's to text, and an optional k parameter for the number of nearest neighbors to retrieve. It returns a list of documents, which can be joined into one document if the separate_documents parameter is set to False.", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"4": {"text": "FaissReader is a class from the gpt_index/readers/faiss.py file that retrieves documents from an existing in-memory Faiss index. It takes a Faiss Index object as an argument and provides a load_data() method that takes a 2D numpy array of query vectors, a map from ID's to text, and an optional k parameter for the number of nearest neighbors to retrieve. It returns a list of documents, which can be joined into one document if the separate_documents parameter is set to False.", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"82f076eb7558c8648d1b13d5ccec126b5cb6a5f3": {"text": "\"\"\"Faiss reader.\"\"\"\n\nfrom typing import Any, Dict, List\n\nimport numpy as np\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\n\nclass FaissReader(BaseReader):\n    \"\"\"Faiss reader.\n\n    Retrieves documents through an existing in-memory Faiss index.\n    These documents can then be used in a downstream GPT Index data structure.\n    If you wish use Faiss itself as an index to to organize documents,\n    insert documents, and perform queries on them, please use GPTFaissIndex.\n\n    Args:\n        faiss_index (faiss.Index): A Faiss Index object (required)\n\n    \"\"\"\n\n    def __init__(self, index: Any):\n        \"\"\"Initialize with parameters.\"\"\"\n        import_err_msg = \"\"\"\n            `faiss` package not found. For instructions on\n            how to install `faiss` please visit\n            https://github.com/facebookresearch/faiss/wiki/Installing-Faiss\n        \"\"\"\n        try:\n            import faiss  # noqa: F401\n        except ImportError:\n            raise ValueError(import_err_msg)\n\n        self._index = index\n\n    def load_data(\n        self,\n        query: np.ndarray,\n        id_to_text_map: Dict[str, str],\n        k: int = 4,\n        separate_documents: bool = True,\n    ) -> List[Document]:\n        \"\"\"Load data from Faiss.\n\n        Args:\n            query (np.ndarray): A 2D numpy array of query vectors.\n            id_to_text_map (Dict[str, str]): A map from ID's to text.\n            k (int): Number of nearest neighbors to retrieve. Defaults to 4.\n            separate_documents (Optional[bool]): Whether to return separate\n                documents. Defaults to True.\n        Returns:\n            List[Document]: A list of documents.\n\n        \"\"\"\n        dists, indices = self._index.search(query, k)\n        documents = []\n        for qidx in range(indices.shape[0]):\n            for didx in range(indices.shape[1]):\n                doc_id = indices[qidx, didx]\n                if doc_id not in id_to_text_map:\n                    raise ValueError(\n                        f\"Document ID {doc_id} not found in id_to_text_map.\"\n                    )\n                text = id_to_text_map[doc_id]\n                documents.append(Document(text=text))\n\n        if not separate_documents:\n            # join all documents into one\n            text_list = [doc.get_text() for doc in documents]\n            text = \"\\n\\n\".join(text_list)\n            documents = [Document(text=text)]\n\n        return documents\n", "doc_id": "82f076eb7558c8648d1b13d5ccec126b5cb6a5f3", "embedding": null, "extra_info": {"file_path": "gpt_index/readers/faiss.py", "file_name": "faiss.py"}, "__type__": "Document"}, "a87326bc-ea42-46f4-bcfc-4883df5fbb5c": {"text": "\nThe FaissReader class from the gpt_index/readers/faiss.py file provides a way to retrieve documents from an existing in-memory Faiss index. It takes a Faiss Index object as an argument and provides a load_data() method that takes a 2D numpy array of query vectors, a map from ID's to text, and an optional k parameter for the number of nearest neighbors to retrieve. The load_data() method returns a list of documents, which can be joined into one document if the separate_documents parameter is set to False. The FaissReader class is useful for quickly retrieving documents from an existing Faiss index and using them in a downstream GPT Index data structure. The FaissReader class provides a convenient way to access documents stored in a Faiss index, allowing for efficient retrieval of documents based on query vectors.", "doc_id": "a87326bc-ea42-46f4-bcfc-4883df5fbb5c", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Faiss reader.\"\"\"\n\nfrom typing import Any, Dict, List\n\nimport numpy as np\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\n\nclass FaissReader(BaseReader):\n    \"\"\"Faiss reader.\n\n    Retrieves documents through an existing in-memory Faiss index.\n    These documents can then be used in a downstream GPT Index data structure.\n    If you wish use Faiss itself as an index to to organize documents,\n    insert documents, and perform queries on them, please use GPTFaissIndex.\n\n    Args:\n        faiss_index (faiss.Index): A Faiss Index object (required)\n\n    \"\"\"\n\n    def __init__(self, index: Any):\n        \"\"\"Initialize with parameters.\"\"\"\n        import_err_msg = \"\"\"\n            `faiss` package not found. For instructions on\n            how to install `faiss` please visit\n            https://github.com/facebookresearch/faiss/wiki/Installing-Faiss\n        \"\"\"\n        try:\n      ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/faiss.py", "file_name": "faiss.py"}, "index": 0, "child_indices": [], "ref_doc_id": "82f076eb7558c8648d1b13d5ccec126b5cb6a5f3", "node_info": null}, "1": {"text": "  \"\"\"\n        try:\n            import faiss  # noqa: F401\n        except ImportError:\n            raise ValueError(import_err_msg)\n\n        self._index = index\n\n    def load_data(\n        self,\n        query: np.ndarray,\n        id_to_text_map: Dict[str, str],\n        k: int = 4,\n        separate_documents: bool = True,\n    ) -> List[Document]:\n        \"\"\"Load data from Faiss.\n\n        Args:\n            query (np.ndarray): A 2D numpy array of query vectors.\n            id_to_text_map (Dict[str, str]): A map from ID's to text.\n            k (int): Number of nearest neighbors to retrieve. Defaults to 4.\n            separate_documents (Optional[bool]): Whether to return separate\n               ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/faiss.py", "file_name": "faiss.py"}, "index": 1, "child_indices": [], "ref_doc_id": "82f076eb7558c8648d1b13d5ccec126b5cb6a5f3", "node_info": null}, "2": {"text": "to return separate\n                documents. Defaults to True.\n        Returns:\n            List[Document]: A list of documents.\n\n        \"\"\"\n        dists, indices = self._index.search(query, k)\n        documents = []\n        for qidx in range(indices.shape[0]):\n            for didx in range(indices.shape[1]):\n                doc_id = indices[qidx, didx]\n                if doc_id not in id_to_text_map:\n                    raise ValueError(\n                        f\"Document ID {doc_id} not found in id_to_text_map.\"\n                    )\n                text = id_to_text_map[doc_id]\n               ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/faiss.py", "file_name": "faiss.py"}, "index": 2, "child_indices": [], "ref_doc_id": "82f076eb7558c8648d1b13d5ccec126b5cb6a5f3", "node_info": null}, "3": {"text": "               documents.append(Document(text=text))\n\n        if not separate_documents:\n            # join all documents into one\n            text_list = [doc.get_text() for doc in documents]\n            text = \"\\n\\n\".join(text_list)\n            documents = [Document(text=text)]\n\n        return documents\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/faiss.py", "file_name": "faiss.py"}, "index": 3, "child_indices": [], "ref_doc_id": "82f076eb7558c8648d1b13d5ccec126b5cb6a5f3", "node_info": null}, "4": {"text": "FaissReader is a class from the gpt_index/readers/faiss.py file that retrieves documents from an existing in-memory Faiss index. It takes a Faiss Index object as an argument and provides a load_data() method that takes a 2D numpy array of query vectors, a map from ID's to text, and an optional k parameter for the number of nearest neighbors to retrieve. It returns a list of documents, which can be joined into one document if the separate_documents parameter is set to False.", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"4": {"text": "FaissReader is a class from the gpt_index/readers/faiss.py file that retrieves documents from an existing in-memory Faiss index. It takes a Faiss Index object as an argument and provides a load_data() method that takes a 2D numpy array of query vectors, a map from ID's to text, and an optional k parameter for the number of nearest neighbors to retrieve. It returns a list of documents, which can be joined into one document if the separate_documents parameter is set to False.", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}