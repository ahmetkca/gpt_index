{"index_struct": {"text": "\nDocs parser is a Python file containing two classes, PDFParser and DocxParser, which both inherit from the BaseParser class. The PDFParser class uses the PyPDF2 library to extract text from a PDF file, while the DocxParser class uses the docx2txt library to extract text from a Microsoft Word file. Both classes have a parse_file() method which takes a file path and an optional errors argument and returns the extracted text. The purpose of this code is to provide a way to parse docx and pdf files and extract the text from them. The code uses the PyPDF2 and docx2txt libraries to do this, and the parse_file() method is used to parse the files and return the extracted text.", "doc_id": "6c41b2bf-dd79-4fce-a744-e93ef28e0df8", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Docs parser.\n\nContains parsers for docx, pdf files.\n\n\"\"\"\nfrom pathlib import Path\nfrom typing import Dict\n\nfrom gpt_index.readers.file.base_parser import BaseParser\n\n\nclass PDFParser(BaseParser):\n    \"\"\"PDF parser.\"\"\"\n\n    def _init_parser(self) -> Dict:\n        \"\"\"Init parser.\"\"\"\n        return {}\n\n    def parse_file(self, file: Path, errors: str = \"ignore\") -> str:\n        \"\"\"Parse file.\"\"\"\n        try:\n            import PyPDF2\n        except ImportError:\n            raise ValueError(\"PyPDF2 is required to read PDF files.\")\n        text_list = []\n        with open(file, \"rb\") as fp:\n            # Create a PDF object\n            pdf = PyPDF2.PdfReader(fp)\n\n            # Get the number of pages in the PDF document\n            num_pages = len(pdf.pages)\n\n            #", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/docs_parser.py", "file_name": "docs_parser.py"}, "index": 0, "child_indices": [], "ref_doc_id": "ac3dce9de6352d92aa69fdf67294da228f5085c3", "node_info": null}, "1": {"text": "= len(pdf.pages)\n\n            # Iterate over every page\n            for page in range(num_pages):\n                # Extract the text from the page\n                page_text = pdf.pages[page].extract_text()\n                text_list.append(page_text)\n        text = \"\\n\".join(text_list)\n\n        return text\n\n\nclass DocxParser(BaseParser):\n    \"\"\"Docx parser.\"\"\"\n\n    def _init_parser(self) -> Dict:\n        \"\"\"Init parser.\"\"\"\n        return {}\n\n    def parse_file(self, file: Path, errors: str = \"ignore\") -> str:\n        \"\"\"Parse file.\"\"\"\n        try:\n            import docx2txt\n        except ImportError:\n            raise ValueError(\"docx2txt is required to read Microsoft Word files.\")\n\n        text = docx2txt.process(file)\n\n   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/docs_parser.py", "file_name": "docs_parser.py"}, "index": 1, "child_indices": [], "ref_doc_id": "ac3dce9de6352d92aa69fdf67294da228f5085c3", "node_info": null}, "2": {"text": "     text = docx2txt.process(file)\n\n        return text\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/docs_parser.py", "file_name": "docs_parser.py"}, "index": 2, "child_indices": [], "ref_doc_id": "ac3dce9de6352d92aa69fdf67294da228f5085c3", "node_info": null}, "3": {"text": "Docs parser is a Python file containing parsers for docx and pdf files. It contains two classes, PDFParser and DocxParser, which both inherit from the BaseParser class. The PDFParser class uses the PyPDF2 library to extract text from a PDF file, while the DocxParser class uses the docx2txt library to extract text from a Microsoft Word file. Both classes have a parse_file() method which takes a file path and an optional errors argument and returns the extracted text.", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"3": {"text": "Docs parser is a Python file containing parsers for docx and pdf files. It contains two classes, PDFParser and DocxParser, which both inherit from the BaseParser class. The PDFParser class uses the PyPDF2 library to extract text from a PDF file, while the DocxParser class uses the docx2txt library to extract text from a Microsoft Word file. Both classes have a parse_file() method which takes a file path and an optional errors argument and returns the extracted text.", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"ac3dce9de6352d92aa69fdf67294da228f5085c3": {"text": "\"\"\"Docs parser.\n\nContains parsers for docx, pdf files.\n\n\"\"\"\nfrom pathlib import Path\nfrom typing import Dict\n\nfrom gpt_index.readers.file.base_parser import BaseParser\n\n\nclass PDFParser(BaseParser):\n    \"\"\"PDF parser.\"\"\"\n\n    def _init_parser(self) -> Dict:\n        \"\"\"Init parser.\"\"\"\n        return {}\n\n    def parse_file(self, file: Path, errors: str = \"ignore\") -> str:\n        \"\"\"Parse file.\"\"\"\n        try:\n            import PyPDF2\n        except ImportError:\n            raise ValueError(\"PyPDF2 is required to read PDF files.\")\n        text_list = []\n        with open(file, \"rb\") as fp:\n            # Create a PDF object\n            pdf = PyPDF2.PdfReader(fp)\n\n            # Get the number of pages in the PDF document\n            num_pages = len(pdf.pages)\n\n            # Iterate over every page\n            for page in range(num_pages):\n                # Extract the text from the page\n                page_text = pdf.pages[page].extract_text()\n                text_list.append(page_text)\n        text = \"\\n\".join(text_list)\n\n        return text\n\n\nclass DocxParser(BaseParser):\n    \"\"\"Docx parser.\"\"\"\n\n    def _init_parser(self) -> Dict:\n        \"\"\"Init parser.\"\"\"\n        return {}\n\n    def parse_file(self, file: Path, errors: str = \"ignore\") -> str:\n        \"\"\"Parse file.\"\"\"\n        try:\n            import docx2txt\n        except ImportError:\n            raise ValueError(\"docx2txt is required to read Microsoft Word files.\")\n\n        text = docx2txt.process(file)\n\n        return text\n", "doc_id": "ac3dce9de6352d92aa69fdf67294da228f5085c3", "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/docs_parser.py", "file_name": "docs_parser.py"}, "__type__": "Document"}, "6c41b2bf-dd79-4fce-a744-e93ef28e0df8": {"text": "\nDocs parser is a Python file containing two classes, PDFParser and DocxParser, which both inherit from the BaseParser class. The PDFParser class uses the PyPDF2 library to extract text from a PDF file, while the DocxParser class uses the docx2txt library to extract text from a Microsoft Word file. Both classes have a parse_file() method which takes a file path and an optional errors argument and returns the extracted text. The purpose of this code is to provide a way to parse docx and pdf files and extract the text from them. The code uses the PyPDF2 and docx2txt libraries to do this, and the parse_file() method is used to parse the files and return the extracted text.", "doc_id": "6c41b2bf-dd79-4fce-a744-e93ef28e0df8", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Docs parser.\n\nContains parsers for docx, pdf files.\n\n\"\"\"\nfrom pathlib import Path\nfrom typing import Dict\n\nfrom gpt_index.readers.file.base_parser import BaseParser\n\n\nclass PDFParser(BaseParser):\n    \"\"\"PDF parser.\"\"\"\n\n    def _init_parser(self) -> Dict:\n        \"\"\"Init parser.\"\"\"\n        return {}\n\n    def parse_file(self, file: Path, errors: str = \"ignore\") -> str:\n        \"\"\"Parse file.\"\"\"\n        try:\n            import PyPDF2\n        except ImportError:\n            raise ValueError(\"PyPDF2 is required to read PDF files.\")\n        text_list = []\n        with open(file, \"rb\") as fp:\n            # Create a PDF object\n            pdf = PyPDF2.PdfReader(fp)\n\n            # Get the number of pages in the PDF document\n            num_pages = len(pdf.pages)\n\n            #", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/docs_parser.py", "file_name": "docs_parser.py"}, "index": 0, "child_indices": [], "ref_doc_id": "ac3dce9de6352d92aa69fdf67294da228f5085c3", "node_info": null}, "1": {"text": "= len(pdf.pages)\n\n            # Iterate over every page\n            for page in range(num_pages):\n                # Extract the text from the page\n                page_text = pdf.pages[page].extract_text()\n                text_list.append(page_text)\n        text = \"\\n\".join(text_list)\n\n        return text\n\n\nclass DocxParser(BaseParser):\n    \"\"\"Docx parser.\"\"\"\n\n    def _init_parser(self) -> Dict:\n        \"\"\"Init parser.\"\"\"\n        return {}\n\n    def parse_file(self, file: Path, errors: str = \"ignore\") -> str:\n        \"\"\"Parse file.\"\"\"\n        try:\n            import docx2txt\n        except ImportError:\n            raise ValueError(\"docx2txt is required to read Microsoft Word files.\")\n\n        text = docx2txt.process(file)\n\n   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/docs_parser.py", "file_name": "docs_parser.py"}, "index": 1, "child_indices": [], "ref_doc_id": "ac3dce9de6352d92aa69fdf67294da228f5085c3", "node_info": null}, "2": {"text": "     text = docx2txt.process(file)\n\n        return text\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/docs_parser.py", "file_name": "docs_parser.py"}, "index": 2, "child_indices": [], "ref_doc_id": "ac3dce9de6352d92aa69fdf67294da228f5085c3", "node_info": null}, "3": {"text": "Docs parser is a Python file containing parsers for docx and pdf files. It contains two classes, PDFParser and DocxParser, which both inherit from the BaseParser class. The PDFParser class uses the PyPDF2 library to extract text from a PDF file, while the DocxParser class uses the docx2txt library to extract text from a Microsoft Word file. Both classes have a parse_file() method which takes a file path and an optional errors argument and returns the extracted text.", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"3": {"text": "Docs parser is a Python file containing parsers for docx and pdf files. It contains two classes, PDFParser and DocxParser, which both inherit from the BaseParser class. The PDFParser class uses the PyPDF2 library to extract text from a PDF file, while the DocxParser class uses the docx2txt library to extract text from a Microsoft Word file. Both classes have a parse_file() method which takes a file path and an optional errors argument and returns the extracted text.", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}