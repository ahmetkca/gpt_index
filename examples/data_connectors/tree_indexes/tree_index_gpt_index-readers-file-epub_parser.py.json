{"index_struct": {"text": "\nEpubParser is a class that provides a parser for epub files. It is a subclass of BaseParser and implements two methods: _init_parser and parse_file. The _init_parser method initializes the parser and the parse_file method uses the EbookLib and html2text libraries to read and parse the epub file. The parse_file method iterates through all chapters in the epub file and extracts the text content from each chapter. The extracted text is then joined together and returned. The purpose of this code is to provide a parser for epub files that can extract the text content from the file.", "doc_id": "1c92f871-e664-459d-a07a-78c35e0342b2", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Epub parser.\n\nContains parsers for epub files.\n\"\"\"\n\nfrom pathlib import Path\nfrom typing import Dict\n\nfrom gpt_index.readers.file.base_parser import BaseParser\n\n\nclass EpubParser(BaseParser):\n    \"\"\"Epub Parser.\"\"\"\n\n    def _init_parser(self) -> Dict:\n        \"\"\"Init parser.\"\"\"\n        return {}\n\n    def parse_file(self, file: Path, errors: str = \"ignore\") -> str:\n        \"\"\"Parse file.\"\"\"\n        try:\n            import ebooklib\n            from ebooklib import epub\n        except ImportError:\n            raise ValueError(\"`EbookLib` is required to read Epub files.\")\n        try:\n            import html2text\n        except ImportError:\n            raise ValueError(\"`html2text` is required to parse Epub files.\")\n\n        text_list = []\n        book = epub.read_epub(file, options={\"ignore_ncx\":", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/epub_parser.py", "file_name": "epub_parser.py"}, "index": 0, "child_indices": [], "ref_doc_id": "d04f28177f58cd45629b425083bd5affd6fba442", "node_info": null}, "1": {"text": "book = epub.read_epub(file, options={\"ignore_ncx\": True})\n\n        # Iterate through all chapters.\n        for item in book.get_items():\n            # Chapters are typically located in epub documents items.\n            if item.get_type() == ebooklib.ITEM_DOCUMENT:\n                text_list.append(\n                    html2text.html2text(item.get_content().decode(\"utf-8\"))\n                )\n\n        text = \"\\n\".join(text_list)\n        return text\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/epub_parser.py", "file_name": "epub_parser.py"}, "index": 1, "child_indices": [], "ref_doc_id": "d04f28177f58cd45629b425083bd5affd6fba442", "node_info": null}, "2": {"text": "EpubParser is a class that contains parsers for epub files. It is a subclass of BaseParser and implements the _init_parser and parse_file methods. The _init_parser method initializes the parser and the parse_file method parses the epub file. It uses the EbookLib and html2text libraries to read and parse the epub file. The parse_file method iterates through all chapters in the epub file and extracts the text content from each chapter. The extracted text is then joined together and returned.", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"2": {"text": "EpubParser is a class that contains parsers for epub files. It is a subclass of BaseParser and implements the _init_parser and parse_file methods. The _init_parser method initializes the parser and the parse_file method parses the epub file. It uses the EbookLib and html2text libraries to read and parse the epub file. The parse_file method iterates through all chapters in the epub file and extracts the text content from each chapter. The extracted text is then joined together and returned.", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"d04f28177f58cd45629b425083bd5affd6fba442": {"text": "\"\"\"Epub parser.\n\nContains parsers for epub files.\n\"\"\"\n\nfrom pathlib import Path\nfrom typing import Dict\n\nfrom gpt_index.readers.file.base_parser import BaseParser\n\n\nclass EpubParser(BaseParser):\n    \"\"\"Epub Parser.\"\"\"\n\n    def _init_parser(self) -> Dict:\n        \"\"\"Init parser.\"\"\"\n        return {}\n\n    def parse_file(self, file: Path, errors: str = \"ignore\") -> str:\n        \"\"\"Parse file.\"\"\"\n        try:\n            import ebooklib\n            from ebooklib import epub\n        except ImportError:\n            raise ValueError(\"`EbookLib` is required to read Epub files.\")\n        try:\n            import html2text\n        except ImportError:\n            raise ValueError(\"`html2text` is required to parse Epub files.\")\n\n        text_list = []\n        book = epub.read_epub(file, options={\"ignore_ncx\": True})\n\n        # Iterate through all chapters.\n        for item in book.get_items():\n            # Chapters are typically located in epub documents items.\n            if item.get_type() == ebooklib.ITEM_DOCUMENT:\n                text_list.append(\n                    html2text.html2text(item.get_content().decode(\"utf-8\"))\n                )\n\n        text = \"\\n\".join(text_list)\n        return text\n", "doc_id": "d04f28177f58cd45629b425083bd5affd6fba442", "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/epub_parser.py", "file_name": "epub_parser.py"}, "__type__": "Document"}, "1c92f871-e664-459d-a07a-78c35e0342b2": {"text": "\nEpubParser is a class that provides a parser for epub files. It is a subclass of BaseParser and implements two methods: _init_parser and parse_file. The _init_parser method initializes the parser and the parse_file method uses the EbookLib and html2text libraries to read and parse the epub file. The parse_file method iterates through all chapters in the epub file and extracts the text content from each chapter. The extracted text is then joined together and returned. The purpose of this code is to provide a parser for epub files that can extract the text content from the file.", "doc_id": "1c92f871-e664-459d-a07a-78c35e0342b2", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Epub parser.\n\nContains parsers for epub files.\n\"\"\"\n\nfrom pathlib import Path\nfrom typing import Dict\n\nfrom gpt_index.readers.file.base_parser import BaseParser\n\n\nclass EpubParser(BaseParser):\n    \"\"\"Epub Parser.\"\"\"\n\n    def _init_parser(self) -> Dict:\n        \"\"\"Init parser.\"\"\"\n        return {}\n\n    def parse_file(self, file: Path, errors: str = \"ignore\") -> str:\n        \"\"\"Parse file.\"\"\"\n        try:\n            import ebooklib\n            from ebooklib import epub\n        except ImportError:\n            raise ValueError(\"`EbookLib` is required to read Epub files.\")\n        try:\n            import html2text\n        except ImportError:\n            raise ValueError(\"`html2text` is required to parse Epub files.\")\n\n        text_list = []\n        book = epub.read_epub(file, options={\"ignore_ncx\":", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/epub_parser.py", "file_name": "epub_parser.py"}, "index": 0, "child_indices": [], "ref_doc_id": "d04f28177f58cd45629b425083bd5affd6fba442", "node_info": null}, "1": {"text": "book = epub.read_epub(file, options={\"ignore_ncx\": True})\n\n        # Iterate through all chapters.\n        for item in book.get_items():\n            # Chapters are typically located in epub documents items.\n            if item.get_type() == ebooklib.ITEM_DOCUMENT:\n                text_list.append(\n                    html2text.html2text(item.get_content().decode(\"utf-8\"))\n                )\n\n        text = \"\\n\".join(text_list)\n        return text\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/epub_parser.py", "file_name": "epub_parser.py"}, "index": 1, "child_indices": [], "ref_doc_id": "d04f28177f58cd45629b425083bd5affd6fba442", "node_info": null}, "2": {"text": "EpubParser is a class that contains parsers for epub files. It is a subclass of BaseParser and implements the _init_parser and parse_file methods. The _init_parser method initializes the parser and the parse_file method parses the epub file. It uses the EbookLib and html2text libraries to read and parse the epub file. The parse_file method iterates through all chapters in the epub file and extracts the text content from each chapter. The extracted text is then joined together and returned.", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"2": {"text": "EpubParser is a class that contains parsers for epub files. It is a subclass of BaseParser and implements the _init_parser and parse_file methods. The _init_parser method initializes the parser and the parse_file method parses the epub file. It uses the EbookLib and html2text libraries to read and parse the epub file. The parse_file method iterates through all chapters in the epub file and extracts the text content from each chapter. The extracted text is then joined together and returned.", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}