{"index_struct": {"text": "\nMarkdownParser is a class that parses markdown files and returns a dictionary with keys as headers and values as the text between headers. It has an init method to set parameters for the parser, such as whether to remove hyperlinks and images from the text. It also has methods to remove hyperlinks and images from the text, convert the markdown file to a dictionary, and parse the file into a string. The parse_tups method takes a filepath and returns a list of tuples, where each tuple contains an optional header and the text between the header. The parse_file method takes a filepath and returns a list of strings, where each string contains the text between the headers. The purpose of this class is to provide a way to extract text from markdown files. It uses algorithms to parse the file into a dictionary and a list of tuples or strings, depending on the method used. The data structure used is a dictionary, and the relationships between functions, classes, and variables are defined in the init method.", "doc_id": "85998f65-5aac-4985-b376-08a0b65b2f89", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Markdown parser.\n\nContains parser for md files.\n\n\"\"\"\nimport re\nfrom pathlib import Path\nfrom typing import Any, Dict, List, Optional, Tuple, Union, cast\n\nfrom gpt_index.readers.file.base_parser import BaseParser\n\n\nclass MarkdownParser(BaseParser):\n    \"\"\"Markdown parser.\n\n    Extract text from markdown files.\n    Returns dictionary with keys as headers and values as the text between headers.\n\n    \"\"\"\n\n    def __init__(\n        self,\n        *args: Any,\n        remove_hyperlinks: bool = True,\n        remove_images: bool = True,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Init params.\"\"\"\n        super().__init__(*args, **kwargs)\n        self._remove_hyperlinks = remove_hyperlinks\n        self._remove_images = remove_images\n\n    def markdown_to_tups(self, markdown_text: str) -> List[Tuple[Optional[str], str]]:\n        \"\"\"Convert a markdown file to a dictionary.\n\n        The keys are the headers", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/markdown_parser.py", "file_name": "markdown_parser.py"}, "index": 0, "child_indices": [], "ref_doc_id": "2785c7a340d0f872e5864e0c02e6ff6f150de538", "node_info": null}, "1": {"text": "file to a dictionary.\n\n        The keys are the headers and the values are the text under each header.\n\n        \"\"\"\n        markdown_tups: List[Tuple[Optional[str], str]] = []\n        lines = markdown_text.split(\"\\n\")\n\n        current_header = None\n        current_text = \"\"\n\n        for line in lines:\n            header_match = re.match(r\"^#+\\s\", line)\n            if header_match:\n                if current_header is not None:\n                    if current_text == \"\" or None:\n                        continue\n                    markdown_tups.append((current_header, current_text))\n\n                current_header = line\n                current_text = \"\"\n            else:\n  ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/markdown_parser.py", "file_name": "markdown_parser.py"}, "index": 1, "child_indices": [], "ref_doc_id": "2785c7a340d0f872e5864e0c02e6ff6f150de538", "node_info": null}, "2": {"text": "= \"\"\n            else:\n                current_text += line + \"\\n\"\n        markdown_tups.append((current_header, current_text))\n\n        if current_header is not None:\n            # pass linting, assert keys are defined\n            markdown_tups = [\n                (re.sub(r\"#\", \"\", cast(str, key)).strip(), re.sub(r\"<.*?>\", \"\", value))\n                for key, value in markdown_tups\n            ]\n        else:\n            markdown_tups = [\n                (key, re.sub(\"\\n\", \"\", value)) for key, value in markdown_tups\n            ]\n\n        return markdown_tups\n\n    def remove_images(self, content: str) -> str:\n        \"\"\"Get a dictionary of a markdown file", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/markdown_parser.py", "file_name": "markdown_parser.py"}, "index": 2, "child_indices": [], "ref_doc_id": "2785c7a340d0f872e5864e0c02e6ff6f150de538", "node_info": null}, "3": {"text": "str:\n        \"\"\"Get a dictionary of a markdown file from its path.\"\"\"\n        pattern = r\"!{1}\\[\\[(.*)\\]\\]\"\n        content = re.sub(pattern, \"\", content)\n        return content\n\n    def remove_hyperlinks(self, content: str) -> str:\n        \"\"\"Get a dictionary of a markdown file from its path.\"\"\"\n        pattern = r\"\\[(.*?)\\]\\((.*?)\\)\"\n        content = re.sub(pattern, r\"\\1\", content)\n        return content\n\n    def _init_parser(self) -> Dict:\n        \"\"\"Initialize the parser with the config.\"\"\"\n        return {}\n\n    def parse_tups(\n        self, filepath: Path, errors: str = \"ignore\"\n    ) -> List[Tuple[Optional[str], str]]:\n        \"\"\"Parse file into tuples.\"\"\"\n        with open(filepath, \"r\") as f:\n            content = f.read()\n        if", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/markdown_parser.py", "file_name": "markdown_parser.py"}, "index": 3, "child_indices": [], "ref_doc_id": "2785c7a340d0f872e5864e0c02e6ff6f150de538", "node_info": null}, "4": {"text": "     content = f.read()\n        if self._remove_hyperlinks:\n            content = self.remove_hyperlinks(content)\n        if self._remove_images:\n            content = self.remove_images(content)\n        markdown_tups = self.markdown_to_tups(content)\n        return markdown_tups\n\n    def parse_file(\n        self, filepath: Path, errors: str = \"ignore\"\n    ) -> Union[str, List[str]]:\n        \"\"\"Parse file into string.\"\"\"\n        tups = self.parse_tups(filepath, errors=errors)\n        results = []\n        # TODO: don't include headers right now\n        for header, value in tups:\n            if header is None:\n                results.append(value)\n            else:\n               ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/markdown_parser.py", "file_name": "markdown_parser.py"}, "index": 4, "child_indices": [], "ref_doc_id": "2785c7a340d0f872e5864e0c02e6ff6f150de538", "node_info": null}, "5": {"text": "  else:\n                results.append(f\"\\n\\n{header}\\n{value}\")\n        return results\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/markdown_parser.py", "file_name": "markdown_parser.py"}, "index": 5, "child_indices": [], "ref_doc_id": "2785c7a340d0f872e5864e0c02e6ff6f150de538", "node_info": null}, "6": {"text": "MarkdownParser is a class that parses markdown files and returns a dictionary with keys as headers and values as the text between headers. It has methods to remove hyperlinks and images from the text, convert the markdown file to a dictionary, and parse the file into a string. It also has an init method to set parameters for the parser.", "doc_id": null, "embedding": null, "extra_info": null, "index": 6, "child_indices": [0, 1, 2, 3, 4, 5], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"6": {"text": "MarkdownParser is a class that parses markdown files and returns a dictionary with keys as headers and values as the text between headers. It has methods to remove hyperlinks and images from the text, convert the markdown file to a dictionary, and parse the file into a string. It also has an init method to set parameters for the parser.", "doc_id": null, "embedding": null, "extra_info": null, "index": 6, "child_indices": [0, 1, 2, 3, 4, 5], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"2785c7a340d0f872e5864e0c02e6ff6f150de538": {"text": "\"\"\"Markdown parser.\n\nContains parser for md files.\n\n\"\"\"\nimport re\nfrom pathlib import Path\nfrom typing import Any, Dict, List, Optional, Tuple, Union, cast\n\nfrom gpt_index.readers.file.base_parser import BaseParser\n\n\nclass MarkdownParser(BaseParser):\n    \"\"\"Markdown parser.\n\n    Extract text from markdown files.\n    Returns dictionary with keys as headers and values as the text between headers.\n\n    \"\"\"\n\n    def __init__(\n        self,\n        *args: Any,\n        remove_hyperlinks: bool = True,\n        remove_images: bool = True,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Init params.\"\"\"\n        super().__init__(*args, **kwargs)\n        self._remove_hyperlinks = remove_hyperlinks\n        self._remove_images = remove_images\n\n    def markdown_to_tups(self, markdown_text: str) -> List[Tuple[Optional[str], str]]:\n        \"\"\"Convert a markdown file to a dictionary.\n\n        The keys are the headers and the values are the text under each header.\n\n        \"\"\"\n        markdown_tups: List[Tuple[Optional[str], str]] = []\n        lines = markdown_text.split(\"\\n\")\n\n        current_header = None\n        current_text = \"\"\n\n        for line in lines:\n            header_match = re.match(r\"^#+\\s\", line)\n            if header_match:\n                if current_header is not None:\n                    if current_text == \"\" or None:\n                        continue\n                    markdown_tups.append((current_header, current_text))\n\n                current_header = line\n                current_text = \"\"\n            else:\n                current_text += line + \"\\n\"\n        markdown_tups.append((current_header, current_text))\n\n        if current_header is not None:\n            # pass linting, assert keys are defined\n            markdown_tups = [\n                (re.sub(r\"#\", \"\", cast(str, key)).strip(), re.sub(r\"<.*?>\", \"\", value))\n                for key, value in markdown_tups\n            ]\n        else:\n            markdown_tups = [\n                (key, re.sub(\"\\n\", \"\", value)) for key, value in markdown_tups\n            ]\n\n        return markdown_tups\n\n    def remove_images(self, content: str) -> str:\n        \"\"\"Get a dictionary of a markdown file from its path.\"\"\"\n        pattern = r\"!{1}\\[\\[(.*)\\]\\]\"\n        content = re.sub(pattern, \"\", content)\n        return content\n\n    def remove_hyperlinks(self, content: str) -> str:\n        \"\"\"Get a dictionary of a markdown file from its path.\"\"\"\n        pattern = r\"\\[(.*?)\\]\\((.*?)\\)\"\n        content = re.sub(pattern, r\"\\1\", content)\n        return content\n\n    def _init_parser(self) -> Dict:\n        \"\"\"Initialize the parser with the config.\"\"\"\n        return {}\n\n    def parse_tups(\n        self, filepath: Path, errors: str = \"ignore\"\n    ) -> List[Tuple[Optional[str], str]]:\n        \"\"\"Parse file into tuples.\"\"\"\n        with open(filepath, \"r\") as f:\n            content = f.read()\n        if self._remove_hyperlinks:\n            content = self.remove_hyperlinks(content)\n        if self._remove_images:\n            content = self.remove_images(content)\n        markdown_tups = self.markdown_to_tups(content)\n        return markdown_tups\n\n    def parse_file(\n        self, filepath: Path, errors: str = \"ignore\"\n    ) -> Union[str, List[str]]:\n        \"\"\"Parse file into string.\"\"\"\n        tups = self.parse_tups(filepath, errors=errors)\n        results = []\n        # TODO: don't include headers right now\n        for header, value in tups:\n            if header is None:\n                results.append(value)\n            else:\n                results.append(f\"\\n\\n{header}\\n{value}\")\n        return results\n", "doc_id": "2785c7a340d0f872e5864e0c02e6ff6f150de538", "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/markdown_parser.py", "file_name": "markdown_parser.py"}, "__type__": "Document"}, "85998f65-5aac-4985-b376-08a0b65b2f89": {"text": "\nMarkdownParser is a class that parses markdown files and returns a dictionary with keys as headers and values as the text between headers. It has an init method to set parameters for the parser, such as whether to remove hyperlinks and images from the text. It also has methods to remove hyperlinks and images from the text, convert the markdown file to a dictionary, and parse the file into a string. The parse_tups method takes a filepath and returns a list of tuples, where each tuple contains an optional header and the text between the header. The parse_file method takes a filepath and returns a list of strings, where each string contains the text between the headers. The purpose of this class is to provide a way to extract text from markdown files. It uses algorithms to parse the file into a dictionary and a list of tuples or strings, depending on the method used. The data structure used is a dictionary, and the relationships between functions, classes, and variables are defined in the init method.", "doc_id": "85998f65-5aac-4985-b376-08a0b65b2f89", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Markdown parser.\n\nContains parser for md files.\n\n\"\"\"\nimport re\nfrom pathlib import Path\nfrom typing import Any, Dict, List, Optional, Tuple, Union, cast\n\nfrom gpt_index.readers.file.base_parser import BaseParser\n\n\nclass MarkdownParser(BaseParser):\n    \"\"\"Markdown parser.\n\n    Extract text from markdown files.\n    Returns dictionary with keys as headers and values as the text between headers.\n\n    \"\"\"\n\n    def __init__(\n        self,\n        *args: Any,\n        remove_hyperlinks: bool = True,\n        remove_images: bool = True,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Init params.\"\"\"\n        super().__init__(*args, **kwargs)\n        self._remove_hyperlinks = remove_hyperlinks\n        self._remove_images = remove_images\n\n    def markdown_to_tups(self, markdown_text: str) -> List[Tuple[Optional[str], str]]:\n        \"\"\"Convert a markdown file to a dictionary.\n\n        The keys are the headers", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/markdown_parser.py", "file_name": "markdown_parser.py"}, "index": 0, "child_indices": [], "ref_doc_id": "2785c7a340d0f872e5864e0c02e6ff6f150de538", "node_info": null}, "1": {"text": "file to a dictionary.\n\n        The keys are the headers and the values are the text under each header.\n\n        \"\"\"\n        markdown_tups: List[Tuple[Optional[str], str]] = []\n        lines = markdown_text.split(\"\\n\")\n\n        current_header = None\n        current_text = \"\"\n\n        for line in lines:\n            header_match = re.match(r\"^#+\\s\", line)\n            if header_match:\n                if current_header is not None:\n                    if current_text == \"\" or None:\n                        continue\n                    markdown_tups.append((current_header, current_text))\n\n                current_header = line\n                current_text = \"\"\n            else:\n  ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/markdown_parser.py", "file_name": "markdown_parser.py"}, "index": 1, "child_indices": [], "ref_doc_id": "2785c7a340d0f872e5864e0c02e6ff6f150de538", "node_info": null}, "2": {"text": "= \"\"\n            else:\n                current_text += line + \"\\n\"\n        markdown_tups.append((current_header, current_text))\n\n        if current_header is not None:\n            # pass linting, assert keys are defined\n            markdown_tups = [\n                (re.sub(r\"#\", \"\", cast(str, key)).strip(), re.sub(r\"<.*?>\", \"\", value))\n                for key, value in markdown_tups\n            ]\n        else:\n            markdown_tups = [\n                (key, re.sub(\"\\n\", \"\", value)) for key, value in markdown_tups\n            ]\n\n        return markdown_tups\n\n    def remove_images(self, content: str) -> str:\n        \"\"\"Get a dictionary of a markdown file", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/markdown_parser.py", "file_name": "markdown_parser.py"}, "index": 2, "child_indices": [], "ref_doc_id": "2785c7a340d0f872e5864e0c02e6ff6f150de538", "node_info": null}, "3": {"text": "str:\n        \"\"\"Get a dictionary of a markdown file from its path.\"\"\"\n        pattern = r\"!{1}\\[\\[(.*)\\]\\]\"\n        content = re.sub(pattern, \"\", content)\n        return content\n\n    def remove_hyperlinks(self, content: str) -> str:\n        \"\"\"Get a dictionary of a markdown file from its path.\"\"\"\n        pattern = r\"\\[(.*?)\\]\\((.*?)\\)\"\n        content = re.sub(pattern, r\"\\1\", content)\n        return content\n\n    def _init_parser(self) -> Dict:\n        \"\"\"Initialize the parser with the config.\"\"\"\n        return {}\n\n    def parse_tups(\n        self, filepath: Path, errors: str = \"ignore\"\n    ) -> List[Tuple[Optional[str], str]]:\n        \"\"\"Parse file into tuples.\"\"\"\n        with open(filepath, \"r\") as f:\n            content = f.read()\n        if", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/markdown_parser.py", "file_name": "markdown_parser.py"}, "index": 3, "child_indices": [], "ref_doc_id": "2785c7a340d0f872e5864e0c02e6ff6f150de538", "node_info": null}, "4": {"text": "     content = f.read()\n        if self._remove_hyperlinks:\n            content = self.remove_hyperlinks(content)\n        if self._remove_images:\n            content = self.remove_images(content)\n        markdown_tups = self.markdown_to_tups(content)\n        return markdown_tups\n\n    def parse_file(\n        self, filepath: Path, errors: str = \"ignore\"\n    ) -> Union[str, List[str]]:\n        \"\"\"Parse file into string.\"\"\"\n        tups = self.parse_tups(filepath, errors=errors)\n        results = []\n        # TODO: don't include headers right now\n        for header, value in tups:\n            if header is None:\n                results.append(value)\n            else:\n               ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/markdown_parser.py", "file_name": "markdown_parser.py"}, "index": 4, "child_indices": [], "ref_doc_id": "2785c7a340d0f872e5864e0c02e6ff6f150de538", "node_info": null}, "5": {"text": "  else:\n                results.append(f\"\\n\\n{header}\\n{value}\")\n        return results\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/markdown_parser.py", "file_name": "markdown_parser.py"}, "index": 5, "child_indices": [], "ref_doc_id": "2785c7a340d0f872e5864e0c02e6ff6f150de538", "node_info": null}, "6": {"text": "MarkdownParser is a class that parses markdown files and returns a dictionary with keys as headers and values as the text between headers. It has methods to remove hyperlinks and images from the text, convert the markdown file to a dictionary, and parse the file into a string. It also has an init method to set parameters for the parser.", "doc_id": null, "embedding": null, "extra_info": null, "index": 6, "child_indices": [0, 1, 2, 3, 4, 5], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"6": {"text": "MarkdownParser is a class that parses markdown files and returns a dictionary with keys as headers and values as the text between headers. It has methods to remove hyperlinks and images from the text, convert the markdown file to a dictionary, and parse the file into a string. It also has an init method to set parameters for the parser.", "doc_id": null, "embedding": null, "extra_info": null, "index": 6, "child_indices": [0, 1, 2, 3, 4, 5], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}