{"index_struct": {"text": "\nVideoAudioParser is a class that provides a simple and efficient way to extract text from video and audio files. It uses the OpenAI whisper model to transcribe the files, and can handle both mp3 and mp4 files. The class contains an init method to initialize the parser, and a parse_file method to parse the file and return the transcript. The parse_file method requires the pydub library to be installed in order to extract audio from mp4 files. The class is designed to provide a simple and efficient way to extract text from video and audio files.", "doc_id": "30f98a9b-2519-44a4-b6c1-18640c782d64", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Video audio parser.\n\nContains parsers for mp3, mp4 files.\n\n\"\"\"\nfrom pathlib import Path\nfrom typing import Any, Dict, cast\n\nfrom gpt_index.readers.file.base_parser import BaseParser\n\n\nclass VideoAudioParser(BaseParser):\n    \"\"\"Video audio parser.\n\n    Extract text from transcript of video/audio files.\n\n    \"\"\"\n\n    def __init__(self, *args: Any, model_version: str = \"base\", **kwargs: Any) -> None:\n        \"\"\"Init params.\"\"\"\n        super().__init__(*args, **kwargs)\n        self._model_version = model_version\n\n    def _init_parser(self) -> Dict:\n        \"\"\"Init parser.\"\"\"\n        try:\n            import whisper\n        except ImportError:\n            raise ValueError(\n                \"Please install OpenAI whisper model \"\n                \"'pip install git+https://github.com/openai/whisper.git' \"\n               ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/video_audio.py", "file_name": "video_audio.py"}, "index": 0, "child_indices": [], "ref_doc_id": "875d5164e96b8249b7c1672175e199266f13d110", "node_info": null}, "1": {"text": "\"\n                \"to use the model\"\n            )\n\n        model = whisper.load_model(self._model_version)\n\n        return {\"model\": model}\n\n    def parse_file(self, file: Path, errors: str = \"ignore\") -> str:\n        \"\"\"Parse file.\"\"\"\n        import whisper\n\n        if file.name.endswith(\"mp4\"):\n            try:\n                from pydub import AudioSegment  # noqa: F401\n            except ImportError:\n                raise ValueError(\"Please install pydub 'pip install pydub' \")\n            # open file\n            video = AudioSegment.from_file(file, format=\"mp4\")\n\n            # Extract audio from video\n            audio = video.split_to_mono()[0]\n\n            file_str =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/video_audio.py", "file_name": "video_audio.py"}, "index": 1, "child_indices": [], "ref_doc_id": "875d5164e96b8249b7c1672175e199266f13d110", "node_info": null}, "2": {"text": "           file_str = str(file)[:-4] + \".mp3\"\n            # export file\n            audio.export(file_str, format=\"mp3\")\n\n        model = cast(whisper.Whisper, self.parser_config[\"model\"])\n        result = model.transcribe(str(file))\n\n        transcript = result[\"text\"]\n\n        return transcript\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/video_audio.py", "file_name": "video_audio.py"}, "index": 2, "child_indices": [], "ref_doc_id": "875d5164e96b8249b7c1672175e199266f13d110", "node_info": null}, "3": {"text": "VideoAudioParser is a class that parses video and audio files to extract text from their transcripts. It uses the OpenAI whisper model to transcribe the files, and can handle both mp3 and mp4 files. It also requires the pydub library to be installed in order to extract audio from mp4 files. The class contains an init method to initialize the parser, and a parse_file method to parse the file and return the transcript.", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"3": {"text": "VideoAudioParser is a class that parses video and audio files to extract text from their transcripts. It uses the OpenAI whisper model to transcribe the files, and can handle both mp3 and mp4 files. It also requires the pydub library to be installed in order to extract audio from mp4 files. The class contains an init method to initialize the parser, and a parse_file method to parse the file and return the transcript.", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"875d5164e96b8249b7c1672175e199266f13d110": {"text": "\"\"\"Video audio parser.\n\nContains parsers for mp3, mp4 files.\n\n\"\"\"\nfrom pathlib import Path\nfrom typing import Any, Dict, cast\n\nfrom gpt_index.readers.file.base_parser import BaseParser\n\n\nclass VideoAudioParser(BaseParser):\n    \"\"\"Video audio parser.\n\n    Extract text from transcript of video/audio files.\n\n    \"\"\"\n\n    def __init__(self, *args: Any, model_version: str = \"base\", **kwargs: Any) -> None:\n        \"\"\"Init params.\"\"\"\n        super().__init__(*args, **kwargs)\n        self._model_version = model_version\n\n    def _init_parser(self) -> Dict:\n        \"\"\"Init parser.\"\"\"\n        try:\n            import whisper\n        except ImportError:\n            raise ValueError(\n                \"Please install OpenAI whisper model \"\n                \"'pip install git+https://github.com/openai/whisper.git' \"\n                \"to use the model\"\n            )\n\n        model = whisper.load_model(self._model_version)\n\n        return {\"model\": model}\n\n    def parse_file(self, file: Path, errors: str = \"ignore\") -> str:\n        \"\"\"Parse file.\"\"\"\n        import whisper\n\n        if file.name.endswith(\"mp4\"):\n            try:\n                from pydub import AudioSegment  # noqa: F401\n            except ImportError:\n                raise ValueError(\"Please install pydub 'pip install pydub' \")\n            # open file\n            video = AudioSegment.from_file(file, format=\"mp4\")\n\n            # Extract audio from video\n            audio = video.split_to_mono()[0]\n\n            file_str = str(file)[:-4] + \".mp3\"\n            # export file\n            audio.export(file_str, format=\"mp3\")\n\n        model = cast(whisper.Whisper, self.parser_config[\"model\"])\n        result = model.transcribe(str(file))\n\n        transcript = result[\"text\"]\n\n        return transcript\n", "doc_id": "875d5164e96b8249b7c1672175e199266f13d110", "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/video_audio.py", "file_name": "video_audio.py"}, "__type__": "Document"}, "30f98a9b-2519-44a4-b6c1-18640c782d64": {"text": "\nVideoAudioParser is a class that provides a simple and efficient way to extract text from video and audio files. It uses the OpenAI whisper model to transcribe the files, and can handle both mp3 and mp4 files. The class contains an init method to initialize the parser, and a parse_file method to parse the file and return the transcript. The parse_file method requires the pydub library to be installed in order to extract audio from mp4 files. The class is designed to provide a simple and efficient way to extract text from video and audio files.", "doc_id": "30f98a9b-2519-44a4-b6c1-18640c782d64", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Video audio parser.\n\nContains parsers for mp3, mp4 files.\n\n\"\"\"\nfrom pathlib import Path\nfrom typing import Any, Dict, cast\n\nfrom gpt_index.readers.file.base_parser import BaseParser\n\n\nclass VideoAudioParser(BaseParser):\n    \"\"\"Video audio parser.\n\n    Extract text from transcript of video/audio files.\n\n    \"\"\"\n\n    def __init__(self, *args: Any, model_version: str = \"base\", **kwargs: Any) -> None:\n        \"\"\"Init params.\"\"\"\n        super().__init__(*args, **kwargs)\n        self._model_version = model_version\n\n    def _init_parser(self) -> Dict:\n        \"\"\"Init parser.\"\"\"\n        try:\n            import whisper\n        except ImportError:\n            raise ValueError(\n                \"Please install OpenAI whisper model \"\n                \"'pip install git+https://github.com/openai/whisper.git' \"\n               ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/video_audio.py", "file_name": "video_audio.py"}, "index": 0, "child_indices": [], "ref_doc_id": "875d5164e96b8249b7c1672175e199266f13d110", "node_info": null}, "1": {"text": "\"\n                \"to use the model\"\n            )\n\n        model = whisper.load_model(self._model_version)\n\n        return {\"model\": model}\n\n    def parse_file(self, file: Path, errors: str = \"ignore\") -> str:\n        \"\"\"Parse file.\"\"\"\n        import whisper\n\n        if file.name.endswith(\"mp4\"):\n            try:\n                from pydub import AudioSegment  # noqa: F401\n            except ImportError:\n                raise ValueError(\"Please install pydub 'pip install pydub' \")\n            # open file\n            video = AudioSegment.from_file(file, format=\"mp4\")\n\n            # Extract audio from video\n            audio = video.split_to_mono()[0]\n\n            file_str =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/video_audio.py", "file_name": "video_audio.py"}, "index": 1, "child_indices": [], "ref_doc_id": "875d5164e96b8249b7c1672175e199266f13d110", "node_info": null}, "2": {"text": "           file_str = str(file)[:-4] + \".mp3\"\n            # export file\n            audio.export(file_str, format=\"mp3\")\n\n        model = cast(whisper.Whisper, self.parser_config[\"model\"])\n        result = model.transcribe(str(file))\n\n        transcript = result[\"text\"]\n\n        return transcript\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/file/video_audio.py", "file_name": "video_audio.py"}, "index": 2, "child_indices": [], "ref_doc_id": "875d5164e96b8249b7c1672175e199266f13d110", "node_info": null}, "3": {"text": "VideoAudioParser is a class that parses video and audio files to extract text from their transcripts. It uses the OpenAI whisper model to transcribe the files, and can handle both mp3 and mp4 files. It also requires the pydub library to be installed in order to extract audio from mp4 files. The class contains an init method to initialize the parser, and a parse_file method to parse the file and return the transcript.", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"3": {"text": "VideoAudioParser is a class that parses video and audio files to extract text from their transcripts. It uses the OpenAI whisper model to transcribe the files, and can handle both mp3 and mp4 files. It also requires the pydub library to be installed in order to extract audio from mp4 files. The class contains an init method to initialize the parser, and a parse_file method to parse the file and return the transcript.", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}