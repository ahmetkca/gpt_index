{"index_struct": {"text": "\nThis code file contains a Github API client written in Python for the GPT-Index library. It provides methods for making requests to the Github API, such as getting information about a branch, tree, blob, or commit. The client requires a Github token for authentication, which can be passed as an argument or set as an environment variable. The code uses the httpx library to make requests to the Github API, and the data is returned in the form of response models. The module also contains dataclasses for the responses from the Github API's getTree, getBlob, getCommit, and getBranch endpoints. The main function is used for testing the client. The purpose of the code is to provide an asynchronous client for interacting with the Github API and retrieving data from the endpoints.", "doc_id": "6748f380-7a9b-4def-83e6-33a779776a25", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"\nGithub API client for the GPT-Index library.\n\nThis module contains the Github API client for the GPT-Index library.\nIt is used by the Github readers to retrieve the data from Github.\n\"\"\"\n\nimport os\nfrom dataclasses import dataclass\nfrom typing import Any, Dict, List, Optional\n\nfrom dataclasses_json import DataClassJsonMixin\n\n\n@dataclass\nclass GitTreeResponseModel(DataClassJsonMixin):\n    \"\"\"\n    Dataclass for the response from the Github API's getTree endpoint.\n\n    Attributes:\n        - sha (str): SHA1 checksum ID of the tree.\n        - url (str): URL for the tree.\n        - tree (List[GitTreeObject]): List of objects in the tree.\n        - truncated (bool): Whether the tree is truncated.\n\n    Examples:\n        >>> tree = client.get_tree(\"owner\", \"repo\", \"branch\")\n        >>> tree.sha\n    \"\"\"\n\n    @dataclass\n    class GitTreeObject(DataClassJsonMixin):\n        \"\"\"\n        Dataclass for the objects in the", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 0, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "1": {"text": "   \"\"\"\n        Dataclass for the objects in the tree.\n\n        Attributes:\n            - path (str): Path to the object.\n            - mode (str): Mode of the object.\n            - type (str): Type of the object.\n            - sha (str): SHA1 checksum ID of the object.\n            - url (str): URL for the object.\n            - size (Optional[int]): Size of the object (only for blobs).\n        \"\"\"\n\n        path: str\n        mode: str\n        type: str\n        sha: str\n        url: str\n        size: Optional[int] = None\n\n    sha: str\n    url: str\n    tree: List[GitTreeObject]\n    truncated: bool\n\n\n@dataclass\nclass GitBlobResponseModel(DataClassJsonMixin):\n    \"\"\"\n    Dataclass for the response from the Github API's getBlob", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 1, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "2": {"text": "\"\"\"\n    Dataclass for the response from the Github API's getBlob endpoint.\n\n    Attributes:\n        - content (str): Content of the blob.\n        - encoding (str): Encoding of the blob.\n        - url (str): URL for the blob.\n        - sha (str): SHA1 checksum ID of the blob.\n        - size (int): Size of the blob.\n        - node_id (str): Node ID of the blob.\n    \"\"\"\n\n    content: str\n    encoding: str\n    url: str\n    sha: str\n    size: int\n    node_id: str\n\n\n@dataclass\nclass GitCommitResponseModel(DataClassJsonMixin):\n    \"\"\"\n    Dataclass for the response from the Github API's getCommit endpoint.\n\n    Attributes:\n        - tree (Tree): Tree object for the commit.\n    \"\"\"\n\n    @dataclass\n    class Commit(DataClassJsonMixin):\n        \"\"\"Dataclass for the commit object in the commit. (commit.commit).\"\"\"\n\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 2, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "3": {"text": "commit object in the commit. (commit.commit).\"\"\"\n\n        @dataclass\n        class Tree(DataClassJsonMixin):\n            \"\"\"\n            Dataclass for the tree object in the commit.\n\n            Attributes:\n                - sha (str): SHA for the commit\n            \"\"\"\n\n            sha: str\n\n        tree: Tree\n\n    commit: Commit\n\n\n@dataclass\nclass GitBranchResponseModel(DataClassJsonMixin):\n    \"\"\"\n    Dataclass for the response from the Github API's getBranch endpoint.\n\n    Attributes:\n        - commit (Commit): Commit object for the branch.\n    \"\"\"\n\n    @dataclass\n    class Commit(DataClassJsonMixin):\n        \"\"\"Dataclass for the commit object in the branch. (commit.commit).\"\"\"\n\n        @dataclass\n        class Commit(DataClassJsonMixin):\n           ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 3, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "4": {"text": "           \"\"\"Dataclass for the commit object in the commit. (commit.commit.tree).\"\"\"\n\n            @dataclass\n            class Tree(DataClassJsonMixin):\n                \"\"\"\n                Dataclass for the tree object in the commit.\n\n                Usage: commit.commit.tree.sha\n                \"\"\"\n\n                sha: str\n\n            tree: Tree\n\n        commit: Commit\n\n    commit: Commit\n\n\nclass GithubClient:\n    \"\"\"\n    An asynchronous client for interacting with the Github API.\n\n    This client is used for making API requests to Github.\n    It provides methods for accessing the Github API endpoints.\n    The client requires a Github token for authentication,\n    which can be passed as an argument or set as an environment variable.\n    If no Github token is provided, the client will raise a ValueError.\n\n    Examples:\n    ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 4, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "5": {"text": "the client will raise a ValueError.\n\n    Examples:\n        >>> client = GithubClient(\"my_github_token\")\n        >>> branch_info = client.get_branch(\"owner\", \"repo\", \"branch\")\n    \"\"\"\n\n    DEFAULT_BASE_URL = \"https://api.github.com\"\n    DEFAULT_API_VERSION = \"2022-11-28\"\n\n    def __init__(\n        self,\n        github_token: Optional[str] = None,\n        base_url: str = DEFAULT_BASE_URL,\n        api_version: str = DEFAULT_API_VERSION,\n        verbose: bool = False,\n    ) -> None:\n        \"\"\"\n        Initialize the GithubClient.\n\n        Args:\n            - github_token (str): Github token for authentication.\n                If not provided, the client will try to get it from\n                the GITHUB_TOKEN environment variable.\n         ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 5, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "6": {"text": "the GITHUB_TOKEN environment variable.\n            - base_url (str): Base URL for the Github API\n                (defaults to \"https://api.github.com\").\n            - api_version (str): Github API version (defaults to \"2022-11-28\").\n\n        Raises:\n            ValueError: If no Github token is provided.\n        \"\"\"\n        if github_token is None:\n            github_token = os.getenv(\"GITHUB_TOKEN\")\n            if github_token is None:\n                raise ValueError(\n                    \"Please provide a Github token. \"\n                    + \"You can do so by passing it as an argument to the GithubReader,\"\n                    + \"or by setting the GITHUB_TOKEN environment variable.\"\n         ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 6, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "7": {"text": "the GITHUB_TOKEN environment variable.\"\n                )\n\n        self._base_url = base_url\n        self._api_version = api_version\n        self._verbose = verbose\n\n        self._endpoints = {\n            \"getTree\": \"/repos/{owner}/{repo}/git/trees/{tree_sha}\",\n            \"getBranch\": \"/repos/{owner}/{repo}/branches/{branch}\",\n            \"getBlob\": \"/repos/{owner}/{repo}/git/blobs/{file_sha}\",\n            \"getCommit\": \"/repos/{owner}/{repo}/commits/{commit_sha}\",\n        }\n\n        self._headers = {\n            \"Accept\": \"application/vnd.github+json\",\n            \"Authorization\": f\"Bearer {github_token}\",\n           ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 7, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "8": {"text": "{github_token}\",\n            \"X-GitHub-Api-Version\": f\"{self._api_version}\",\n        }\n\n    def get_all_endpoints(self) -> Dict[str, str]:\n        \"\"\"Get all available endpoints.\"\"\"\n        return {**self._endpoints}\n\n    async def request(\n        self,\n        endpoint: str,\n        method: str,\n        headers: Dict[str, Any] = {},\n        **kwargs: Any,\n    ) -> Any:\n        \"\"\"\n        Make an API request to the Github API.\n\n        This method is used for making API requests to the Github API.\n        It is used internally by the other methods in the client.\n\n        Args:\n            - `endpoint (str)`: Name of the endpoint to make the request to.\n            - `method (str)`: HTTP method to use for the request.\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 8, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "9": {"text": "HTTP method to use for the request.\n            - `headers (dict)`: HTTP headers to include in the request.\n            - `**kwargs`: Keyword arguments to pass to the endpoint URL.\n\n        Returns:\n            - `response (httpx.Response)`: Response from the API request.\n\n        Raises:\n            - ImportError: If the `httpx` library is not installed.\n            - httpx.HTTPError: If the API request fails.\n\n        Examples:\n            >>> response = client.request(\"getTree\", \"GET\",\n                                owner=\"owner\", repo=\"repo\",\n                                tree_sha=\"tree_sha\")\n        \"\"\"\n        try:\n            import httpx\n        except ImportError:\n     ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 9, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "10": {"text": "httpx\n        except ImportError:\n            raise ImportError(\n                \"Please install httpx to use the GithubRepositoryReader. \"\n                \"You can do so by running `pip install httpx`.\"\n            )\n\n        _headers = {**self._headers, **headers}\n\n        _client: httpx.AsyncClient\n        async with httpx.AsyncClient(\n            headers=_headers, base_url=self._base_url\n        ) as _client:\n            try:\n                response = await _client.request(\n                    method, url=self._endpoints[endpoint].format(**kwargs)\n                )\n            except httpx.HTTPError as excp:\n                print(f\"HTTP Exception for", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 10, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "11": {"text": "             print(f\"HTTP Exception for {excp.request.url} - {excp}\")\n                raise excp\n            return response\n\n    async def get_branch(\n        self, owner: str, repo: str, branch: str\n    ) -> GitBranchResponseModel:\n        \"\"\"\n        Get information about a branch. (Github API endpoint: getBranch).\n\n        Args:\n            - `owner (str)`: Owner of the repository.\n            - `repo (str)`: Name of the repository.\n            - `branch (str)`: Name of the branch.\n\n        Returns:\n            - `branch_info (GitBranchResponseModel)`: Information about the branch.\n\n        Examples:\n            >>> branch_info = client.get_branch(\"owner\", \"repo\", \"branch\")\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 11, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "12": {"text": "\"repo\", \"branch\")\n        \"\"\"\n        return GitBranchResponseModel.from_json(\n            (\n                await self.request(\n                    \"getBranch\", \"GET\", owner=owner, repo=repo, branch=branch\n                )\n            ).text\n        )\n\n    async def get_tree(\n        self, owner: str, repo: str, tree_sha: str\n    ) -> GitTreeResponseModel:\n        \"\"\"\n        Get information about a tree. (Github API endpoint: getTree).\n\n        Args:\n            - `owner (str)`: Owner of the repository.\n            - `repo (str)`: Name of the repository.\n            - `tree_sha (str)`: SHA of the tree.\n\n        Returns:\n ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 12, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "13": {"text": "SHA of the tree.\n\n        Returns:\n            - `tree_info (GitTreeResponseModel)`: Information about the tree.\n\n        Examples:\n            >>> tree_info = client.get_tree(\"owner\", \"repo\", \"tree_sha\")\n        \"\"\"\n        return GitTreeResponseModel.from_json(\n            (\n                await self.request(\n                    \"getTree\", \"GET\", owner=owner, repo=repo, tree_sha=tree_sha\n                )\n            ).text\n        )\n\n    async def get_blob(\n        self, owner: str, repo: str, file_sha: str\n    ) -> GitBlobResponseModel:\n        \"\"\"\n        Get information about a blob. (Github API endpoint: getBlob).\n\n        Args:\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 13, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "14": {"text": "       Args:\n            - `owner (str)`: Owner of the repository.\n            - `repo (str)`: Name of the repository.\n            - `file_sha (str)`: SHA of the file.\n\n        Returns:\n            - `blob_info (GitBlobResponseModel)`: Information about the blob.\n\n        Examples:\n            >>> blob_info = client.get_blob(\"owner\", \"repo\", \"file_sha\")\n        \"\"\"\n        return GitBlobResponseModel.from_json(\n            (\n                await self.request(\n                    \"getBlob\", \"GET\", owner=owner, repo=repo, file_sha=file_sha\n                )\n            ).text\n        )\n\n    async def", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 14, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "15": {"text": "  ).text\n        )\n\n    async def get_commit(\n        self, owner: str, repo: str, commit_sha: str\n    ) -> GitCommitResponseModel:\n        \"\"\"\n        Get information about a commit. (Github API endpoint: getCommit).\n\n        Args:\n            - `owner (str)`: Owner of the repository.\n            - `repo (str)`: Name of the repository.\n            - `commit_sha (str)`: SHA of the commit.\n\n        Returns:\n            - `commit_info (GitCommitResponseModel)`: Information about the commit.\n\n        Examples:\n            >>> commit_info = client.get_commit(\"owner\", \"repo\", \"commit_sha\")\n        \"\"\"\n        return GitCommitResponseModel.from_json(\n            (\n                await self.request(\n ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 15, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "16": {"text": "            await self.request(\n                    \"getCommit\", \"GET\", owner=owner, repo=repo, commit_sha=commit_sha\n                )\n            ).text\n        )\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    async def main() -> None:\n        \"\"\"Test the GithubClient.\"\"\"\n        client = GithubClient()\n        response = await client.get_tree(\n            owner=\"ahmetkca\", repo=\"CommitAI\", tree_sha=\"with-body\"\n        )\n\n        for obj in response.tree:\n            if obj.type == \"blob\":\n                print(obj.path)\n                print(obj.sha)\n                blob_response = await client.get_blob(\n  ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 16, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "17": {"text": "   blob_response = await client.get_blob(\n                    owner=\"ahmetkca\", repo=\"CommitAI\", file_sha=obj.sha\n                )\n                print(blob_response.content)\n\n    asyncio.run(main())\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 17, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "18": {"text": "This module contains the Github API client for the GPT-Index library. It provides methods for accessing the Github API endpoints, and requires a Github token for authentication. It contains dataclasses for the responses from the Github API's getTree, getBlob, getCommit, and getBranch endpoints. The GithubClient class provides an asynchronous client for interacting with the Github API, and provides methods for making API requests to the Github API.", "doc_id": null, "embedding": null, "extra_info": null, "index": 18, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], "ref_doc_id": null, "node_info": null}, "19": {"text": "This code file is a Python module that provides an asynchronous client for the Github API. It contains functions for making requests to the Github API, such as getting information about a branch, tree, blob, or commit. It also contains a main function for testing the client. The code uses the httpx library to make requests to the Github API, and the data is returned in the form of response models.", "doc_id": null, "embedding": null, "extra_info": null, "index": 19, "child_indices": [10, 11, 12, 13, 14, 15, 16, 17], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"18": {"text": "This module contains the Github API client for the GPT-Index library. It provides methods for accessing the Github API endpoints, and requires a Github token for authentication. It contains dataclasses for the responses from the Github API's getTree, getBlob, getCommit, and getBranch endpoints. The GithubClient class provides an asynchronous client for interacting with the Github API, and provides methods for making API requests to the Github API.", "doc_id": null, "embedding": null, "extra_info": null, "index": 18, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], "ref_doc_id": null, "node_info": null}, "19": {"text": "This code file is a Python module that provides an asynchronous client for the Github API. It contains functions for making requests to the Github API, such as getting information about a branch, tree, blob, or commit. It also contains a main function for testing the client. The code uses the httpx library to make requests to the Github API, and the data is returned in the form of response models.", "doc_id": null, "embedding": null, "extra_info": null, "index": 19, "child_indices": [10, 11, 12, 13, 14, 15, 16, 17], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"cde89efb045b4304cc4982ff8aa795ac8c522a23": {"text": "\"\"\"\nGithub API client for the GPT-Index library.\n\nThis module contains the Github API client for the GPT-Index library.\nIt is used by the Github readers to retrieve the data from Github.\n\"\"\"\n\nimport os\nfrom dataclasses import dataclass\nfrom typing import Any, Dict, List, Optional\n\nfrom dataclasses_json import DataClassJsonMixin\n\n\n@dataclass\nclass GitTreeResponseModel(DataClassJsonMixin):\n    \"\"\"\n    Dataclass for the response from the Github API's getTree endpoint.\n\n    Attributes:\n        - sha (str): SHA1 checksum ID of the tree.\n        - url (str): URL for the tree.\n        - tree (List[GitTreeObject]): List of objects in the tree.\n        - truncated (bool): Whether the tree is truncated.\n\n    Examples:\n        >>> tree = client.get_tree(\"owner\", \"repo\", \"branch\")\n        >>> tree.sha\n    \"\"\"\n\n    @dataclass\n    class GitTreeObject(DataClassJsonMixin):\n        \"\"\"\n        Dataclass for the objects in the tree.\n\n        Attributes:\n            - path (str): Path to the object.\n            - mode (str): Mode of the object.\n            - type (str): Type of the object.\n            - sha (str): SHA1 checksum ID of the object.\n            - url (str): URL for the object.\n            - size (Optional[int]): Size of the object (only for blobs).\n        \"\"\"\n\n        path: str\n        mode: str\n        type: str\n        sha: str\n        url: str\n        size: Optional[int] = None\n\n    sha: str\n    url: str\n    tree: List[GitTreeObject]\n    truncated: bool\n\n\n@dataclass\nclass GitBlobResponseModel(DataClassJsonMixin):\n    \"\"\"\n    Dataclass for the response from the Github API's getBlob endpoint.\n\n    Attributes:\n        - content (str): Content of the blob.\n        - encoding (str): Encoding of the blob.\n        - url (str): URL for the blob.\n        - sha (str): SHA1 checksum ID of the blob.\n        - size (int): Size of the blob.\n        - node_id (str): Node ID of the blob.\n    \"\"\"\n\n    content: str\n    encoding: str\n    url: str\n    sha: str\n    size: int\n    node_id: str\n\n\n@dataclass\nclass GitCommitResponseModel(DataClassJsonMixin):\n    \"\"\"\n    Dataclass for the response from the Github API's getCommit endpoint.\n\n    Attributes:\n        - tree (Tree): Tree object for the commit.\n    \"\"\"\n\n    @dataclass\n    class Commit(DataClassJsonMixin):\n        \"\"\"Dataclass for the commit object in the commit. (commit.commit).\"\"\"\n\n        @dataclass\n        class Tree(DataClassJsonMixin):\n            \"\"\"\n            Dataclass for the tree object in the commit.\n\n            Attributes:\n                - sha (str): SHA for the commit\n            \"\"\"\n\n            sha: str\n\n        tree: Tree\n\n    commit: Commit\n\n\n@dataclass\nclass GitBranchResponseModel(DataClassJsonMixin):\n    \"\"\"\n    Dataclass for the response from the Github API's getBranch endpoint.\n\n    Attributes:\n        - commit (Commit): Commit object for the branch.\n    \"\"\"\n\n    @dataclass\n    class Commit(DataClassJsonMixin):\n        \"\"\"Dataclass for the commit object in the branch. (commit.commit).\"\"\"\n\n        @dataclass\n        class Commit(DataClassJsonMixin):\n            \"\"\"Dataclass for the commit object in the commit. (commit.commit.tree).\"\"\"\n\n            @dataclass\n            class Tree(DataClassJsonMixin):\n                \"\"\"\n                Dataclass for the tree object in the commit.\n\n                Usage: commit.commit.tree.sha\n                \"\"\"\n\n                sha: str\n\n            tree: Tree\n\n        commit: Commit\n\n    commit: Commit\n\n\nclass GithubClient:\n    \"\"\"\n    An asynchronous client for interacting with the Github API.\n\n    This client is used for making API requests to Github.\n    It provides methods for accessing the Github API endpoints.\n    The client requires a Github token for authentication,\n    which can be passed as an argument or set as an environment variable.\n    If no Github token is provided, the client will raise a ValueError.\n\n    Examples:\n        >>> client = GithubClient(\"my_github_token\")\n        >>> branch_info = client.get_branch(\"owner\", \"repo\", \"branch\")\n    \"\"\"\n\n    DEFAULT_BASE_URL = \"https://api.github.com\"\n    DEFAULT_API_VERSION = \"2022-11-28\"\n\n    def __init__(\n        self,\n        github_token: Optional[str] = None,\n        base_url: str = DEFAULT_BASE_URL,\n        api_version: str = DEFAULT_API_VERSION,\n        verbose: bool = False,\n    ) -> None:\n        \"\"\"\n        Initialize the GithubClient.\n\n        Args:\n            - github_token (str): Github token for authentication.\n                If not provided, the client will try to get it from\n                the GITHUB_TOKEN environment variable.\n            - base_url (str): Base URL for the Github API\n                (defaults to \"https://api.github.com\").\n            - api_version (str): Github API version (defaults to \"2022-11-28\").\n\n        Raises:\n            ValueError: If no Github token is provided.\n        \"\"\"\n        if github_token is None:\n            github_token = os.getenv(\"GITHUB_TOKEN\")\n            if github_token is None:\n                raise ValueError(\n                    \"Please provide a Github token. \"\n                    + \"You can do so by passing it as an argument to the GithubReader,\"\n                    + \"or by setting the GITHUB_TOKEN environment variable.\"\n                )\n\n        self._base_url = base_url\n        self._api_version = api_version\n        self._verbose = verbose\n\n        self._endpoints = {\n            \"getTree\": \"/repos/{owner}/{repo}/git/trees/{tree_sha}\",\n            \"getBranch\": \"/repos/{owner}/{repo}/branches/{branch}\",\n            \"getBlob\": \"/repos/{owner}/{repo}/git/blobs/{file_sha}\",\n            \"getCommit\": \"/repos/{owner}/{repo}/commits/{commit_sha}\",\n        }\n\n        self._headers = {\n            \"Accept\": \"application/vnd.github+json\",\n            \"Authorization\": f\"Bearer {github_token}\",\n            \"X-GitHub-Api-Version\": f\"{self._api_version}\",\n        }\n\n    def get_all_endpoints(self) -> Dict[str, str]:\n        \"\"\"Get all available endpoints.\"\"\"\n        return {**self._endpoints}\n\n    async def request(\n        self,\n        endpoint: str,\n        method: str,\n        headers: Dict[str, Any] = {},\n        **kwargs: Any,\n    ) -> Any:\n        \"\"\"\n        Make an API request to the Github API.\n\n        This method is used for making API requests to the Github API.\n        It is used internally by the other methods in the client.\n\n        Args:\n            - `endpoint (str)`: Name of the endpoint to make the request to.\n            - `method (str)`: HTTP method to use for the request.\n            - `headers (dict)`: HTTP headers to include in the request.\n            - `**kwargs`: Keyword arguments to pass to the endpoint URL.\n\n        Returns:\n            - `response (httpx.Response)`: Response from the API request.\n\n        Raises:\n            - ImportError: If the `httpx` library is not installed.\n            - httpx.HTTPError: If the API request fails.\n\n        Examples:\n            >>> response = client.request(\"getTree\", \"GET\",\n                                owner=\"owner\", repo=\"repo\",\n                                tree_sha=\"tree_sha\")\n        \"\"\"\n        try:\n            import httpx\n        except ImportError:\n            raise ImportError(\n                \"Please install httpx to use the GithubRepositoryReader. \"\n                \"You can do so by running `pip install httpx`.\"\n            )\n\n        _headers = {**self._headers, **headers}\n\n        _client: httpx.AsyncClient\n        async with httpx.AsyncClient(\n            headers=_headers, base_url=self._base_url\n        ) as _client:\n            try:\n                response = await _client.request(\n                    method, url=self._endpoints[endpoint].format(**kwargs)\n                )\n            except httpx.HTTPError as excp:\n                print(f\"HTTP Exception for {excp.request.url} - {excp}\")\n                raise excp\n            return response\n\n    async def get_branch(\n        self, owner: str, repo: str, branch: str\n    ) -> GitBranchResponseModel:\n        \"\"\"\n        Get information about a branch. (Github API endpoint: getBranch).\n\n        Args:\n            - `owner (str)`: Owner of the repository.\n            - `repo (str)`: Name of the repository.\n            - `branch (str)`: Name of the branch.\n\n        Returns:\n            - `branch_info (GitBranchResponseModel)`: Information about the branch.\n\n        Examples:\n            >>> branch_info = client.get_branch(\"owner\", \"repo\", \"branch\")\n        \"\"\"\n        return GitBranchResponseModel.from_json(\n            (\n                await self.request(\n                    \"getBranch\", \"GET\", owner=owner, repo=repo, branch=branch\n                )\n            ).text\n        )\n\n    async def get_tree(\n        self, owner: str, repo: str, tree_sha: str\n    ) -> GitTreeResponseModel:\n        \"\"\"\n        Get information about a tree. (Github API endpoint: getTree).\n\n        Args:\n            - `owner (str)`: Owner of the repository.\n            - `repo (str)`: Name of the repository.\n            - `tree_sha (str)`: SHA of the tree.\n\n        Returns:\n            - `tree_info (GitTreeResponseModel)`: Information about the tree.\n\n        Examples:\n            >>> tree_info = client.get_tree(\"owner\", \"repo\", \"tree_sha\")\n        \"\"\"\n        return GitTreeResponseModel.from_json(\n            (\n                await self.request(\n                    \"getTree\", \"GET\", owner=owner, repo=repo, tree_sha=tree_sha\n                )\n            ).text\n        )\n\n    async def get_blob(\n        self, owner: str, repo: str, file_sha: str\n    ) -> GitBlobResponseModel:\n        \"\"\"\n        Get information about a blob. (Github API endpoint: getBlob).\n\n        Args:\n            - `owner (str)`: Owner of the repository.\n            - `repo (str)`: Name of the repository.\n            - `file_sha (str)`: SHA of the file.\n\n        Returns:\n            - `blob_info (GitBlobResponseModel)`: Information about the blob.\n\n        Examples:\n            >>> blob_info = client.get_blob(\"owner\", \"repo\", \"file_sha\")\n        \"\"\"\n        return GitBlobResponseModel.from_json(\n            (\n                await self.request(\n                    \"getBlob\", \"GET\", owner=owner, repo=repo, file_sha=file_sha\n                )\n            ).text\n        )\n\n    async def get_commit(\n        self, owner: str, repo: str, commit_sha: str\n    ) -> GitCommitResponseModel:\n        \"\"\"\n        Get information about a commit. (Github API endpoint: getCommit).\n\n        Args:\n            - `owner (str)`: Owner of the repository.\n            - `repo (str)`: Name of the repository.\n            - `commit_sha (str)`: SHA of the commit.\n\n        Returns:\n            - `commit_info (GitCommitResponseModel)`: Information about the commit.\n\n        Examples:\n            >>> commit_info = client.get_commit(\"owner\", \"repo\", \"commit_sha\")\n        \"\"\"\n        return GitCommitResponseModel.from_json(\n            (\n                await self.request(\n                    \"getCommit\", \"GET\", owner=owner, repo=repo, commit_sha=commit_sha\n                )\n            ).text\n        )\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    async def main() -> None:\n        \"\"\"Test the GithubClient.\"\"\"\n        client = GithubClient()\n        response = await client.get_tree(\n            owner=\"ahmetkca\", repo=\"CommitAI\", tree_sha=\"with-body\"\n        )\n\n        for obj in response.tree:\n            if obj.type == \"blob\":\n                print(obj.path)\n                print(obj.sha)\n                blob_response = await client.get_blob(\n                    owner=\"ahmetkca\", repo=\"CommitAI\", file_sha=obj.sha\n                )\n                print(blob_response.content)\n\n    asyncio.run(main())\n", "doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "__type__": "Document"}, "6748f380-7a9b-4def-83e6-33a779776a25": {"text": "\nThis code file contains a Github API client written in Python for the GPT-Index library. It provides methods for making requests to the Github API, such as getting information about a branch, tree, blob, or commit. The client requires a Github token for authentication, which can be passed as an argument or set as an environment variable. The code uses the httpx library to make requests to the Github API, and the data is returned in the form of response models. The module also contains dataclasses for the responses from the Github API's getTree, getBlob, getCommit, and getBranch endpoints. The main function is used for testing the client. The purpose of the code is to provide an asynchronous client for interacting with the Github API and retrieving data from the endpoints.", "doc_id": "6748f380-7a9b-4def-83e6-33a779776a25", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"\nGithub API client for the GPT-Index library.\n\nThis module contains the Github API client for the GPT-Index library.\nIt is used by the Github readers to retrieve the data from Github.\n\"\"\"\n\nimport os\nfrom dataclasses import dataclass\nfrom typing import Any, Dict, List, Optional\n\nfrom dataclasses_json import DataClassJsonMixin\n\n\n@dataclass\nclass GitTreeResponseModel(DataClassJsonMixin):\n    \"\"\"\n    Dataclass for the response from the Github API's getTree endpoint.\n\n    Attributes:\n        - sha (str): SHA1 checksum ID of the tree.\n        - url (str): URL for the tree.\n        - tree (List[GitTreeObject]): List of objects in the tree.\n        - truncated (bool): Whether the tree is truncated.\n\n    Examples:\n        >>> tree = client.get_tree(\"owner\", \"repo\", \"branch\")\n        >>> tree.sha\n    \"\"\"\n\n    @dataclass\n    class GitTreeObject(DataClassJsonMixin):\n        \"\"\"\n        Dataclass for the objects in the", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 0, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "1": {"text": "   \"\"\"\n        Dataclass for the objects in the tree.\n\n        Attributes:\n            - path (str): Path to the object.\n            - mode (str): Mode of the object.\n            - type (str): Type of the object.\n            - sha (str): SHA1 checksum ID of the object.\n            - url (str): URL for the object.\n            - size (Optional[int]): Size of the object (only for blobs).\n        \"\"\"\n\n        path: str\n        mode: str\n        type: str\n        sha: str\n        url: str\n        size: Optional[int] = None\n\n    sha: str\n    url: str\n    tree: List[GitTreeObject]\n    truncated: bool\n\n\n@dataclass\nclass GitBlobResponseModel(DataClassJsonMixin):\n    \"\"\"\n    Dataclass for the response from the Github API's getBlob", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 1, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "2": {"text": "\"\"\"\n    Dataclass for the response from the Github API's getBlob endpoint.\n\n    Attributes:\n        - content (str): Content of the blob.\n        - encoding (str): Encoding of the blob.\n        - url (str): URL for the blob.\n        - sha (str): SHA1 checksum ID of the blob.\n        - size (int): Size of the blob.\n        - node_id (str): Node ID of the blob.\n    \"\"\"\n\n    content: str\n    encoding: str\n    url: str\n    sha: str\n    size: int\n    node_id: str\n\n\n@dataclass\nclass GitCommitResponseModel(DataClassJsonMixin):\n    \"\"\"\n    Dataclass for the response from the Github API's getCommit endpoint.\n\n    Attributes:\n        - tree (Tree): Tree object for the commit.\n    \"\"\"\n\n    @dataclass\n    class Commit(DataClassJsonMixin):\n        \"\"\"Dataclass for the commit object in the commit. (commit.commit).\"\"\"\n\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 2, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "3": {"text": "commit object in the commit. (commit.commit).\"\"\"\n\n        @dataclass\n        class Tree(DataClassJsonMixin):\n            \"\"\"\n            Dataclass for the tree object in the commit.\n\n            Attributes:\n                - sha (str): SHA for the commit\n            \"\"\"\n\n            sha: str\n\n        tree: Tree\n\n    commit: Commit\n\n\n@dataclass\nclass GitBranchResponseModel(DataClassJsonMixin):\n    \"\"\"\n    Dataclass for the response from the Github API's getBranch endpoint.\n\n    Attributes:\n        - commit (Commit): Commit object for the branch.\n    \"\"\"\n\n    @dataclass\n    class Commit(DataClassJsonMixin):\n        \"\"\"Dataclass for the commit object in the branch. (commit.commit).\"\"\"\n\n        @dataclass\n        class Commit(DataClassJsonMixin):\n           ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 3, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "4": {"text": "           \"\"\"Dataclass for the commit object in the commit. (commit.commit.tree).\"\"\"\n\n            @dataclass\n            class Tree(DataClassJsonMixin):\n                \"\"\"\n                Dataclass for the tree object in the commit.\n\n                Usage: commit.commit.tree.sha\n                \"\"\"\n\n                sha: str\n\n            tree: Tree\n\n        commit: Commit\n\n    commit: Commit\n\n\nclass GithubClient:\n    \"\"\"\n    An asynchronous client for interacting with the Github API.\n\n    This client is used for making API requests to Github.\n    It provides methods for accessing the Github API endpoints.\n    The client requires a Github token for authentication,\n    which can be passed as an argument or set as an environment variable.\n    If no Github token is provided, the client will raise a ValueError.\n\n    Examples:\n    ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 4, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "5": {"text": "the client will raise a ValueError.\n\n    Examples:\n        >>> client = GithubClient(\"my_github_token\")\n        >>> branch_info = client.get_branch(\"owner\", \"repo\", \"branch\")\n    \"\"\"\n\n    DEFAULT_BASE_URL = \"https://api.github.com\"\n    DEFAULT_API_VERSION = \"2022-11-28\"\n\n    def __init__(\n        self,\n        github_token: Optional[str] = None,\n        base_url: str = DEFAULT_BASE_URL,\n        api_version: str = DEFAULT_API_VERSION,\n        verbose: bool = False,\n    ) -> None:\n        \"\"\"\n        Initialize the GithubClient.\n\n        Args:\n            - github_token (str): Github token for authentication.\n                If not provided, the client will try to get it from\n                the GITHUB_TOKEN environment variable.\n         ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 5, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "6": {"text": "the GITHUB_TOKEN environment variable.\n            - base_url (str): Base URL for the Github API\n                (defaults to \"https://api.github.com\").\n            - api_version (str): Github API version (defaults to \"2022-11-28\").\n\n        Raises:\n            ValueError: If no Github token is provided.\n        \"\"\"\n        if github_token is None:\n            github_token = os.getenv(\"GITHUB_TOKEN\")\n            if github_token is None:\n                raise ValueError(\n                    \"Please provide a Github token. \"\n                    + \"You can do so by passing it as an argument to the GithubReader,\"\n                    + \"or by setting the GITHUB_TOKEN environment variable.\"\n         ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 6, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "7": {"text": "the GITHUB_TOKEN environment variable.\"\n                )\n\n        self._base_url = base_url\n        self._api_version = api_version\n        self._verbose = verbose\n\n        self._endpoints = {\n            \"getTree\": \"/repos/{owner}/{repo}/git/trees/{tree_sha}\",\n            \"getBranch\": \"/repos/{owner}/{repo}/branches/{branch}\",\n            \"getBlob\": \"/repos/{owner}/{repo}/git/blobs/{file_sha}\",\n            \"getCommit\": \"/repos/{owner}/{repo}/commits/{commit_sha}\",\n        }\n\n        self._headers = {\n            \"Accept\": \"application/vnd.github+json\",\n            \"Authorization\": f\"Bearer {github_token}\",\n           ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 7, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "8": {"text": "{github_token}\",\n            \"X-GitHub-Api-Version\": f\"{self._api_version}\",\n        }\n\n    def get_all_endpoints(self) -> Dict[str, str]:\n        \"\"\"Get all available endpoints.\"\"\"\n        return {**self._endpoints}\n\n    async def request(\n        self,\n        endpoint: str,\n        method: str,\n        headers: Dict[str, Any] = {},\n        **kwargs: Any,\n    ) -> Any:\n        \"\"\"\n        Make an API request to the Github API.\n\n        This method is used for making API requests to the Github API.\n        It is used internally by the other methods in the client.\n\n        Args:\n            - `endpoint (str)`: Name of the endpoint to make the request to.\n            - `method (str)`: HTTP method to use for the request.\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 8, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "9": {"text": "HTTP method to use for the request.\n            - `headers (dict)`: HTTP headers to include in the request.\n            - `**kwargs`: Keyword arguments to pass to the endpoint URL.\n\n        Returns:\n            - `response (httpx.Response)`: Response from the API request.\n\n        Raises:\n            - ImportError: If the `httpx` library is not installed.\n            - httpx.HTTPError: If the API request fails.\n\n        Examples:\n            >>> response = client.request(\"getTree\", \"GET\",\n                                owner=\"owner\", repo=\"repo\",\n                                tree_sha=\"tree_sha\")\n        \"\"\"\n        try:\n            import httpx\n        except ImportError:\n     ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 9, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "10": {"text": "httpx\n        except ImportError:\n            raise ImportError(\n                \"Please install httpx to use the GithubRepositoryReader. \"\n                \"You can do so by running `pip install httpx`.\"\n            )\n\n        _headers = {**self._headers, **headers}\n\n        _client: httpx.AsyncClient\n        async with httpx.AsyncClient(\n            headers=_headers, base_url=self._base_url\n        ) as _client:\n            try:\n                response = await _client.request(\n                    method, url=self._endpoints[endpoint].format(**kwargs)\n                )\n            except httpx.HTTPError as excp:\n                print(f\"HTTP Exception for", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 10, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "11": {"text": "             print(f\"HTTP Exception for {excp.request.url} - {excp}\")\n                raise excp\n            return response\n\n    async def get_branch(\n        self, owner: str, repo: str, branch: str\n    ) -> GitBranchResponseModel:\n        \"\"\"\n        Get information about a branch. (Github API endpoint: getBranch).\n\n        Args:\n            - `owner (str)`: Owner of the repository.\n            - `repo (str)`: Name of the repository.\n            - `branch (str)`: Name of the branch.\n\n        Returns:\n            - `branch_info (GitBranchResponseModel)`: Information about the branch.\n\n        Examples:\n            >>> branch_info = client.get_branch(\"owner\", \"repo\", \"branch\")\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 11, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "12": {"text": "\"repo\", \"branch\")\n        \"\"\"\n        return GitBranchResponseModel.from_json(\n            (\n                await self.request(\n                    \"getBranch\", \"GET\", owner=owner, repo=repo, branch=branch\n                )\n            ).text\n        )\n\n    async def get_tree(\n        self, owner: str, repo: str, tree_sha: str\n    ) -> GitTreeResponseModel:\n        \"\"\"\n        Get information about a tree. (Github API endpoint: getTree).\n\n        Args:\n            - `owner (str)`: Owner of the repository.\n            - `repo (str)`: Name of the repository.\n            - `tree_sha (str)`: SHA of the tree.\n\n        Returns:\n ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 12, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "13": {"text": "SHA of the tree.\n\n        Returns:\n            - `tree_info (GitTreeResponseModel)`: Information about the tree.\n\n        Examples:\n            >>> tree_info = client.get_tree(\"owner\", \"repo\", \"tree_sha\")\n        \"\"\"\n        return GitTreeResponseModel.from_json(\n            (\n                await self.request(\n                    \"getTree\", \"GET\", owner=owner, repo=repo, tree_sha=tree_sha\n                )\n            ).text\n        )\n\n    async def get_blob(\n        self, owner: str, repo: str, file_sha: str\n    ) -> GitBlobResponseModel:\n        \"\"\"\n        Get information about a blob. (Github API endpoint: getBlob).\n\n        Args:\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 13, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "14": {"text": "       Args:\n            - `owner (str)`: Owner of the repository.\n            - `repo (str)`: Name of the repository.\n            - `file_sha (str)`: SHA of the file.\n\n        Returns:\n            - `blob_info (GitBlobResponseModel)`: Information about the blob.\n\n        Examples:\n            >>> blob_info = client.get_blob(\"owner\", \"repo\", \"file_sha\")\n        \"\"\"\n        return GitBlobResponseModel.from_json(\n            (\n                await self.request(\n                    \"getBlob\", \"GET\", owner=owner, repo=repo, file_sha=file_sha\n                )\n            ).text\n        )\n\n    async def", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 14, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "15": {"text": "  ).text\n        )\n\n    async def get_commit(\n        self, owner: str, repo: str, commit_sha: str\n    ) -> GitCommitResponseModel:\n        \"\"\"\n        Get information about a commit. (Github API endpoint: getCommit).\n\n        Args:\n            - `owner (str)`: Owner of the repository.\n            - `repo (str)`: Name of the repository.\n            - `commit_sha (str)`: SHA of the commit.\n\n        Returns:\n            - `commit_info (GitCommitResponseModel)`: Information about the commit.\n\n        Examples:\n            >>> commit_info = client.get_commit(\"owner\", \"repo\", \"commit_sha\")\n        \"\"\"\n        return GitCommitResponseModel.from_json(\n            (\n                await self.request(\n ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 15, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "16": {"text": "            await self.request(\n                    \"getCommit\", \"GET\", owner=owner, repo=repo, commit_sha=commit_sha\n                )\n            ).text\n        )\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    async def main() -> None:\n        \"\"\"Test the GithubClient.\"\"\"\n        client = GithubClient()\n        response = await client.get_tree(\n            owner=\"ahmetkca\", repo=\"CommitAI\", tree_sha=\"with-body\"\n        )\n\n        for obj in response.tree:\n            if obj.type == \"blob\":\n                print(obj.path)\n                print(obj.sha)\n                blob_response = await client.get_blob(\n  ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 16, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "17": {"text": "   blob_response = await client.get_blob(\n                    owner=\"ahmetkca\", repo=\"CommitAI\", file_sha=obj.sha\n                )\n                print(blob_response.content)\n\n    asyncio.run(main())\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/github_readers/github_api_client.py", "file_name": "github_api_client.py"}, "index": 17, "child_indices": [], "ref_doc_id": "cde89efb045b4304cc4982ff8aa795ac8c522a23", "node_info": null}, "18": {"text": "This module contains the Github API client for the GPT-Index library. It provides methods for accessing the Github API endpoints, and requires a Github token for authentication. It contains dataclasses for the responses from the Github API's getTree, getBlob, getCommit, and getBranch endpoints. The GithubClient class provides an asynchronous client for interacting with the Github API, and provides methods for making API requests to the Github API.", "doc_id": null, "embedding": null, "extra_info": null, "index": 18, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], "ref_doc_id": null, "node_info": null}, "19": {"text": "This code file is a Python module that provides an asynchronous client for the Github API. It contains functions for making requests to the Github API, such as getting information about a branch, tree, blob, or commit. It also contains a main function for testing the client. The code uses the httpx library to make requests to the Github API, and the data is returned in the form of response models.", "doc_id": null, "embedding": null, "extra_info": null, "index": 19, "child_indices": [10, 11, 12, 13, 14, 15, 16, 17], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"18": {"text": "This module contains the Github API client for the GPT-Index library. It provides methods for accessing the Github API endpoints, and requires a Github token for authentication. It contains dataclasses for the responses from the Github API's getTree, getBlob, getCommit, and getBranch endpoints. The GithubClient class provides an asynchronous client for interacting with the Github API, and provides methods for making API requests to the Github API.", "doc_id": null, "embedding": null, "extra_info": null, "index": 18, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], "ref_doc_id": null, "node_info": null}, "19": {"text": "This code file is a Python module that provides an asynchronous client for the Github API. It contains functions for making requests to the Github API, such as getting information about a branch, tree, blob, or commit. It also contains a main function for testing the client. The code uses the httpx library to make requests to the Github API, and the data is returned in the form of response models.", "doc_id": null, "embedding": null, "extra_info": null, "index": 19, "child_indices": [10, 11, 12, 13, 14, 15, 16, 17], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}