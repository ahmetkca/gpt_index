{"index_struct": {"text": "\nThe GoogleDocsReader is a class that reads a page from Google Docs. It requires the google_auth_oauthlib, googleapiclient, and google libraries to be installed. The class has a load_data() method which takes a list of document ids and returns a list of Document objects. The _load_doc() method takes a document id and returns the document text. The _get_credentials() method retrieves valid user credentials from storage. The _read_paragraph_element() and _read_structural_elements() methods are used to read the text from the document. The _read_paragraph_element() method reads the text from a ParagraphElement and the _read_structural_elements() method recursively reads the text from a list of Structural Elements. The main method is used to test the reader. The purpose of the code is to provide a way to read a page from Google Docs. The GoogleDocsReader class uses the google_auth_oauthlib, googleapiclient, and google libraries to authenticate and retrieve the document text. The load_data() method takes a list of document ids and returns a list of Document objects", "doc_id": "03717662-f4e9-4e27-a5c4-702f95becd75", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Google docs reader.\"\"\"\n\nimport logging\nimport os\nfrom typing import Any, List\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\nSCOPES = [\"https://www.googleapis.com/auth/documents.readonly\"]\n\n\n# Copyright 2019 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\nclass GoogleDocsReader(BaseReader):\n    \"\"\"Google Docs reader.\n\n    Reads a page from Google Docs\n\n    \"\"\"\n\n    def __init__(self) -> None:\n        \"\"\"Initialize with parameters.\"\"\"\n        try:\n            import google  # noqa: F401\n ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/google_readers/gdocs.py", "file_name": "gdocs.py"}, "index": 0, "child_indices": [], "ref_doc_id": "82e08c90b55f6a8bb3145d247bafd31416b8c71f", "node_info": null}, "1": {"text": "         import google  # noqa: F401\n            import google_auth_oauthlib  # noqa: F401\n            import googleapiclient  # noqa: F401\n        except ImportError:\n            raise ValueError(\n                \"`google_auth_oauthlib`, `googleapiclient` and `google` \"\n                \"must be installed to use the GoogleDocsReader.\\n\"\n                \"Please run `pip install --upgrade google-api-python-client \"\n                \"google-auth-httplib2 google-auth-oauthlib`.\"\n            )\n\n    def load_data(self, document_ids: List[str]) -> List[Document]:\n        \"\"\"Load data from the input directory.\n\n        Args:\n            document_ids (List[str]): a list of document ids.\n        \"\"\"\n        if", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/google_readers/gdocs.py", "file_name": "gdocs.py"}, "index": 1, "child_indices": [], "ref_doc_id": "82e08c90b55f6a8bb3145d247bafd31416b8c71f", "node_info": null}, "2": {"text": "ids.\n        \"\"\"\n        if document_ids is None:\n            raise ValueError('Must specify a \"document_ids\" in `load_kwargs`.')\n\n        results = []\n        for document_id in document_ids:\n            doc = self._load_doc(document_id)\n            results.append(Document(doc, extra_info={\"document_id\": document_id}))\n        return results\n\n    def _load_doc(self, document_id: str) -> str:\n        \"\"\"Load a document from Google Docs.\n\n        Args:\n            document_id: the document id.\n\n        Returns:\n            The document text.\n        \"\"\"\n        import googleapiclient.discovery as discovery\n\n        credentials = self._get_credentials()\n        docs_service = discovery.build(\"docs\", \"v1\", credentials=credentials)\n        doc =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/google_readers/gdocs.py", "file_name": "gdocs.py"}, "index": 2, "child_indices": [], "ref_doc_id": "82e08c90b55f6a8bb3145d247bafd31416b8c71f", "node_info": null}, "3": {"text": "credentials=credentials)\n        doc = docs_service.documents().get(documentId=document_id).execute()\n        doc_content = doc.get(\"body\").get(\"content\")\n        return self._read_structural_elements(doc_content)\n\n    def _get_credentials(self) -> Any:\n        \"\"\"Get valid user credentials from storage.\n\n        The file token.json stores the user's access and refresh tokens, and is\n        created automatically when the authorization flow completes for the first\n        time.\n\n        Returns:\n            Credentials, the obtained credential.\n        \"\"\"\n        from google.auth.transport.requests import Request\n        from google.oauth2.credentials import Credentials\n        from google_auth_oauthlib.flow import InstalledAppFlow\n\n        creds = None\n        if os.path.exists(\"token.json\"):\n            creds =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/google_readers/gdocs.py", "file_name": "gdocs.py"}, "index": 3, "child_indices": [], "ref_doc_id": "82e08c90b55f6a8bb3145d247bafd31416b8c71f", "node_info": null}, "4": {"text": "           creds = Credentials.from_authorized_user_file(\"token.json\", SCOPES)\n        # If there are no (valid) credentials available, let the user log in.\n        if not creds or not creds.valid:\n            if creds and creds.expired and creds.refresh_token:\n                creds.refresh(Request())\n            else:\n                flow = InstalledAppFlow.from_client_secrets_file(\n                    \"credentials.json\", SCOPES\n                )\n                creds = flow.run_local_server(port=0)\n            # Save the credentials for the next run\n            with open(\"token.json\", \"w\") as token:\n                token.write(creds.to_json())\n\n   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/google_readers/gdocs.py", "file_name": "gdocs.py"}, "index": 4, "child_indices": [], "ref_doc_id": "82e08c90b55f6a8bb3145d247bafd31416b8c71f", "node_info": null}, "5": {"text": "    token.write(creds.to_json())\n\n        return creds\n\n    def _read_paragraph_element(self, element: Any) -> Any:\n        \"\"\"Return the text in the given ParagraphElement.\n\n        Args:\n            element: a ParagraphElement from a Google Doc.\n        \"\"\"\n        text_run = element.get(\"textRun\")\n        if not text_run:\n            return \"\"\n        return text_run.get(\"content\")\n\n    def _read_structural_elements(self, elements: List[Any]) -> Any:\n        \"\"\"Recurse through a list of Structural Elements.\n\n        Read a document's text where text may be in nested elements.\n\n        Args:\n            elements: a list of Structural Elements.\n        \"\"\"\n        text = \"\"\n        for value in elements:\n            if \"paragraph\" in value:\n               ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/google_readers/gdocs.py", "file_name": "gdocs.py"}, "index": 5, "child_indices": [], "ref_doc_id": "82e08c90b55f6a8bb3145d247bafd31416b8c71f", "node_info": null}, "6": {"text": "in value:\n                elements = value.get(\"paragraph\").get(\"elements\")\n                for elem in elements:\n                    text += self._read_paragraph_element(elem)\n            elif \"table\" in value:\n                # The text in table cells are in nested Structural Elements\n                # and tables may be nested.\n                table = value.get(\"table\")\n                for row in table.get(\"tableRows\"):\n                    cells = row.get(\"tableCells\")\n                    for cell in cells:\n                        text += self._read_structural_elements(cell.get(\"content\"))\n            elif \"tableOfContents\" in value:\n         ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/google_readers/gdocs.py", "file_name": "gdocs.py"}, "index": 6, "child_indices": [], "ref_doc_id": "82e08c90b55f6a8bb3145d247bafd31416b8c71f", "node_info": null}, "7": {"text": "elif \"tableOfContents\" in value:\n                # The text in the TOC is also in a Structural Element.\n                toc = value.get(\"tableOfContents\")\n                text += self._read_structural_elements(toc.get(\"content\"))\n        return text\n\n\nif __name__ == \"__main__\":\n    reader = GoogleDocsReader()\n    logging.info(\n        reader.load_data(document_ids=[\"11ctUj_tEf5S8vs_dk8_BNi-Zk8wW5YFhXkKqtmU_4B8\"])\n    )\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/google_readers/gdocs.py", "file_name": "gdocs.py"}, "index": 7, "child_indices": [], "ref_doc_id": "82e08c90b55f6a8bb3145d247bafd31416b8c71f", "node_info": null}, "8": {"text": "The GoogleDocsReader is a class that reads a page from Google Docs. It requires the google_auth_oauthlib, googleapiclient, and google libraries to be installed. The class has a load_data() method which takes a list of document ids and returns a list of Document objects. The _load_doc() method takes a document id and returns the document text. The _get_credentials() method retrieves valid user credentials from storage. The _read_paragraph_element() and _read_structural_elements() methods are used to read the text from the document. Finally, the main method is used to test the reader.", "doc_id": null, "embedding": null, "extra_info": null, "index": 8, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"8": {"text": "The GoogleDocsReader is a class that reads a page from Google Docs. It requires the google_auth_oauthlib, googleapiclient, and google libraries to be installed. The class has a load_data() method which takes a list of document ids and returns a list of Document objects. The _load_doc() method takes a document id and returns the document text. The _get_credentials() method retrieves valid user credentials from storage. The _read_paragraph_element() and _read_structural_elements() methods are used to read the text from the document. Finally, the main method is used to test the reader.", "doc_id": null, "embedding": null, "extra_info": null, "index": 8, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"82e08c90b55f6a8bb3145d247bafd31416b8c71f": {"text": "\"\"\"Google docs reader.\"\"\"\n\nimport logging\nimport os\nfrom typing import Any, List\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\nSCOPES = [\"https://www.googleapis.com/auth/documents.readonly\"]\n\n\n# Copyright 2019 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\nclass GoogleDocsReader(BaseReader):\n    \"\"\"Google Docs reader.\n\n    Reads a page from Google Docs\n\n    \"\"\"\n\n    def __init__(self) -> None:\n        \"\"\"Initialize with parameters.\"\"\"\n        try:\n            import google  # noqa: F401\n            import google_auth_oauthlib  # noqa: F401\n            import googleapiclient  # noqa: F401\n        except ImportError:\n            raise ValueError(\n                \"`google_auth_oauthlib`, `googleapiclient` and `google` \"\n                \"must be installed to use the GoogleDocsReader.\\n\"\n                \"Please run `pip install --upgrade google-api-python-client \"\n                \"google-auth-httplib2 google-auth-oauthlib`.\"\n            )\n\n    def load_data(self, document_ids: List[str]) -> List[Document]:\n        \"\"\"Load data from the input directory.\n\n        Args:\n            document_ids (List[str]): a list of document ids.\n        \"\"\"\n        if document_ids is None:\n            raise ValueError('Must specify a \"document_ids\" in `load_kwargs`.')\n\n        results = []\n        for document_id in document_ids:\n            doc = self._load_doc(document_id)\n            results.append(Document(doc, extra_info={\"document_id\": document_id}))\n        return results\n\n    def _load_doc(self, document_id: str) -> str:\n        \"\"\"Load a document from Google Docs.\n\n        Args:\n            document_id: the document id.\n\n        Returns:\n            The document text.\n        \"\"\"\n        import googleapiclient.discovery as discovery\n\n        credentials = self._get_credentials()\n        docs_service = discovery.build(\"docs\", \"v1\", credentials=credentials)\n        doc = docs_service.documents().get(documentId=document_id).execute()\n        doc_content = doc.get(\"body\").get(\"content\")\n        return self._read_structural_elements(doc_content)\n\n    def _get_credentials(self) -> Any:\n        \"\"\"Get valid user credentials from storage.\n\n        The file token.json stores the user's access and refresh tokens, and is\n        created automatically when the authorization flow completes for the first\n        time.\n\n        Returns:\n            Credentials, the obtained credential.\n        \"\"\"\n        from google.auth.transport.requests import Request\n        from google.oauth2.credentials import Credentials\n        from google_auth_oauthlib.flow import InstalledAppFlow\n\n        creds = None\n        if os.path.exists(\"token.json\"):\n            creds = Credentials.from_authorized_user_file(\"token.json\", SCOPES)\n        # If there are no (valid) credentials available, let the user log in.\n        if not creds or not creds.valid:\n            if creds and creds.expired and creds.refresh_token:\n                creds.refresh(Request())\n            else:\n                flow = InstalledAppFlow.from_client_secrets_file(\n                    \"credentials.json\", SCOPES\n                )\n                creds = flow.run_local_server(port=0)\n            # Save the credentials for the next run\n            with open(\"token.json\", \"w\") as token:\n                token.write(creds.to_json())\n\n        return creds\n\n    def _read_paragraph_element(self, element: Any) -> Any:\n        \"\"\"Return the text in the given ParagraphElement.\n\n        Args:\n            element: a ParagraphElement from a Google Doc.\n        \"\"\"\n        text_run = element.get(\"textRun\")\n        if not text_run:\n            return \"\"\n        return text_run.get(\"content\")\n\n    def _read_structural_elements(self, elements: List[Any]) -> Any:\n        \"\"\"Recurse through a list of Structural Elements.\n\n        Read a document's text where text may be in nested elements.\n\n        Args:\n            elements: a list of Structural Elements.\n        \"\"\"\n        text = \"\"\n        for value in elements:\n            if \"paragraph\" in value:\n                elements = value.get(\"paragraph\").get(\"elements\")\n                for elem in elements:\n                    text += self._read_paragraph_element(elem)\n            elif \"table\" in value:\n                # The text in table cells are in nested Structural Elements\n                # and tables may be nested.\n                table = value.get(\"table\")\n                for row in table.get(\"tableRows\"):\n                    cells = row.get(\"tableCells\")\n                    for cell in cells:\n                        text += self._read_structural_elements(cell.get(\"content\"))\n            elif \"tableOfContents\" in value:\n                # The text in the TOC is also in a Structural Element.\n                toc = value.get(\"tableOfContents\")\n                text += self._read_structural_elements(toc.get(\"content\"))\n        return text\n\n\nif __name__ == \"__main__\":\n    reader = GoogleDocsReader()\n    logging.info(\n        reader.load_data(document_ids=[\"11ctUj_tEf5S8vs_dk8_BNi-Zk8wW5YFhXkKqtmU_4B8\"])\n    )\n", "doc_id": "82e08c90b55f6a8bb3145d247bafd31416b8c71f", "embedding": null, "extra_info": {"file_path": "gpt_index/readers/google_readers/gdocs.py", "file_name": "gdocs.py"}, "__type__": "Document"}, "03717662-f4e9-4e27-a5c4-702f95becd75": {"text": "\nThe GoogleDocsReader is a class that reads a page from Google Docs. It requires the google_auth_oauthlib, googleapiclient, and google libraries to be installed. The class has a load_data() method which takes a list of document ids and returns a list of Document objects. The _load_doc() method takes a document id and returns the document text. The _get_credentials() method retrieves valid user credentials from storage. The _read_paragraph_element() and _read_structural_elements() methods are used to read the text from the document. The _read_paragraph_element() method reads the text from a ParagraphElement and the _read_structural_elements() method recursively reads the text from a list of Structural Elements. The main method is used to test the reader. The purpose of the code is to provide a way to read a page from Google Docs. The GoogleDocsReader class uses the google_auth_oauthlib, googleapiclient, and google libraries to authenticate and retrieve the document text. The load_data() method takes a list of document ids and returns a list of Document objects", "doc_id": "03717662-f4e9-4e27-a5c4-702f95becd75", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Google docs reader.\"\"\"\n\nimport logging\nimport os\nfrom typing import Any, List\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\nSCOPES = [\"https://www.googleapis.com/auth/documents.readonly\"]\n\n\n# Copyright 2019 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\nclass GoogleDocsReader(BaseReader):\n    \"\"\"Google Docs reader.\n\n    Reads a page from Google Docs\n\n    \"\"\"\n\n    def __init__(self) -> None:\n        \"\"\"Initialize with parameters.\"\"\"\n        try:\n            import google  # noqa: F401\n ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/google_readers/gdocs.py", "file_name": "gdocs.py"}, "index": 0, "child_indices": [], "ref_doc_id": "82e08c90b55f6a8bb3145d247bafd31416b8c71f", "node_info": null}, "1": {"text": "         import google  # noqa: F401\n            import google_auth_oauthlib  # noqa: F401\n            import googleapiclient  # noqa: F401\n        except ImportError:\n            raise ValueError(\n                \"`google_auth_oauthlib`, `googleapiclient` and `google` \"\n                \"must be installed to use the GoogleDocsReader.\\n\"\n                \"Please run `pip install --upgrade google-api-python-client \"\n                \"google-auth-httplib2 google-auth-oauthlib`.\"\n            )\n\n    def load_data(self, document_ids: List[str]) -> List[Document]:\n        \"\"\"Load data from the input directory.\n\n        Args:\n            document_ids (List[str]): a list of document ids.\n        \"\"\"\n        if", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/google_readers/gdocs.py", "file_name": "gdocs.py"}, "index": 1, "child_indices": [], "ref_doc_id": "82e08c90b55f6a8bb3145d247bafd31416b8c71f", "node_info": null}, "2": {"text": "ids.\n        \"\"\"\n        if document_ids is None:\n            raise ValueError('Must specify a \"document_ids\" in `load_kwargs`.')\n\n        results = []\n        for document_id in document_ids:\n            doc = self._load_doc(document_id)\n            results.append(Document(doc, extra_info={\"document_id\": document_id}))\n        return results\n\n    def _load_doc(self, document_id: str) -> str:\n        \"\"\"Load a document from Google Docs.\n\n        Args:\n            document_id: the document id.\n\n        Returns:\n            The document text.\n        \"\"\"\n        import googleapiclient.discovery as discovery\n\n        credentials = self._get_credentials()\n        docs_service = discovery.build(\"docs\", \"v1\", credentials=credentials)\n        doc =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/google_readers/gdocs.py", "file_name": "gdocs.py"}, "index": 2, "child_indices": [], "ref_doc_id": "82e08c90b55f6a8bb3145d247bafd31416b8c71f", "node_info": null}, "3": {"text": "credentials=credentials)\n        doc = docs_service.documents().get(documentId=document_id).execute()\n        doc_content = doc.get(\"body\").get(\"content\")\n        return self._read_structural_elements(doc_content)\n\n    def _get_credentials(self) -> Any:\n        \"\"\"Get valid user credentials from storage.\n\n        The file token.json stores the user's access and refresh tokens, and is\n        created automatically when the authorization flow completes for the first\n        time.\n\n        Returns:\n            Credentials, the obtained credential.\n        \"\"\"\n        from google.auth.transport.requests import Request\n        from google.oauth2.credentials import Credentials\n        from google_auth_oauthlib.flow import InstalledAppFlow\n\n        creds = None\n        if os.path.exists(\"token.json\"):\n            creds =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/google_readers/gdocs.py", "file_name": "gdocs.py"}, "index": 3, "child_indices": [], "ref_doc_id": "82e08c90b55f6a8bb3145d247bafd31416b8c71f", "node_info": null}, "4": {"text": "           creds = Credentials.from_authorized_user_file(\"token.json\", SCOPES)\n        # If there are no (valid) credentials available, let the user log in.\n        if not creds or not creds.valid:\n            if creds and creds.expired and creds.refresh_token:\n                creds.refresh(Request())\n            else:\n                flow = InstalledAppFlow.from_client_secrets_file(\n                    \"credentials.json\", SCOPES\n                )\n                creds = flow.run_local_server(port=0)\n            # Save the credentials for the next run\n            with open(\"token.json\", \"w\") as token:\n                token.write(creds.to_json())\n\n   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/google_readers/gdocs.py", "file_name": "gdocs.py"}, "index": 4, "child_indices": [], "ref_doc_id": "82e08c90b55f6a8bb3145d247bafd31416b8c71f", "node_info": null}, "5": {"text": "    token.write(creds.to_json())\n\n        return creds\n\n    def _read_paragraph_element(self, element: Any) -> Any:\n        \"\"\"Return the text in the given ParagraphElement.\n\n        Args:\n            element: a ParagraphElement from a Google Doc.\n        \"\"\"\n        text_run = element.get(\"textRun\")\n        if not text_run:\n            return \"\"\n        return text_run.get(\"content\")\n\n    def _read_structural_elements(self, elements: List[Any]) -> Any:\n        \"\"\"Recurse through a list of Structural Elements.\n\n        Read a document's text where text may be in nested elements.\n\n        Args:\n            elements: a list of Structural Elements.\n        \"\"\"\n        text = \"\"\n        for value in elements:\n            if \"paragraph\" in value:\n               ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/google_readers/gdocs.py", "file_name": "gdocs.py"}, "index": 5, "child_indices": [], "ref_doc_id": "82e08c90b55f6a8bb3145d247bafd31416b8c71f", "node_info": null}, "6": {"text": "in value:\n                elements = value.get(\"paragraph\").get(\"elements\")\n                for elem in elements:\n                    text += self._read_paragraph_element(elem)\n            elif \"table\" in value:\n                # The text in table cells are in nested Structural Elements\n                # and tables may be nested.\n                table = value.get(\"table\")\n                for row in table.get(\"tableRows\"):\n                    cells = row.get(\"tableCells\")\n                    for cell in cells:\n                        text += self._read_structural_elements(cell.get(\"content\"))\n            elif \"tableOfContents\" in value:\n         ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/google_readers/gdocs.py", "file_name": "gdocs.py"}, "index": 6, "child_indices": [], "ref_doc_id": "82e08c90b55f6a8bb3145d247bafd31416b8c71f", "node_info": null}, "7": {"text": "elif \"tableOfContents\" in value:\n                # The text in the TOC is also in a Structural Element.\n                toc = value.get(\"tableOfContents\")\n                text += self._read_structural_elements(toc.get(\"content\"))\n        return text\n\n\nif __name__ == \"__main__\":\n    reader = GoogleDocsReader()\n    logging.info(\n        reader.load_data(document_ids=[\"11ctUj_tEf5S8vs_dk8_BNi-Zk8wW5YFhXkKqtmU_4B8\"])\n    )\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/google_readers/gdocs.py", "file_name": "gdocs.py"}, "index": 7, "child_indices": [], "ref_doc_id": "82e08c90b55f6a8bb3145d247bafd31416b8c71f", "node_info": null}, "8": {"text": "The GoogleDocsReader is a class that reads a page from Google Docs. It requires the google_auth_oauthlib, googleapiclient, and google libraries to be installed. The class has a load_data() method which takes a list of document ids and returns a list of Document objects. The _load_doc() method takes a document id and returns the document text. The _get_credentials() method retrieves valid user credentials from storage. The _read_paragraph_element() and _read_structural_elements() methods are used to read the text from the document. Finally, the main method is used to test the reader.", "doc_id": null, "embedding": null, "extra_info": null, "index": 8, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"8": {"text": "The GoogleDocsReader is a class that reads a page from Google Docs. It requires the google_auth_oauthlib, googleapiclient, and google libraries to be installed. The class has a load_data() method which takes a list of document ids and returns a list of Document objects. The _load_doc() method takes a document id and returns the document text. The _get_credentials() method retrieves valid user credentials from storage. The _read_paragraph_element() and _read_structural_elements() methods are used to read the text from the document. Finally, the main method is used to test the reader.", "doc_id": null, "embedding": null, "extra_info": null, "index": 8, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}