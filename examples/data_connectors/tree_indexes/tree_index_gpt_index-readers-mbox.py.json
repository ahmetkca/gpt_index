{"index_struct": {"text": "\nThe MboxReader class provides a way to read e-mails saved in the mbox format. It has a load_data() function that takes an input directory and optional keyword arguments as parameters. The function uses the MboxParser class to parse the files in the directory and create a list of Document objects from the messages. The Document objects are then returned, providing a way to access the e-mails in the mbox format.", "doc_id": "d80866dc-d66d-41af-a70d-dfd6d1b9613e", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Simple reader for mbox (mailbox) files.\"\"\"\nimport os\nfrom pathlib import Path\nfrom typing import Any, List\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.file.mbox_parser import MboxParser\nfrom gpt_index.readers.schema.base import Document\n\n\nclass MboxReader(BaseReader):\n    \"\"\"Mbox e-mail reader.\n\n    Reads a set of e-mails saved in the mbox format.\n    \"\"\"\n\n    def __init__(self) -> None:\n        \"\"\"Initialize.\"\"\"\n\n    def load_data(self, input_dir: str, **load_kwargs: Any) -> List[Document]:\n        \"\"\"Load data from the input directory.\n\n        load_kwargs:\n            max_count (int): Maximum amount of messages to read.\n            message_format (str): Message format overriding default.\n        \"\"\"\n        docs: List[Document] = []\n        for (dirpath, dirnames, filenames) in os.walk(input_dir):\n            dirnames[:] = [d for d in dirnames if not", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/mbox.py", "file_name": "mbox.py"}, "index": 0, "child_indices": [], "ref_doc_id": "b8ba0526790bd62d1a41d878474809af816f616e", "node_info": null}, "1": {"text": "      dirnames[:] = [d for d in dirnames if not d.startswith(\".\")]\n            for filename in filenames:\n                if filename.endswith(\".mbox\"):\n                    filepath = os.path.join(dirpath, filename)\n                    content = MboxParser(**load_kwargs).parse_file(Path(filepath))\n                    for msg in content:\n                        docs.append(Document(msg))\n        return docs\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/mbox.py", "file_name": "mbox.py"}, "index": 1, "child_indices": [], "ref_doc_id": "b8ba0526790bd62d1a41d878474809af816f616e", "node_info": null}, "2": {"text": "MboxReader is a class that reads e-mails saved in the mbox format. It has a load_data() function that takes an input directory and optional keyword arguments as parameters. It then uses the MboxParser class to parse the files in the directory and create a list of Document objects from the messages. The Document objects are then returned.", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"2": {"text": "MboxReader is a class that reads e-mails saved in the mbox format. It has a load_data() function that takes an input directory and optional keyword arguments as parameters. It then uses the MboxParser class to parse the files in the directory and create a list of Document objects from the messages. The Document objects are then returned.", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"b8ba0526790bd62d1a41d878474809af816f616e": {"text": "\"\"\"Simple reader for mbox (mailbox) files.\"\"\"\nimport os\nfrom pathlib import Path\nfrom typing import Any, List\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.file.mbox_parser import MboxParser\nfrom gpt_index.readers.schema.base import Document\n\n\nclass MboxReader(BaseReader):\n    \"\"\"Mbox e-mail reader.\n\n    Reads a set of e-mails saved in the mbox format.\n    \"\"\"\n\n    def __init__(self) -> None:\n        \"\"\"Initialize.\"\"\"\n\n    def load_data(self, input_dir: str, **load_kwargs: Any) -> List[Document]:\n        \"\"\"Load data from the input directory.\n\n        load_kwargs:\n            max_count (int): Maximum amount of messages to read.\n            message_format (str): Message format overriding default.\n        \"\"\"\n        docs: List[Document] = []\n        for (dirpath, dirnames, filenames) in os.walk(input_dir):\n            dirnames[:] = [d for d in dirnames if not d.startswith(\".\")]\n            for filename in filenames:\n                if filename.endswith(\".mbox\"):\n                    filepath = os.path.join(dirpath, filename)\n                    content = MboxParser(**load_kwargs).parse_file(Path(filepath))\n                    for msg in content:\n                        docs.append(Document(msg))\n        return docs\n", "doc_id": "b8ba0526790bd62d1a41d878474809af816f616e", "embedding": null, "extra_info": {"file_path": "gpt_index/readers/mbox.py", "file_name": "mbox.py"}, "__type__": "Document"}, "d80866dc-d66d-41af-a70d-dfd6d1b9613e": {"text": "\nThe MboxReader class provides a way to read e-mails saved in the mbox format. It has a load_data() function that takes an input directory and optional keyword arguments as parameters. The function uses the MboxParser class to parse the files in the directory and create a list of Document objects from the messages. The Document objects are then returned, providing a way to access the e-mails in the mbox format.", "doc_id": "d80866dc-d66d-41af-a70d-dfd6d1b9613e", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Simple reader for mbox (mailbox) files.\"\"\"\nimport os\nfrom pathlib import Path\nfrom typing import Any, List\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.file.mbox_parser import MboxParser\nfrom gpt_index.readers.schema.base import Document\n\n\nclass MboxReader(BaseReader):\n    \"\"\"Mbox e-mail reader.\n\n    Reads a set of e-mails saved in the mbox format.\n    \"\"\"\n\n    def __init__(self) -> None:\n        \"\"\"Initialize.\"\"\"\n\n    def load_data(self, input_dir: str, **load_kwargs: Any) -> List[Document]:\n        \"\"\"Load data from the input directory.\n\n        load_kwargs:\n            max_count (int): Maximum amount of messages to read.\n            message_format (str): Message format overriding default.\n        \"\"\"\n        docs: List[Document] = []\n        for (dirpath, dirnames, filenames) in os.walk(input_dir):\n            dirnames[:] = [d for d in dirnames if not", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/mbox.py", "file_name": "mbox.py"}, "index": 0, "child_indices": [], "ref_doc_id": "b8ba0526790bd62d1a41d878474809af816f616e", "node_info": null}, "1": {"text": "      dirnames[:] = [d for d in dirnames if not d.startswith(\".\")]\n            for filename in filenames:\n                if filename.endswith(\".mbox\"):\n                    filepath = os.path.join(dirpath, filename)\n                    content = MboxParser(**load_kwargs).parse_file(Path(filepath))\n                    for msg in content:\n                        docs.append(Document(msg))\n        return docs\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/mbox.py", "file_name": "mbox.py"}, "index": 1, "child_indices": [], "ref_doc_id": "b8ba0526790bd62d1a41d878474809af816f616e", "node_info": null}, "2": {"text": "MboxReader is a class that reads e-mails saved in the mbox format. It has a load_data() function that takes an input directory and optional keyword arguments as parameters. It then uses the MboxParser class to parse the files in the directory and create a list of Document objects from the messages. The Document objects are then returned.", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"2": {"text": "MboxReader is a class that reads e-mails saved in the mbox format. It has a load_data() function that takes an input directory and optional keyword arguments as parameters. It then uses the MboxParser class to parse the files in the directory and create a list of Document objects from the messages. The Document objects are then returned.", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}