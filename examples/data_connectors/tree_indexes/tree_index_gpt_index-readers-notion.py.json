{"index_struct": {"text": "\nThis code file provides a Notion Page Reader class which can be used to read and search Notion pages. It takes an integration token as an argument and has methods to read a block, read a page, query a database, search for a page, and load data from a directory. The NotionPageReader class uses requests to make API calls and stores the data in a list of documents. The main function uses the NotionPageReader class to search for a page. The purpose of this code is to provide an easy way to access and search Notion pages. It allows users to quickly and easily search for and access Notion pages, blocks, databases, and directories.", "doc_id": "5e4cc158-bb87-4376-b789-67c9a0490870", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Notion reader.\"\"\"\nimport logging\nimport os\nfrom typing import Any, Dict, List, Optional\n\nimport requests  # type: ignore\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\nINTEGRATION_TOKEN_NAME = \"NOTION_INTEGRATION_TOKEN\"\nBLOCK_CHILD_URL_TMPL = \"https://api.notion.com/v1/blocks/{block_id}/children\"\nDATABASE_URL_TMPL = \"https://api.notion.com/v1/databases/{database_id}/query\"\nSEARCH_URL = \"https://api.notion.com/v1/search\"\n\n\n# TODO: Notion DB reader coming soon!\nclass NotionPageReader(BaseReader):\n    \"\"\"Notion Page reader.\n\n    Reads a set of Notion pages.\n\n    Args:\n        integration_token (str): Notion integration token.\n\n    \"\"\"\n\n    def __init__(self, integration_token: Optional[str] = None) -> None:\n        \"\"\"Initialize with parameters.\"\"\"\n        if integration_token is None:\n            integration_token =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/notion.py", "file_name": "notion.py"}, "index": 0, "child_indices": [], "ref_doc_id": "c7ee9e2bf5f208fdcdcdf35eaf126ee0abbefe83", "node_info": null}, "1": {"text": "is None:\n            integration_token = os.getenv(INTEGRATION_TOKEN_NAME)\n            if integration_token is None:\n                raise ValueError(\n                    \"Must specify `integration_token` or set environment \"\n                    \"variable `NOTION_INTEGRATION_TOKEN`.\"\n                )\n        self.token = integration_token\n        self.headers = {\n            \"Authorization\": \"Bearer \" + self.token,\n            \"Content-Type\": \"application/json\",\n            \"Notion-Version\": \"2022-06-28\",\n        }\n\n    def _read_block(self, block_id: str, num_tabs: int = 0) -> str:\n        \"\"\"Read a block.\"\"\"\n        done = False\n        result_lines_arr = []\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/notion.py", "file_name": "notion.py"}, "index": 1, "child_indices": [], "ref_doc_id": "c7ee9e2bf5f208fdcdcdf35eaf126ee0abbefe83", "node_info": null}, "2": {"text": "     result_lines_arr = []\n        cur_block_id = block_id\n        while not done:\n            block_url = BLOCK_CHILD_URL_TMPL.format(block_id=cur_block_id)\n            query_dict: Dict[str, Any] = {}\n\n            res = requests.request(\n                \"GET\", block_url, headers=self.headers, json=query_dict\n            )\n            data = res.json()\n\n            for result in data[\"results\"]:\n                result_type = result[\"type\"]\n                result_obj = result[result_type]\n\n                cur_result_text_arr = []\n                if \"rich_text\" in result_obj:\n                    for rich_text in result_obj[\"rich_text\"]:\n    ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/notion.py", "file_name": "notion.py"}, "index": 2, "child_indices": [], "ref_doc_id": "c7ee9e2bf5f208fdcdcdf35eaf126ee0abbefe83", "node_info": null}, "3": {"text": " for rich_text in result_obj[\"rich_text\"]:\n                        # skip if doesn't have text object\n                        if \"text\" in rich_text:\n                            text = rich_text[\"text\"][\"content\"]\n                            prefix = \"\\t\" * num_tabs\n                            cur_result_text_arr.append(prefix + text)\n\n                result_block_id = result[\"id\"]\n                has_children = result[\"has_children\"]\n                if has_children:\n                    children_text = self._read_block(\n                        result_block_id, num_tabs=num_tabs + 1\n     ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/notion.py", "file_name": "notion.py"}, "index": 3, "child_indices": [], "ref_doc_id": "c7ee9e2bf5f208fdcdcdf35eaf126ee0abbefe83", "node_info": null}, "4": {"text": "num_tabs=num_tabs + 1\n                    )\n                    cur_result_text_arr.append(children_text)\n\n                cur_result_text = \"\\n\".join(cur_result_text_arr)\n                result_lines_arr.append(cur_result_text)\n\n            if data[\"next_cursor\"] is None:\n                done = True\n                break\n            else:\n                cur_block_id = data[\"next_cursor\"]\n\n        result_lines = \"\\n\".join(result_lines_arr)\n        return result_lines\n\n    def read_page(self, page_id: str) -> str:\n        \"\"\"Read a page.\"\"\"\n        return self._read_block(page_id)\n\n    def query_database(\n        self, database_id: str,", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/notion.py", "file_name": "notion.py"}, "index": 4, "child_indices": [], "ref_doc_id": "c7ee9e2bf5f208fdcdcdf35eaf126ee0abbefe83", "node_info": null}, "5": {"text": "query_database(\n        self, database_id: str, query_dict: Dict[str, Any] = {}\n    ) -> List[str]:\n        \"\"\"Get all the pages from a Notion database.\"\"\"\n        res = requests.post(\n            DATABASE_URL_TMPL.format(database_id=database_id),\n            headers=self.headers,\n            json=query_dict,\n        )\n        data = res.json()\n        page_ids = []\n        for result in data[\"results\"]:\n            page_id = result[\"id\"]\n            page_ids.append(page_id)\n\n        return page_ids\n\n    def search(self, query: str) -> List[str]:\n        \"\"\"Search Notion page given a text query.\"\"\"\n        done = False\n        next_cursor: Optional[str] = None\n        page_ids = []\n        while not done:\n     ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/notion.py", "file_name": "notion.py"}, "index": 5, "child_indices": [], "ref_doc_id": "c7ee9e2bf5f208fdcdcdf35eaf126ee0abbefe83", "node_info": null}, "6": {"text": "= []\n        while not done:\n            query_dict = {\n                \"query\": query,\n            }\n            if next_cursor is not None:\n                query_dict[\"start_cursor\"] = next_cursor\n            res = requests.post(SEARCH_URL, headers=self.headers, json=query_dict)\n            data = res.json()\n            for result in data[\"results\"]:\n                page_id = result[\"id\"]\n                page_ids.append(page_id)\n\n            if data[\"next_cursor\"] is None:\n                done = True\n                break\n            else:\n                next_cursor = data[\"next_cursor\"]\n        return", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/notion.py", "file_name": "notion.py"}, "index": 6, "child_indices": [], "ref_doc_id": "c7ee9e2bf5f208fdcdcdf35eaf126ee0abbefe83", "node_info": null}, "7": {"text": "= data[\"next_cursor\"]\n        return page_ids\n\n    def load_data(\n        self, page_ids: List[str] = [], database_id: Optional[str] = None\n    ) -> List[Document]:\n        \"\"\"Load data from the input directory.\n\n        Args:\n            page_ids (List[str]): List of page ids to load.\n\n        Returns:\n            List[Document]: List of documents.\n\n        \"\"\"\n        if not page_ids and not database_id:\n            raise ValueError(\"Must specify either `page_ids` or `database_id`.\")\n        docs = []\n        if database_id is not None:\n            # get all the pages in the database\n            page_ids = self.query_database(database_id)\n            for page_id in page_ids:\n                page_text = self.read_page(page_id)\n           ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/notion.py", "file_name": "notion.py"}, "index": 7, "child_indices": [], "ref_doc_id": "c7ee9e2bf5f208fdcdcdf35eaf126ee0abbefe83", "node_info": null}, "8": {"text": "               docs.append(Document(page_text, extra_info={\"page_id\": page_id}))\n        else:\n            for page_id in page_ids:\n                page_text = self.read_page(page_id)\n                docs.append(Document(page_text, extra_info={\"page_id\": page_id}))\n\n        return docs\n\n\nif __name__ == \"__main__\":\n    reader = NotionPageReader()\n    logging.info(reader.search(\"What I\"))\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/notion.py", "file_name": "notion.py"}, "index": 8, "child_indices": [], "ref_doc_id": "c7ee9e2bf5f208fdcdcdf35eaf126ee0abbefe83", "node_info": null}, "9": {"text": "This code file is a Notion Page Reader, which is used to read a set of Notion pages. It has a class NotionPageReader which takes an integration token as an argument. It has methods to read a block, read a page, query a database, search for a page, and load data from a directory. It also has a main function which uses the NotionPageReader class to search for a page. The purpose of this code is to provide an easy way to read and search Notion pages.", "doc_id": null, "embedding": null, "extra_info": null, "index": 9, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"9": {"text": "This code file is a Notion Page Reader, which is used to read a set of Notion pages. It has a class NotionPageReader which takes an integration token as an argument. It has methods to read a block, read a page, query a database, search for a page, and load data from a directory. It also has a main function which uses the NotionPageReader class to search for a page. The purpose of this code is to provide an easy way to read and search Notion pages.", "doc_id": null, "embedding": null, "extra_info": null, "index": 9, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"c7ee9e2bf5f208fdcdcdf35eaf126ee0abbefe83": {"text": "\"\"\"Notion reader.\"\"\"\nimport logging\nimport os\nfrom typing import Any, Dict, List, Optional\n\nimport requests  # type: ignore\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\nINTEGRATION_TOKEN_NAME = \"NOTION_INTEGRATION_TOKEN\"\nBLOCK_CHILD_URL_TMPL = \"https://api.notion.com/v1/blocks/{block_id}/children\"\nDATABASE_URL_TMPL = \"https://api.notion.com/v1/databases/{database_id}/query\"\nSEARCH_URL = \"https://api.notion.com/v1/search\"\n\n\n# TODO: Notion DB reader coming soon!\nclass NotionPageReader(BaseReader):\n    \"\"\"Notion Page reader.\n\n    Reads a set of Notion pages.\n\n    Args:\n        integration_token (str): Notion integration token.\n\n    \"\"\"\n\n    def __init__(self, integration_token: Optional[str] = None) -> None:\n        \"\"\"Initialize with parameters.\"\"\"\n        if integration_token is None:\n            integration_token = os.getenv(INTEGRATION_TOKEN_NAME)\n            if integration_token is None:\n                raise ValueError(\n                    \"Must specify `integration_token` or set environment \"\n                    \"variable `NOTION_INTEGRATION_TOKEN`.\"\n                )\n        self.token = integration_token\n        self.headers = {\n            \"Authorization\": \"Bearer \" + self.token,\n            \"Content-Type\": \"application/json\",\n            \"Notion-Version\": \"2022-06-28\",\n        }\n\n    def _read_block(self, block_id: str, num_tabs: int = 0) -> str:\n        \"\"\"Read a block.\"\"\"\n        done = False\n        result_lines_arr = []\n        cur_block_id = block_id\n        while not done:\n            block_url = BLOCK_CHILD_URL_TMPL.format(block_id=cur_block_id)\n            query_dict: Dict[str, Any] = {}\n\n            res = requests.request(\n                \"GET\", block_url, headers=self.headers, json=query_dict\n            )\n            data = res.json()\n\n            for result in data[\"results\"]:\n                result_type = result[\"type\"]\n                result_obj = result[result_type]\n\n                cur_result_text_arr = []\n                if \"rich_text\" in result_obj:\n                    for rich_text in result_obj[\"rich_text\"]:\n                        # skip if doesn't have text object\n                        if \"text\" in rich_text:\n                            text = rich_text[\"text\"][\"content\"]\n                            prefix = \"\\t\" * num_tabs\n                            cur_result_text_arr.append(prefix + text)\n\n                result_block_id = result[\"id\"]\n                has_children = result[\"has_children\"]\n                if has_children:\n                    children_text = self._read_block(\n                        result_block_id, num_tabs=num_tabs + 1\n                    )\n                    cur_result_text_arr.append(children_text)\n\n                cur_result_text = \"\\n\".join(cur_result_text_arr)\n                result_lines_arr.append(cur_result_text)\n\n            if data[\"next_cursor\"] is None:\n                done = True\n                break\n            else:\n                cur_block_id = data[\"next_cursor\"]\n\n        result_lines = \"\\n\".join(result_lines_arr)\n        return result_lines\n\n    def read_page(self, page_id: str) -> str:\n        \"\"\"Read a page.\"\"\"\n        return self._read_block(page_id)\n\n    def query_database(\n        self, database_id: str, query_dict: Dict[str, Any] = {}\n    ) -> List[str]:\n        \"\"\"Get all the pages from a Notion database.\"\"\"\n        res = requests.post(\n            DATABASE_URL_TMPL.format(database_id=database_id),\n            headers=self.headers,\n            json=query_dict,\n        )\n        data = res.json()\n        page_ids = []\n        for result in data[\"results\"]:\n            page_id = result[\"id\"]\n            page_ids.append(page_id)\n\n        return page_ids\n\n    def search(self, query: str) -> List[str]:\n        \"\"\"Search Notion page given a text query.\"\"\"\n        done = False\n        next_cursor: Optional[str] = None\n        page_ids = []\n        while not done:\n            query_dict = {\n                \"query\": query,\n            }\n            if next_cursor is not None:\n                query_dict[\"start_cursor\"] = next_cursor\n            res = requests.post(SEARCH_URL, headers=self.headers, json=query_dict)\n            data = res.json()\n            for result in data[\"results\"]:\n                page_id = result[\"id\"]\n                page_ids.append(page_id)\n\n            if data[\"next_cursor\"] is None:\n                done = True\n                break\n            else:\n                next_cursor = data[\"next_cursor\"]\n        return page_ids\n\n    def load_data(\n        self, page_ids: List[str] = [], database_id: Optional[str] = None\n    ) -> List[Document]:\n        \"\"\"Load data from the input directory.\n\n        Args:\n            page_ids (List[str]): List of page ids to load.\n\n        Returns:\n            List[Document]: List of documents.\n\n        \"\"\"\n        if not page_ids and not database_id:\n            raise ValueError(\"Must specify either `page_ids` or `database_id`.\")\n        docs = []\n        if database_id is not None:\n            # get all the pages in the database\n            page_ids = self.query_database(database_id)\n            for page_id in page_ids:\n                page_text = self.read_page(page_id)\n                docs.append(Document(page_text, extra_info={\"page_id\": page_id}))\n        else:\n            for page_id in page_ids:\n                page_text = self.read_page(page_id)\n                docs.append(Document(page_text, extra_info={\"page_id\": page_id}))\n\n        return docs\n\n\nif __name__ == \"__main__\":\n    reader = NotionPageReader()\n    logging.info(reader.search(\"What I\"))\n", "doc_id": "c7ee9e2bf5f208fdcdcdf35eaf126ee0abbefe83", "embedding": null, "extra_info": {"file_path": "gpt_index/readers/notion.py", "file_name": "notion.py"}, "__type__": "Document"}, "5e4cc158-bb87-4376-b789-67c9a0490870": {"text": "\nThis code file provides a Notion Page Reader class which can be used to read and search Notion pages. It takes an integration token as an argument and has methods to read a block, read a page, query a database, search for a page, and load data from a directory. The NotionPageReader class uses requests to make API calls and stores the data in a list of documents. The main function uses the NotionPageReader class to search for a page. The purpose of this code is to provide an easy way to access and search Notion pages. It allows users to quickly and easily search for and access Notion pages, blocks, databases, and directories.", "doc_id": "5e4cc158-bb87-4376-b789-67c9a0490870", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Notion reader.\"\"\"\nimport logging\nimport os\nfrom typing import Any, Dict, List, Optional\n\nimport requests  # type: ignore\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\nINTEGRATION_TOKEN_NAME = \"NOTION_INTEGRATION_TOKEN\"\nBLOCK_CHILD_URL_TMPL = \"https://api.notion.com/v1/blocks/{block_id}/children\"\nDATABASE_URL_TMPL = \"https://api.notion.com/v1/databases/{database_id}/query\"\nSEARCH_URL = \"https://api.notion.com/v1/search\"\n\n\n# TODO: Notion DB reader coming soon!\nclass NotionPageReader(BaseReader):\n    \"\"\"Notion Page reader.\n\n    Reads a set of Notion pages.\n\n    Args:\n        integration_token (str): Notion integration token.\n\n    \"\"\"\n\n    def __init__(self, integration_token: Optional[str] = None) -> None:\n        \"\"\"Initialize with parameters.\"\"\"\n        if integration_token is None:\n            integration_token =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/notion.py", "file_name": "notion.py"}, "index": 0, "child_indices": [], "ref_doc_id": "c7ee9e2bf5f208fdcdcdf35eaf126ee0abbefe83", "node_info": null}, "1": {"text": "is None:\n            integration_token = os.getenv(INTEGRATION_TOKEN_NAME)\n            if integration_token is None:\n                raise ValueError(\n                    \"Must specify `integration_token` or set environment \"\n                    \"variable `NOTION_INTEGRATION_TOKEN`.\"\n                )\n        self.token = integration_token\n        self.headers = {\n            \"Authorization\": \"Bearer \" + self.token,\n            \"Content-Type\": \"application/json\",\n            \"Notion-Version\": \"2022-06-28\",\n        }\n\n    def _read_block(self, block_id: str, num_tabs: int = 0) -> str:\n        \"\"\"Read a block.\"\"\"\n        done = False\n        result_lines_arr = []\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/notion.py", "file_name": "notion.py"}, "index": 1, "child_indices": [], "ref_doc_id": "c7ee9e2bf5f208fdcdcdf35eaf126ee0abbefe83", "node_info": null}, "2": {"text": "     result_lines_arr = []\n        cur_block_id = block_id\n        while not done:\n            block_url = BLOCK_CHILD_URL_TMPL.format(block_id=cur_block_id)\n            query_dict: Dict[str, Any] = {}\n\n            res = requests.request(\n                \"GET\", block_url, headers=self.headers, json=query_dict\n            )\n            data = res.json()\n\n            for result in data[\"results\"]:\n                result_type = result[\"type\"]\n                result_obj = result[result_type]\n\n                cur_result_text_arr = []\n                if \"rich_text\" in result_obj:\n                    for rich_text in result_obj[\"rich_text\"]:\n    ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/notion.py", "file_name": "notion.py"}, "index": 2, "child_indices": [], "ref_doc_id": "c7ee9e2bf5f208fdcdcdf35eaf126ee0abbefe83", "node_info": null}, "3": {"text": " for rich_text in result_obj[\"rich_text\"]:\n                        # skip if doesn't have text object\n                        if \"text\" in rich_text:\n                            text = rich_text[\"text\"][\"content\"]\n                            prefix = \"\\t\" * num_tabs\n                            cur_result_text_arr.append(prefix + text)\n\n                result_block_id = result[\"id\"]\n                has_children = result[\"has_children\"]\n                if has_children:\n                    children_text = self._read_block(\n                        result_block_id, num_tabs=num_tabs + 1\n     ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/notion.py", "file_name": "notion.py"}, "index": 3, "child_indices": [], "ref_doc_id": "c7ee9e2bf5f208fdcdcdf35eaf126ee0abbefe83", "node_info": null}, "4": {"text": "num_tabs=num_tabs + 1\n                    )\n                    cur_result_text_arr.append(children_text)\n\n                cur_result_text = \"\\n\".join(cur_result_text_arr)\n                result_lines_arr.append(cur_result_text)\n\n            if data[\"next_cursor\"] is None:\n                done = True\n                break\n            else:\n                cur_block_id = data[\"next_cursor\"]\n\n        result_lines = \"\\n\".join(result_lines_arr)\n        return result_lines\n\n    def read_page(self, page_id: str) -> str:\n        \"\"\"Read a page.\"\"\"\n        return self._read_block(page_id)\n\n    def query_database(\n        self, database_id: str,", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/notion.py", "file_name": "notion.py"}, "index": 4, "child_indices": [], "ref_doc_id": "c7ee9e2bf5f208fdcdcdf35eaf126ee0abbefe83", "node_info": null}, "5": {"text": "query_database(\n        self, database_id: str, query_dict: Dict[str, Any] = {}\n    ) -> List[str]:\n        \"\"\"Get all the pages from a Notion database.\"\"\"\n        res = requests.post(\n            DATABASE_URL_TMPL.format(database_id=database_id),\n            headers=self.headers,\n            json=query_dict,\n        )\n        data = res.json()\n        page_ids = []\n        for result in data[\"results\"]:\n            page_id = result[\"id\"]\n            page_ids.append(page_id)\n\n        return page_ids\n\n    def search(self, query: str) -> List[str]:\n        \"\"\"Search Notion page given a text query.\"\"\"\n        done = False\n        next_cursor: Optional[str] = None\n        page_ids = []\n        while not done:\n     ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/notion.py", "file_name": "notion.py"}, "index": 5, "child_indices": [], "ref_doc_id": "c7ee9e2bf5f208fdcdcdf35eaf126ee0abbefe83", "node_info": null}, "6": {"text": "= []\n        while not done:\n            query_dict = {\n                \"query\": query,\n            }\n            if next_cursor is not None:\n                query_dict[\"start_cursor\"] = next_cursor\n            res = requests.post(SEARCH_URL, headers=self.headers, json=query_dict)\n            data = res.json()\n            for result in data[\"results\"]:\n                page_id = result[\"id\"]\n                page_ids.append(page_id)\n\n            if data[\"next_cursor\"] is None:\n                done = True\n                break\n            else:\n                next_cursor = data[\"next_cursor\"]\n        return", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/notion.py", "file_name": "notion.py"}, "index": 6, "child_indices": [], "ref_doc_id": "c7ee9e2bf5f208fdcdcdf35eaf126ee0abbefe83", "node_info": null}, "7": {"text": "= data[\"next_cursor\"]\n        return page_ids\n\n    def load_data(\n        self, page_ids: List[str] = [], database_id: Optional[str] = None\n    ) -> List[Document]:\n        \"\"\"Load data from the input directory.\n\n        Args:\n            page_ids (List[str]): List of page ids to load.\n\n        Returns:\n            List[Document]: List of documents.\n\n        \"\"\"\n        if not page_ids and not database_id:\n            raise ValueError(\"Must specify either `page_ids` or `database_id`.\")\n        docs = []\n        if database_id is not None:\n            # get all the pages in the database\n            page_ids = self.query_database(database_id)\n            for page_id in page_ids:\n                page_text = self.read_page(page_id)\n           ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/notion.py", "file_name": "notion.py"}, "index": 7, "child_indices": [], "ref_doc_id": "c7ee9e2bf5f208fdcdcdf35eaf126ee0abbefe83", "node_info": null}, "8": {"text": "               docs.append(Document(page_text, extra_info={\"page_id\": page_id}))\n        else:\n            for page_id in page_ids:\n                page_text = self.read_page(page_id)\n                docs.append(Document(page_text, extra_info={\"page_id\": page_id}))\n\n        return docs\n\n\nif __name__ == \"__main__\":\n    reader = NotionPageReader()\n    logging.info(reader.search(\"What I\"))\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/notion.py", "file_name": "notion.py"}, "index": 8, "child_indices": [], "ref_doc_id": "c7ee9e2bf5f208fdcdcdf35eaf126ee0abbefe83", "node_info": null}, "9": {"text": "This code file is a Notion Page Reader, which is used to read a set of Notion pages. It has a class NotionPageReader which takes an integration token as an argument. It has methods to read a block, read a page, query a database, search for a page, and load data from a directory. It also has a main function which uses the NotionPageReader class to search for a page. The purpose of this code is to provide an easy way to read and search Notion pages.", "doc_id": null, "embedding": null, "extra_info": null, "index": 9, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"9": {"text": "This code file is a Notion Page Reader, which is used to read a set of Notion pages. It has a class NotionPageReader which takes an integration token as an argument. It has methods to read a block, read a page, query a database, search for a page, and load data from a directory. It also has a main function which uses the NotionPageReader class to search for a page. The purpose of this code is to provide an easy way to read and search Notion pages.", "doc_id": null, "embedding": null, "extra_info": null, "index": 9, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}