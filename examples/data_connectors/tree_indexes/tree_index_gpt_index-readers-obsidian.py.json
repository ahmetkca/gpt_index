{"index_struct": {"text": "\nThe ObsidianReader class is a utility for quickly and easily loading data from an Obsidian Vault. It uses the os.walk() function to traverse the directory and the MarkdownParser class to parse the markdown files into a List of Documents. Each Document contains text from under an Obsidian header. Additionally, it provides a method to load the data in LangChain document format. This code file is useful for quickly and easily loading data from an Obsidian Vault.", "doc_id": "0ab4ac98-c332-48e2-846b-70781c28e3cd", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Obsidian reader class.\n\nPass in the path to an Obsidian vault and it will parse all markdown\nfiles into a List of Documents,\nwith each Document containing text from under an Obsidian header.\n\n\"\"\"\nimport os\nfrom pathlib import Path\nfrom typing import Any, List\n\nfrom langchain.docstore.document import Document as LCDocument\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.file.markdown_parser import MarkdownParser\nfrom gpt_index.readers.schema.base import Document\n\n\nclass ObsidianReader(BaseReader):\n    \"\"\"Utilities for loading data from an Obsidian Vault.\n\n    Args:\n        input_dir (str): Path to the vault.\n\n    \"\"\"\n\n    def __init__(self, input_dir: str):\n        \"\"\"Init params.\"\"\"\n        self.input_dir = Path(input_dir)\n\n    def load_data(self, *args: Any, **load_kwargs: Any) -> List[Document]:\n        \"\"\"Load data from the input directory.\"\"\"\n        docs: List[str] = []\n        for dirpath, dirnames, filenames in os.walk(self.input_dir):\n            dirnames[:] = [d", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/obsidian.py", "file_name": "obsidian.py"}, "index": 0, "child_indices": [], "ref_doc_id": "1404005433f2a8f5a4aaf2f0cb40dba48a0cd9e8", "node_info": null}, "1": {"text": "           dirnames[:] = [d for d in dirnames if not d.startswith(\".\")]\n            for filename in filenames:\n                if filename.endswith(\".md\"):\n                    filepath = os.path.join(dirpath, filename)\n                    content = MarkdownParser().parse_file(Path(filepath))\n                    docs.extend(content)\n        return [Document(d) for d in docs]\n\n    def load_langchain_documents(self, **load_kwargs: Any) -> List[LCDocument]:\n        \"\"\"Load data in LangChain document format.\"\"\"\n        docs = self.load_data(**load_kwargs)\n        return [d.to_langchain_format() for d in docs]\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/obsidian.py", "file_name": "obsidian.py"}, "index": 1, "child_indices": [], "ref_doc_id": "1404005433f2a8f5a4aaf2f0cb40dba48a0cd9e8", "node_info": null}, "2": {"text": "The ObsidianReader class is a utility for loading data from an Obsidian Vault. It takes in the path to the vault and parses all markdown files into a list of Documents, with each Document containing text from under an Obsidian header. It uses the os.walk() function to traverse the directory and the MarkdownParser class to parse the markdown files. It also provides a method to load the data in LangChain document format.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"2": {"text": "The ObsidianReader class is a utility for loading data from an Obsidian Vault. It takes in the path to the vault and parses all markdown files into a list of Documents, with each Document containing text from under an Obsidian header. It uses the os.walk() function to traverse the directory and the MarkdownParser class to parse the markdown files. It also provides a method to load the data in LangChain document format.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"1404005433f2a8f5a4aaf2f0cb40dba48a0cd9e8": {"text": "\"\"\"Obsidian reader class.\n\nPass in the path to an Obsidian vault and it will parse all markdown\nfiles into a List of Documents,\nwith each Document containing text from under an Obsidian header.\n\n\"\"\"\nimport os\nfrom pathlib import Path\nfrom typing import Any, List\n\nfrom langchain.docstore.document import Document as LCDocument\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.file.markdown_parser import MarkdownParser\nfrom gpt_index.readers.schema.base import Document\n\n\nclass ObsidianReader(BaseReader):\n    \"\"\"Utilities for loading data from an Obsidian Vault.\n\n    Args:\n        input_dir (str): Path to the vault.\n\n    \"\"\"\n\n    def __init__(self, input_dir: str):\n        \"\"\"Init params.\"\"\"\n        self.input_dir = Path(input_dir)\n\n    def load_data(self, *args: Any, **load_kwargs: Any) -> List[Document]:\n        \"\"\"Load data from the input directory.\"\"\"\n        docs: List[str] = []\n        for dirpath, dirnames, filenames in os.walk(self.input_dir):\n            dirnames[:] = [d for d in dirnames if not d.startswith(\".\")]\n            for filename in filenames:\n                if filename.endswith(\".md\"):\n                    filepath = os.path.join(dirpath, filename)\n                    content = MarkdownParser().parse_file(Path(filepath))\n                    docs.extend(content)\n        return [Document(d) for d in docs]\n\n    def load_langchain_documents(self, **load_kwargs: Any) -> List[LCDocument]:\n        \"\"\"Load data in LangChain document format.\"\"\"\n        docs = self.load_data(**load_kwargs)\n        return [d.to_langchain_format() for d in docs]\n", "doc_id": "1404005433f2a8f5a4aaf2f0cb40dba48a0cd9e8", "embedding": null, "extra_info": {"file_path": "gpt_index/readers/obsidian.py", "file_name": "obsidian.py"}, "__type__": "Document"}, "0ab4ac98-c332-48e2-846b-70781c28e3cd": {"text": "\nThe ObsidianReader class is a utility for quickly and easily loading data from an Obsidian Vault. It uses the os.walk() function to traverse the directory and the MarkdownParser class to parse the markdown files into a List of Documents. Each Document contains text from under an Obsidian header. Additionally, it provides a method to load the data in LangChain document format. This code file is useful for quickly and easily loading data from an Obsidian Vault.", "doc_id": "0ab4ac98-c332-48e2-846b-70781c28e3cd", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Obsidian reader class.\n\nPass in the path to an Obsidian vault and it will parse all markdown\nfiles into a List of Documents,\nwith each Document containing text from under an Obsidian header.\n\n\"\"\"\nimport os\nfrom pathlib import Path\nfrom typing import Any, List\n\nfrom langchain.docstore.document import Document as LCDocument\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.file.markdown_parser import MarkdownParser\nfrom gpt_index.readers.schema.base import Document\n\n\nclass ObsidianReader(BaseReader):\n    \"\"\"Utilities for loading data from an Obsidian Vault.\n\n    Args:\n        input_dir (str): Path to the vault.\n\n    \"\"\"\n\n    def __init__(self, input_dir: str):\n        \"\"\"Init params.\"\"\"\n        self.input_dir = Path(input_dir)\n\n    def load_data(self, *args: Any, **load_kwargs: Any) -> List[Document]:\n        \"\"\"Load data from the input directory.\"\"\"\n        docs: List[str] = []\n        for dirpath, dirnames, filenames in os.walk(self.input_dir):\n            dirnames[:] = [d", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/obsidian.py", "file_name": "obsidian.py"}, "index": 0, "child_indices": [], "ref_doc_id": "1404005433f2a8f5a4aaf2f0cb40dba48a0cd9e8", "node_info": null}, "1": {"text": "           dirnames[:] = [d for d in dirnames if not d.startswith(\".\")]\n            for filename in filenames:\n                if filename.endswith(\".md\"):\n                    filepath = os.path.join(dirpath, filename)\n                    content = MarkdownParser().parse_file(Path(filepath))\n                    docs.extend(content)\n        return [Document(d) for d in docs]\n\n    def load_langchain_documents(self, **load_kwargs: Any) -> List[LCDocument]:\n        \"\"\"Load data in LangChain document format.\"\"\"\n        docs = self.load_data(**load_kwargs)\n        return [d.to_langchain_format() for d in docs]\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/obsidian.py", "file_name": "obsidian.py"}, "index": 1, "child_indices": [], "ref_doc_id": "1404005433f2a8f5a4aaf2f0cb40dba48a0cd9e8", "node_info": null}, "2": {"text": "The ObsidianReader class is a utility for loading data from an Obsidian Vault. It takes in the path to the vault and parses all markdown files into a list of Documents, with each Document containing text from under an Obsidian header. It uses the os.walk() function to traverse the directory and the MarkdownParser class to parse the markdown files. It also provides a method to load the data in LangChain document format.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"2": {"text": "The ObsidianReader class is a utility for loading data from an Obsidian Vault. It takes in the path to the vault and parses all markdown files into a list of Documents, with each Document containing text from under an Obsidian header. It uses the os.walk() function to traverse the directory and the MarkdownParser class to parse the markdown files. It also provides a method to load the data in LangChain document format.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}