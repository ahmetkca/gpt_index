{"index_struct": {"text": "\nPineconeReader is a class from the gpt_index/readers/pinecone.py file that provides an easy way to access the Pinecone API and retrieve data from the index. It requires an API key and environment to be initialized, and then can be used to query the index with a vector, top_k, and query_kwargs. The response is a list of documents, each containing the text and embedding associated with the query. The documents can be returned separately or combined into one document. Additionally, custom query parameters can be passed in, allowing for more specific results. The class provides a convenient way to access the Pinecone API and retrieve data from the index.", "doc_id": "029ede8e-e4b6-4b45-8a96-a5eb13547753", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Pinecone reader.\"\"\"\n\nfrom typing import Any, Dict, List, Optional\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\n\nclass PineconeReader(BaseReader):\n    \"\"\"Pinecone reader.\n\n    Args:\n        api_key (str): Pinecone API key.\n        environment (str): Pinecone environment.\n    \"\"\"\n\n    def __init__(self, api_key: str, environment: str):\n        \"\"\"Initialize with parameters.\"\"\"\n        try:\n            import pinecone  # noqa: F401\n        except ImportError:\n            raise ValueError(\n                \"`pinecone` package not found, please run `pip install pinecone-client`\"\n            )\n\n        self._api_key = api_key\n        self._environment = environment\n        pinecone.init(api_key=api_key, environment=environment)\n\n    def load_data(\n        self,\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/pinecone.py", "file_name": "pinecone.py"}, "index": 0, "child_indices": [], "ref_doc_id": "c121f325702354416b70e9e38021ce04ff265381", "node_info": null}, "1": {"text": "       self,\n        index_name: str,\n        id_to_text_map: Dict[str, str],\n        vector: Optional[List[float]],\n        top_k: int,\n        separate_documents: bool = True,\n        include_values: bool = True,\n        **query_kwargs: Any\n    ) -> List[Document]:\n        \"\"\"Load data from Pinecone.\n\n        Args:\n            index_name (str): Name of the index.\n            id_to_text_map (Dict[str, str]): A map from ID's to text.\n            separate_documents (Optional[bool]): Whether to return separate\n                documents per retrieved entry. Defaults to True.\n            vector (List[float]): Query vector.\n            top_k (int): Number of results to return.\n            include_values (bool): Whether to include the embedding in the", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/pinecone.py", "file_name": "pinecone.py"}, "index": 1, "child_indices": [], "ref_doc_id": "c121f325702354416b70e9e38021ce04ff265381", "node_info": null}, "2": {"text": "      include_values (bool): Whether to include the embedding in the response.\n                Defaults to True.\n            **query_kwargs: Keyword arguments to pass to the query.\n                Arguments are the exact same as those found in\n                Pinecone's reference documentation for the\n                query method.\n\n        Returns:\n            List[Document]: A list of documents.\n        \"\"\"\n        import pinecone\n\n        index = pinecone.Index(index_name)\n        if \"include_values\" not in query_kwargs:\n            query_kwargs[\"include_values\"] = True\n        response = index.query(top_k=top_k, vector=vector, **query_kwargs)\n\n        documents = []\n        for match in response.matches:\n            if match.id not in id_to_text_map:\n      ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/pinecone.py", "file_name": "pinecone.py"}, "index": 2, "child_indices": [], "ref_doc_id": "c121f325702354416b70e9e38021ce04ff265381", "node_info": null}, "3": {"text": "match.id not in id_to_text_map:\n                raise ValueError(\"ID not found in id_to_text_map.\")\n            text = id_to_text_map[match.id]\n            embedding = match.values\n            if len(embedding) == 0:\n                embedding = None\n            documents.append(Document(text=text, embedding=embedding))\n\n        if not separate_documents:\n            text_list = [doc.get_text() for doc in documents]\n            text = \"\\n\\n\".join(text_list)\n            documents = [Document(text=text)]\n\n        return documents\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/pinecone.py", "file_name": "pinecone.py"}, "index": 3, "child_indices": [], "ref_doc_id": "c121f325702354416b70e9e38021ce04ff265381", "node_info": null}, "4": {"text": "PineconeReader is a class from the gpt_index/readers/pinecone.py file that is used to load data from Pinecone. It requires an API key and environment to be initialized, and then can be used to query the index with a vector, top_k, and query_kwargs. The response is a list of documents, each containing the text and embedding associated with the query. The documents can be returned separately or combined into one document.\n", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"4": {"text": "PineconeReader is a class from the gpt_index/readers/pinecone.py file that is used to load data from Pinecone. It requires an API key and environment to be initialized, and then can be used to query the index with a vector, top_k, and query_kwargs. The response is a list of documents, each containing the text and embedding associated with the query. The documents can be returned separately or combined into one document.\n", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"c121f325702354416b70e9e38021ce04ff265381": {"text": "\"\"\"Pinecone reader.\"\"\"\n\nfrom typing import Any, Dict, List, Optional\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\n\nclass PineconeReader(BaseReader):\n    \"\"\"Pinecone reader.\n\n    Args:\n        api_key (str): Pinecone API key.\n        environment (str): Pinecone environment.\n    \"\"\"\n\n    def __init__(self, api_key: str, environment: str):\n        \"\"\"Initialize with parameters.\"\"\"\n        try:\n            import pinecone  # noqa: F401\n        except ImportError:\n            raise ValueError(\n                \"`pinecone` package not found, please run `pip install pinecone-client`\"\n            )\n\n        self._api_key = api_key\n        self._environment = environment\n        pinecone.init(api_key=api_key, environment=environment)\n\n    def load_data(\n        self,\n        index_name: str,\n        id_to_text_map: Dict[str, str],\n        vector: Optional[List[float]],\n        top_k: int,\n        separate_documents: bool = True,\n        include_values: bool = True,\n        **query_kwargs: Any\n    ) -> List[Document]:\n        \"\"\"Load data from Pinecone.\n\n        Args:\n            index_name (str): Name of the index.\n            id_to_text_map (Dict[str, str]): A map from ID's to text.\n            separate_documents (Optional[bool]): Whether to return separate\n                documents per retrieved entry. Defaults to True.\n            vector (List[float]): Query vector.\n            top_k (int): Number of results to return.\n            include_values (bool): Whether to include the embedding in the response.\n                Defaults to True.\n            **query_kwargs: Keyword arguments to pass to the query.\n                Arguments are the exact same as those found in\n                Pinecone's reference documentation for the\n                query method.\n\n        Returns:\n            List[Document]: A list of documents.\n        \"\"\"\n        import pinecone\n\n        index = pinecone.Index(index_name)\n        if \"include_values\" not in query_kwargs:\n            query_kwargs[\"include_values\"] = True\n        response = index.query(top_k=top_k, vector=vector, **query_kwargs)\n\n        documents = []\n        for match in response.matches:\n            if match.id not in id_to_text_map:\n                raise ValueError(\"ID not found in id_to_text_map.\")\n            text = id_to_text_map[match.id]\n            embedding = match.values\n            if len(embedding) == 0:\n                embedding = None\n            documents.append(Document(text=text, embedding=embedding))\n\n        if not separate_documents:\n            text_list = [doc.get_text() for doc in documents]\n            text = \"\\n\\n\".join(text_list)\n            documents = [Document(text=text)]\n\n        return documents\n", "doc_id": "c121f325702354416b70e9e38021ce04ff265381", "embedding": null, "extra_info": {"file_path": "gpt_index/readers/pinecone.py", "file_name": "pinecone.py"}, "__type__": "Document"}, "029ede8e-e4b6-4b45-8a96-a5eb13547753": {"text": "\nPineconeReader is a class from the gpt_index/readers/pinecone.py file that provides an easy way to access the Pinecone API and retrieve data from the index. It requires an API key and environment to be initialized, and then can be used to query the index with a vector, top_k, and query_kwargs. The response is a list of documents, each containing the text and embedding associated with the query. The documents can be returned separately or combined into one document. Additionally, custom query parameters can be passed in, allowing for more specific results. The class provides a convenient way to access the Pinecone API and retrieve data from the index.", "doc_id": "029ede8e-e4b6-4b45-8a96-a5eb13547753", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Pinecone reader.\"\"\"\n\nfrom typing import Any, Dict, List, Optional\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\n\nclass PineconeReader(BaseReader):\n    \"\"\"Pinecone reader.\n\n    Args:\n        api_key (str): Pinecone API key.\n        environment (str): Pinecone environment.\n    \"\"\"\n\n    def __init__(self, api_key: str, environment: str):\n        \"\"\"Initialize with parameters.\"\"\"\n        try:\n            import pinecone  # noqa: F401\n        except ImportError:\n            raise ValueError(\n                \"`pinecone` package not found, please run `pip install pinecone-client`\"\n            )\n\n        self._api_key = api_key\n        self._environment = environment\n        pinecone.init(api_key=api_key, environment=environment)\n\n    def load_data(\n        self,\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/pinecone.py", "file_name": "pinecone.py"}, "index": 0, "child_indices": [], "ref_doc_id": "c121f325702354416b70e9e38021ce04ff265381", "node_info": null}, "1": {"text": "       self,\n        index_name: str,\n        id_to_text_map: Dict[str, str],\n        vector: Optional[List[float]],\n        top_k: int,\n        separate_documents: bool = True,\n        include_values: bool = True,\n        **query_kwargs: Any\n    ) -> List[Document]:\n        \"\"\"Load data from Pinecone.\n\n        Args:\n            index_name (str): Name of the index.\n            id_to_text_map (Dict[str, str]): A map from ID's to text.\n            separate_documents (Optional[bool]): Whether to return separate\n                documents per retrieved entry. Defaults to True.\n            vector (List[float]): Query vector.\n            top_k (int): Number of results to return.\n            include_values (bool): Whether to include the embedding in the", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/pinecone.py", "file_name": "pinecone.py"}, "index": 1, "child_indices": [], "ref_doc_id": "c121f325702354416b70e9e38021ce04ff265381", "node_info": null}, "2": {"text": "      include_values (bool): Whether to include the embedding in the response.\n                Defaults to True.\n            **query_kwargs: Keyword arguments to pass to the query.\n                Arguments are the exact same as those found in\n                Pinecone's reference documentation for the\n                query method.\n\n        Returns:\n            List[Document]: A list of documents.\n        \"\"\"\n        import pinecone\n\n        index = pinecone.Index(index_name)\n        if \"include_values\" not in query_kwargs:\n            query_kwargs[\"include_values\"] = True\n        response = index.query(top_k=top_k, vector=vector, **query_kwargs)\n\n        documents = []\n        for match in response.matches:\n            if match.id not in id_to_text_map:\n      ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/pinecone.py", "file_name": "pinecone.py"}, "index": 2, "child_indices": [], "ref_doc_id": "c121f325702354416b70e9e38021ce04ff265381", "node_info": null}, "3": {"text": "match.id not in id_to_text_map:\n                raise ValueError(\"ID not found in id_to_text_map.\")\n            text = id_to_text_map[match.id]\n            embedding = match.values\n            if len(embedding) == 0:\n                embedding = None\n            documents.append(Document(text=text, embedding=embedding))\n\n        if not separate_documents:\n            text_list = [doc.get_text() for doc in documents]\n            text = \"\\n\\n\".join(text_list)\n            documents = [Document(text=text)]\n\n        return documents\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/pinecone.py", "file_name": "pinecone.py"}, "index": 3, "child_indices": [], "ref_doc_id": "c121f325702354416b70e9e38021ce04ff265381", "node_info": null}, "4": {"text": "PineconeReader is a class from the gpt_index/readers/pinecone.py file that is used to load data from Pinecone. It requires an API key and environment to be initialized, and then can be used to query the index with a vector, top_k, and query_kwargs. The response is a list of documents, each containing the text and embedding associated with the query. The documents can be returned separately or combined into one document.\n", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"4": {"text": "PineconeReader is a class from the gpt_index/readers/pinecone.py file that is used to load data from Pinecone. It requires an API key and environment to be initialized, and then can be used to query the index with a vector, top_k, and query_kwargs. The response is a list of documents, each containing the text and embedding associated with the query. The documents can be returned separately or combined into one document.\n", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}