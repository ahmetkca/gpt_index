{"index_struct": {"text": "\nQdrantReader is a class from the gpt_index/readers/qdrant.py file that provides an easy way to access documents from Qdrant collections. It uses the qdrant_client package to connect to the Qdrant service and authenticate with an API key. The class has a load_data() method that takes in a collection_name, query_vector, and limit, and returns a list of documents. The documents are created from the payloads retrieved from the Qdrant service, and contain a doc_id, text, and embedding vector. This code allows users to quickly and easily access documents from existing Qdrant collections.", "doc_id": "3ea6de6d-b78d-4e8a-8c42-2a4f532272d1", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Qdrant reader.\"\"\"\n\nfrom typing import List, Optional, cast\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\n\nclass QdrantReader(BaseReader):\n    \"\"\"Qdrant reader.\n\n    Retrieve documents from existing Qdrant collections.\n\n    Args:\n        host: Host name of Qdrant service.\n        port: Port of the REST API interface. Default: 6333\n        grpc_port: Port of the gRPC interface. Default: 6334\n        prefer_grpc: If `true` - use gPRC interface whenever possible in custom methods.\n        https: If `true` - use HTTPS(SSL) protocol. Default: `false`\n        api_key: API key for authentication in Qdrant Cloud. Default: `None`\n        prefix:\n            If not `None` - add `prefix` to the REST URL path.\n            Example: `service/v1` will result in\n            `http://localhost:6333/service/v1/{qdrant-endpoint}` for REST", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/qdrant.py", "file_name": "qdrant.py"}, "index": 0, "child_indices": [], "ref_doc_id": "5088ae6098fcc16c6105a3cbf9b6b1c7dac5ec53", "node_info": null}, "1": {"text": "for REST API.\n            Default: `None`\n        timeout:\n            Timeout for REST and gRPC API requests.\n            Default: 5.0 seconds for REST and unlimited for gRPC\n    \"\"\"\n\n    def __init__(\n        self,\n        host: str,\n        port: int = 6333,\n        grpc_port: int = 6334,\n        prefer_grpc: bool = False,\n        https: Optional[bool] = None,\n        api_key: Optional[str] = None,\n        prefix: Optional[str] = None,\n        timeout: Optional[float] = None,\n    ):\n        \"\"\"Initialize with parameters.\"\"\"\n        import_err_msg = (\n            \"`qdrant-client` package not found, please run `pip install qdrant-client`\"\n        )\n        try:\n            import", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/qdrant.py", "file_name": "qdrant.py"}, "index": 1, "child_indices": [], "ref_doc_id": "5088ae6098fcc16c6105a3cbf9b6b1c7dac5ec53", "node_info": null}, "2": {"text": "     try:\n            import qdrant_client  # noqa: F401\n        except ImportError:\n            raise ValueError(import_err_msg)\n\n        self._client = qdrant_client.QdrantClient(\n            host=host,\n            port=port,\n            grpc_port=grpc_port,\n            prefer_grpc=prefer_grpc,\n            https=https,\n            api_key=api_key,\n            prefix=prefix,\n            timeout=timeout,\n        )\n\n    def load_data(\n        self,\n        collection_name: str,\n        query_vector: List[float],\n        limit: int = 10,\n    ) -> List[Document]:\n        \"\"\"Load data from Qdrant.\n\n        Args:\n    ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/qdrant.py", "file_name": "qdrant.py"}, "index": 2, "child_indices": [], "ref_doc_id": "5088ae6098fcc16c6105a3cbf9b6b1c7dac5ec53", "node_info": null}, "3": {"text": "from Qdrant.\n\n        Args:\n            collection_name (str): Name of the Qdrant collection.\n            query_vector (List[float]): Query vector.\n            limit (int): Number of results to return.\n\n        Returns:\n            List[Document]: A list of documents.\n        \"\"\"\n        from qdrant_client.http.models.models import Payload\n\n        response = self._client.search(\n            collection_name=collection_name,\n            query_vector=query_vector,\n            with_vectors=True,\n            with_payload=True,\n            limit=limit,\n        )\n\n        documents = []\n        for point in response:\n            payload = cast(Payload, point)\n            try:\n                vector", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/qdrant.py", "file_name": "qdrant.py"}, "index": 3, "child_indices": [], "ref_doc_id": "5088ae6098fcc16c6105a3cbf9b6b1c7dac5ec53", "node_info": null}, "4": {"text": " try:\n                vector = cast(List[float], point.vector)\n            except ValueError as e:\n                raise ValueError(\"Could not cast vector to List[float].\") from e\n            document = Document(\n                doc_id=payload.get(\"doc_id\"),\n                text=payload.get(\"text\"),\n                embedding=vector,\n            )\n            documents.append(document)\n\n        return documents\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/qdrant.py", "file_name": "qdrant.py"}, "index": 4, "child_indices": [], "ref_doc_id": "5088ae6098fcc16c6105a3cbf9b6b1c7dac5ec53", "node_info": null}, "5": {"text": "QdrantReader is a class from the gpt_index/readers/qdrant.py file that retrieves documents from existing Qdrant collections. It takes in parameters such as host, port, grpc_port, prefer_grpc, https, api_key, prefix, and timeout. It also has a load_data() method that takes in a collection_name, query_vector, and limit, and returns a list of documents. The documents are created from the payloads retrieved from the Qdrant service, and contain a doc_id, text, and embedding vector.", "doc_id": null, "embedding": null, "extra_info": null, "index": 5, "child_indices": [0, 1, 2, 3, 4], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"5": {"text": "QdrantReader is a class from the gpt_index/readers/qdrant.py file that retrieves documents from existing Qdrant collections. It takes in parameters such as host, port, grpc_port, prefer_grpc, https, api_key, prefix, and timeout. It also has a load_data() method that takes in a collection_name, query_vector, and limit, and returns a list of documents. The documents are created from the payloads retrieved from the Qdrant service, and contain a doc_id, text, and embedding vector.", "doc_id": null, "embedding": null, "extra_info": null, "index": 5, "child_indices": [0, 1, 2, 3, 4], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"5088ae6098fcc16c6105a3cbf9b6b1c7dac5ec53": {"text": "\"\"\"Qdrant reader.\"\"\"\n\nfrom typing import List, Optional, cast\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\n\nclass QdrantReader(BaseReader):\n    \"\"\"Qdrant reader.\n\n    Retrieve documents from existing Qdrant collections.\n\n    Args:\n        host: Host name of Qdrant service.\n        port: Port of the REST API interface. Default: 6333\n        grpc_port: Port of the gRPC interface. Default: 6334\n        prefer_grpc: If `true` - use gPRC interface whenever possible in custom methods.\n        https: If `true` - use HTTPS(SSL) protocol. Default: `false`\n        api_key: API key for authentication in Qdrant Cloud. Default: `None`\n        prefix:\n            If not `None` - add `prefix` to the REST URL path.\n            Example: `service/v1` will result in\n            `http://localhost:6333/service/v1/{qdrant-endpoint}` for REST API.\n            Default: `None`\n        timeout:\n            Timeout for REST and gRPC API requests.\n            Default: 5.0 seconds for REST and unlimited for gRPC\n    \"\"\"\n\n    def __init__(\n        self,\n        host: str,\n        port: int = 6333,\n        grpc_port: int = 6334,\n        prefer_grpc: bool = False,\n        https: Optional[bool] = None,\n        api_key: Optional[str] = None,\n        prefix: Optional[str] = None,\n        timeout: Optional[float] = None,\n    ):\n        \"\"\"Initialize with parameters.\"\"\"\n        import_err_msg = (\n            \"`qdrant-client` package not found, please run `pip install qdrant-client`\"\n        )\n        try:\n            import qdrant_client  # noqa: F401\n        except ImportError:\n            raise ValueError(import_err_msg)\n\n        self._client = qdrant_client.QdrantClient(\n            host=host,\n            port=port,\n            grpc_port=grpc_port,\n            prefer_grpc=prefer_grpc,\n            https=https,\n            api_key=api_key,\n            prefix=prefix,\n            timeout=timeout,\n        )\n\n    def load_data(\n        self,\n        collection_name: str,\n        query_vector: List[float],\n        limit: int = 10,\n    ) -> List[Document]:\n        \"\"\"Load data from Qdrant.\n\n        Args:\n            collection_name (str): Name of the Qdrant collection.\n            query_vector (List[float]): Query vector.\n            limit (int): Number of results to return.\n\n        Returns:\n            List[Document]: A list of documents.\n        \"\"\"\n        from qdrant_client.http.models.models import Payload\n\n        response = self._client.search(\n            collection_name=collection_name,\n            query_vector=query_vector,\n            with_vectors=True,\n            with_payload=True,\n            limit=limit,\n        )\n\n        documents = []\n        for point in response:\n            payload = cast(Payload, point)\n            try:\n                vector = cast(List[float], point.vector)\n            except ValueError as e:\n                raise ValueError(\"Could not cast vector to List[float].\") from e\n            document = Document(\n                doc_id=payload.get(\"doc_id\"),\n                text=payload.get(\"text\"),\n                embedding=vector,\n            )\n            documents.append(document)\n\n        return documents\n", "doc_id": "5088ae6098fcc16c6105a3cbf9b6b1c7dac5ec53", "embedding": null, "extra_info": {"file_path": "gpt_index/readers/qdrant.py", "file_name": "qdrant.py"}, "__type__": "Document"}, "3ea6de6d-b78d-4e8a-8c42-2a4f532272d1": {"text": "\nQdrantReader is a class from the gpt_index/readers/qdrant.py file that provides an easy way to access documents from Qdrant collections. It uses the qdrant_client package to connect to the Qdrant service and authenticate with an API key. The class has a load_data() method that takes in a collection_name, query_vector, and limit, and returns a list of documents. The documents are created from the payloads retrieved from the Qdrant service, and contain a doc_id, text, and embedding vector. This code allows users to quickly and easily access documents from existing Qdrant collections.", "doc_id": "3ea6de6d-b78d-4e8a-8c42-2a4f532272d1", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Qdrant reader.\"\"\"\n\nfrom typing import List, Optional, cast\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\n\nclass QdrantReader(BaseReader):\n    \"\"\"Qdrant reader.\n\n    Retrieve documents from existing Qdrant collections.\n\n    Args:\n        host: Host name of Qdrant service.\n        port: Port of the REST API interface. Default: 6333\n        grpc_port: Port of the gRPC interface. Default: 6334\n        prefer_grpc: If `true` - use gPRC interface whenever possible in custom methods.\n        https: If `true` - use HTTPS(SSL) protocol. Default: `false`\n        api_key: API key for authentication in Qdrant Cloud. Default: `None`\n        prefix:\n            If not `None` - add `prefix` to the REST URL path.\n            Example: `service/v1` will result in\n            `http://localhost:6333/service/v1/{qdrant-endpoint}` for REST", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/qdrant.py", "file_name": "qdrant.py"}, "index": 0, "child_indices": [], "ref_doc_id": "5088ae6098fcc16c6105a3cbf9b6b1c7dac5ec53", "node_info": null}, "1": {"text": "for REST API.\n            Default: `None`\n        timeout:\n            Timeout for REST and gRPC API requests.\n            Default: 5.0 seconds for REST and unlimited for gRPC\n    \"\"\"\n\n    def __init__(\n        self,\n        host: str,\n        port: int = 6333,\n        grpc_port: int = 6334,\n        prefer_grpc: bool = False,\n        https: Optional[bool] = None,\n        api_key: Optional[str] = None,\n        prefix: Optional[str] = None,\n        timeout: Optional[float] = None,\n    ):\n        \"\"\"Initialize with parameters.\"\"\"\n        import_err_msg = (\n            \"`qdrant-client` package not found, please run `pip install qdrant-client`\"\n        )\n        try:\n            import", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/qdrant.py", "file_name": "qdrant.py"}, "index": 1, "child_indices": [], "ref_doc_id": "5088ae6098fcc16c6105a3cbf9b6b1c7dac5ec53", "node_info": null}, "2": {"text": "     try:\n            import qdrant_client  # noqa: F401\n        except ImportError:\n            raise ValueError(import_err_msg)\n\n        self._client = qdrant_client.QdrantClient(\n            host=host,\n            port=port,\n            grpc_port=grpc_port,\n            prefer_grpc=prefer_grpc,\n            https=https,\n            api_key=api_key,\n            prefix=prefix,\n            timeout=timeout,\n        )\n\n    def load_data(\n        self,\n        collection_name: str,\n        query_vector: List[float],\n        limit: int = 10,\n    ) -> List[Document]:\n        \"\"\"Load data from Qdrant.\n\n        Args:\n    ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/qdrant.py", "file_name": "qdrant.py"}, "index": 2, "child_indices": [], "ref_doc_id": "5088ae6098fcc16c6105a3cbf9b6b1c7dac5ec53", "node_info": null}, "3": {"text": "from Qdrant.\n\n        Args:\n            collection_name (str): Name of the Qdrant collection.\n            query_vector (List[float]): Query vector.\n            limit (int): Number of results to return.\n\n        Returns:\n            List[Document]: A list of documents.\n        \"\"\"\n        from qdrant_client.http.models.models import Payload\n\n        response = self._client.search(\n            collection_name=collection_name,\n            query_vector=query_vector,\n            with_vectors=True,\n            with_payload=True,\n            limit=limit,\n        )\n\n        documents = []\n        for point in response:\n            payload = cast(Payload, point)\n            try:\n                vector", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/qdrant.py", "file_name": "qdrant.py"}, "index": 3, "child_indices": [], "ref_doc_id": "5088ae6098fcc16c6105a3cbf9b6b1c7dac5ec53", "node_info": null}, "4": {"text": " try:\n                vector = cast(List[float], point.vector)\n            except ValueError as e:\n                raise ValueError(\"Could not cast vector to List[float].\") from e\n            document = Document(\n                doc_id=payload.get(\"doc_id\"),\n                text=payload.get(\"text\"),\n                embedding=vector,\n            )\n            documents.append(document)\n\n        return documents\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/qdrant.py", "file_name": "qdrant.py"}, "index": 4, "child_indices": [], "ref_doc_id": "5088ae6098fcc16c6105a3cbf9b6b1c7dac5ec53", "node_info": null}, "5": {"text": "QdrantReader is a class from the gpt_index/readers/qdrant.py file that retrieves documents from existing Qdrant collections. It takes in parameters such as host, port, grpc_port, prefer_grpc, https, api_key, prefix, and timeout. It also has a load_data() method that takes in a collection_name, query_vector, and limit, and returns a list of documents. The documents are created from the payloads retrieved from the Qdrant service, and contain a doc_id, text, and embedding vector.", "doc_id": null, "embedding": null, "extra_info": null, "index": 5, "child_indices": [0, 1, 2, 3, 4], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"5": {"text": "QdrantReader is a class from the gpt_index/readers/qdrant.py file that retrieves documents from existing Qdrant collections. It takes in parameters such as host, port, grpc_port, prefer_grpc, https, api_key, prefix, and timeout. It also has a load_data() method that takes in a collection_name, query_vector, and limit, and returns a list of documents. The documents are created from the payloads retrieved from the Qdrant service, and contain a doc_id, text, and embedding vector.", "doc_id": null, "embedding": null, "extra_info": null, "index": 5, "child_indices": [0, 1, 2, 3, 4], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}