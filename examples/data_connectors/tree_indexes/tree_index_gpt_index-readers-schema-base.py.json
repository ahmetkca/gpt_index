{"index_struct": {"text": "\nThis code file provides a generic interface for data documents, allowing them to be easily converted to and from the LangChain document format. It contains a Document class which is used to connect to data sources and store information about the document. The class has methods to get the type of the document, convert the document to and from the LangChain document format, and a post-init method to ensure the text field is set. This allows for easy manipulation of data documents, allowing them to be easily converted and used in different formats.", "doc_id": "40f2adf7-7aae-4535-9959-94eb6127daf4", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Base schema for readers.\"\"\"\nfrom dataclasses import dataclass\n\nfrom langchain.docstore.document import Document as LCDocument\n\nfrom gpt_index.schema import BaseDocument\n\n\n@dataclass\nclass Document(BaseDocument):\n    \"\"\"Generic interface for a data document.\n\n    This document connects to data sources.\n\n    \"\"\"\n\n    def __post_init__(self) -> None:\n        \"\"\"Post init.\"\"\"\n        if self.text is None:\n            raise ValueError(\"text field not set.\")\n\n    @classmethod\n    def get_type(cls) -> str:\n        \"\"\"Get Document type.\"\"\"\n        return \"Document\"\n\n    def to_langchain_format(self) -> LCDocument:\n        \"\"\"Convert struct to LangChain document format.\"\"\"\n        metadata = self.extra_info or {}\n        return LCDocument(page_content=self.text, metadata=metadata)\n\n    @classmethod\n    def from_langchain_format(cls, doc: LCDocument) -> \"Document\":\n        \"\"\"Convert struct from LangChain document format.\"\"\"\n        return", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/schema/base.py", "file_name": "base.py"}, "index": 0, "child_indices": [], "ref_doc_id": "753bf93eae607ae72cccb26ebc7ec69ede6abb9e", "node_info": null}, "1": {"text": "struct from LangChain document format.\"\"\"\n        return cls(text=doc.page_content, extra_info=doc.metadata)\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/schema/base.py", "file_name": "base.py"}, "index": 1, "child_indices": [], "ref_doc_id": "753bf93eae607ae72cccb26ebc7ec69ede6abb9e", "node_info": null}, "2": {"text": "This code file provides a base schema for readers. It contains a Document class which is used to connect to data sources. It has methods to get the type of the document, convert the document to and from the LangChain document format, and a post-init method to ensure the text field is set.\n\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"2": {"text": "This code file provides a base schema for readers. It contains a Document class which is used to connect to data sources. It has methods to get the type of the document, convert the document to and from the LangChain document format, and a post-init method to ensure the text field is set.\n\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"753bf93eae607ae72cccb26ebc7ec69ede6abb9e": {"text": "\"\"\"Base schema for readers.\"\"\"\nfrom dataclasses import dataclass\n\nfrom langchain.docstore.document import Document as LCDocument\n\nfrom gpt_index.schema import BaseDocument\n\n\n@dataclass\nclass Document(BaseDocument):\n    \"\"\"Generic interface for a data document.\n\n    This document connects to data sources.\n\n    \"\"\"\n\n    def __post_init__(self) -> None:\n        \"\"\"Post init.\"\"\"\n        if self.text is None:\n            raise ValueError(\"text field not set.\")\n\n    @classmethod\n    def get_type(cls) -> str:\n        \"\"\"Get Document type.\"\"\"\n        return \"Document\"\n\n    def to_langchain_format(self) -> LCDocument:\n        \"\"\"Convert struct to LangChain document format.\"\"\"\n        metadata = self.extra_info or {}\n        return LCDocument(page_content=self.text, metadata=metadata)\n\n    @classmethod\n    def from_langchain_format(cls, doc: LCDocument) -> \"Document\":\n        \"\"\"Convert struct from LangChain document format.\"\"\"\n        return cls(text=doc.page_content, extra_info=doc.metadata)\n", "doc_id": "753bf93eae607ae72cccb26ebc7ec69ede6abb9e", "embedding": null, "extra_info": {"file_path": "gpt_index/readers/schema/base.py", "file_name": "base.py"}, "__type__": "Document"}, "40f2adf7-7aae-4535-9959-94eb6127daf4": {"text": "\nThis code file provides a generic interface for data documents, allowing them to be easily converted to and from the LangChain document format. It contains a Document class which is used to connect to data sources and store information about the document. The class has methods to get the type of the document, convert the document to and from the LangChain document format, and a post-init method to ensure the text field is set. This allows for easy manipulation of data documents, allowing them to be easily converted and used in different formats.", "doc_id": "40f2adf7-7aae-4535-9959-94eb6127daf4", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Base schema for readers.\"\"\"\nfrom dataclasses import dataclass\n\nfrom langchain.docstore.document import Document as LCDocument\n\nfrom gpt_index.schema import BaseDocument\n\n\n@dataclass\nclass Document(BaseDocument):\n    \"\"\"Generic interface for a data document.\n\n    This document connects to data sources.\n\n    \"\"\"\n\n    def __post_init__(self) -> None:\n        \"\"\"Post init.\"\"\"\n        if self.text is None:\n            raise ValueError(\"text field not set.\")\n\n    @classmethod\n    def get_type(cls) -> str:\n        \"\"\"Get Document type.\"\"\"\n        return \"Document\"\n\n    def to_langchain_format(self) -> LCDocument:\n        \"\"\"Convert struct to LangChain document format.\"\"\"\n        metadata = self.extra_info or {}\n        return LCDocument(page_content=self.text, metadata=metadata)\n\n    @classmethod\n    def from_langchain_format(cls, doc: LCDocument) -> \"Document\":\n        \"\"\"Convert struct from LangChain document format.\"\"\"\n        return", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/schema/base.py", "file_name": "base.py"}, "index": 0, "child_indices": [], "ref_doc_id": "753bf93eae607ae72cccb26ebc7ec69ede6abb9e", "node_info": null}, "1": {"text": "struct from LangChain document format.\"\"\"\n        return cls(text=doc.page_content, extra_info=doc.metadata)\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/schema/base.py", "file_name": "base.py"}, "index": 1, "child_indices": [], "ref_doc_id": "753bf93eae607ae72cccb26ebc7ec69ede6abb9e", "node_info": null}, "2": {"text": "This code file provides a base schema for readers. It contains a Document class which is used to connect to data sources. It has methods to get the type of the document, convert the document to and from the LangChain document format, and a post-init method to ensure the text field is set.\n\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"2": {"text": "This code file provides a base schema for readers. It contains a Document class which is used to connect to data sources. It has methods to get the type of the document, convert the document to and from the LangChain document format, and a post-init method to ensure the text field is set.\n\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}