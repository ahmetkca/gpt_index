{"index_struct": {"text": "\nThe SlackReader class is a reader for the GPT-Index library that reads conversations from Slack channels. It requires a Slack token, either provided as an argument or set as an environment variable. The load_data() method takes a list of channel ids and returns a list of documents containing the conversation content. The _read_message() and _read_channel() methods are used to read the messages and channels respectively. The _read_message() method reads a single message and returns the text of the message, while the _read_channel() method reads all messages in a channel and returns the text of all messages in the channel. The SlackReader class provides a convenient way to read conversations from Slack channels and store them as documents, making it easy to access and analyze the data.", "doc_id": "7ec4e42b-7b85-43fd-8be6-b25b3d34bdf3", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Slack reader.\"\"\"\nimport logging\nimport os\nimport time\nfrom typing import List, Optional\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\n\nclass SlackReader(BaseReader):\n    \"\"\"Slack reader.\n\n    Reads conversations from channels.\n\n    Args:\n        slack_token (Optional[str]): Slack token. If not provided, we\n            assume the environment variable `SLACK_BOT_TOKEN` is set.\n\n    \"\"\"\n\n    def __init__(self, slack_token: Optional[str] = None) -> None:\n        \"\"\"Initialize with parameters.\"\"\"\n        try:\n            from slack_sdk import WebClient\n        except ImportError:\n            raise ValueError(\n                \"`slack_sdk` package not found, please run `pip install slack_sdk`\"\n            )\n        if slack_token is None:\n            slack_token =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/slack.py", "file_name": "slack.py"}, "index": 0, "child_indices": [], "ref_doc_id": "a0db9d42d0b3dcf85ce915984e4159a8d57fd656", "node_info": null}, "1": {"text": "is None:\n            slack_token = os.environ[\"SLACK_BOT_TOKEN\"]\n            if slack_token is None:\n                raise ValueError(\n                    \"Must specify `slack_token` or set environment \"\n                    \"variable `SLACK_BOT_TOKEN`.\"\n                )\n        self.client = WebClient(token=slack_token)\n        res = self.client.api_test()\n        if not res[\"ok\"]:\n            raise ValueError(f\"Error initializing Slack API: {res['error']}\")\n\n    def _read_message(self, channel_id: str, message_ts: str) -> str:\n        from slack_sdk.errors import SlackApiError\n\n        \"\"\"Read a message.\"\"\"\n\n        messages_text = []\n        next_cursor = None\n        while True:\n   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/slack.py", "file_name": "slack.py"}, "index": 1, "child_indices": [], "ref_doc_id": "a0db9d42d0b3dcf85ce915984e4159a8d57fd656", "node_info": null}, "2": {"text": "= None\n        while True:\n            try:\n                # https://slack.com/api/conversations.replies\n                # List all replies to a message, including the message itself.\n                result = self.client.conversations_replies(\n                    channel=channel_id, ts=message_ts, cursor=next_cursor\n                )\n                messages = result[\"messages\"]\n                for message in messages:\n                    messages_text.append(message[\"text\"])\n\n                if not result[\"has_more\"]:\n                    break\n\n                next_cursor = result[\"response_metadata\"][\"next_cursor\"]\n            except SlackApiError", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/slack.py", "file_name": "slack.py"}, "index": 2, "child_indices": [], "ref_doc_id": "a0db9d42d0b3dcf85ce915984e4159a8d57fd656", "node_info": null}, "3": {"text": "           except SlackApiError as e:\n                if e.response[\"error\"] == \"ratelimited\":\n                    logging.error(\n                        \"Rate limit error reached, sleeping for: {} seconds\".format(\n                            e.response.headers[\"retry-after\"]\n                        )\n                    )\n                    time.sleep(int(e.response.headers[\"retry-after\"]))\n                else:\n                    logging.error(\"Error parsing conversation replies: {}\".format(e))\n\n        return \"\\n\\n\".join(messages_text)\n\n    def _read_channel(self, channel_id: str) -> str:\n        from", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/slack.py", "file_name": "slack.py"}, "index": 3, "child_indices": [], "ref_doc_id": "a0db9d42d0b3dcf85ce915984e4159a8d57fd656", "node_info": null}, "4": {"text": "channel_id: str) -> str:\n        from slack_sdk.errors import SlackApiError\n\n        \"\"\"Read a channel.\"\"\"\n\n        result_messages = []\n        next_cursor = None\n        while True:\n            try:\n                # Call the conversations.history method using the WebClient\n                # conversations.history returns the first 100 messages by default\n                # These results are paginated,\n                # see: https://api.slack.com/methods/conversations.history$pagination\n                result = self.client.conversations_history(\n                    channel=channel_id, cursor=next_cursor\n                )\n                conversation_history = result[\"messages\"]\n                # Print results\n    ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/slack.py", "file_name": "slack.py"}, "index": 4, "child_indices": [], "ref_doc_id": "a0db9d42d0b3dcf85ce915984e4159a8d57fd656", "node_info": null}, "5": {"text": "            # Print results\n                logging.info(\n                    \"{} messages found in {}\".format(len(conversation_history), id)\n                )\n                for message in conversation_history:\n                    result_messages.append(\n                        self._read_message(channel_id, message[\"ts\"])\n                    )\n\n                if not result[\"has_more\"]:\n                    break\n                next_cursor = result[\"response_metadata\"][\"next_cursor\"]\n\n            except SlackApiError as e:\n                if e.response[\"error\"] == \"ratelimited\":\n              ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/slack.py", "file_name": "slack.py"}, "index": 5, "child_indices": [], "ref_doc_id": "a0db9d42d0b3dcf85ce915984e4159a8d57fd656", "node_info": null}, "6": {"text": "== \"ratelimited\":\n                    logging.error(\n                        \"Rate limit error reached, sleeping for: {} seconds\".format(\n                            e.response.headers[\"retry-after\"]\n                        )\n                    )\n                    time.sleep(int(e.response.headers[\"retry-after\"]))\n                else:\n                    logging.error(\"Error parsing conversation replies: {}\".format(e))\n\n        return \"\\n\\n\".join(result_messages)\n\n    def load_data(self, channel_ids: List[str]) -> List[Document]:\n        \"\"\"Load data from the input directory.\n\n        Args:\n            channel_ids (List[str]): List of channel ids", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/slack.py", "file_name": "slack.py"}, "index": 6, "child_indices": [], "ref_doc_id": "a0db9d42d0b3dcf85ce915984e4159a8d57fd656", "node_info": null}, "7": {"text": "       channel_ids (List[str]): List of channel ids to read.\n\n        Returns:\n            List[Document]: List of documents.\n\n        \"\"\"\n        results = []\n        for channel_id in channel_ids:\n            channel_content = self._read_channel(channel_id)\n            results.append(\n                Document(channel_content, extra_info={\"channel\": channel_id})\n            )\n        return results\n\n\nif __name__ == \"__main__\":\n    reader = SlackReader()\n    logging.info(reader.load_data(channel_ids=[\"C04DC2VUY3F\"]))\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/slack.py", "file_name": "slack.py"}, "index": 7, "child_indices": [], "ref_doc_id": "a0db9d42d0b3dcf85ce915984e4159a8d57fd656", "node_info": null}, "8": {"text": "The SlackReader class is a reader for the GPT-Index library. It reads conversations from Slack channels and returns a list of documents containing the conversation content. It requires a Slack token, either provided as an argument or set as an environment variable. The load_data() method takes a list of channel ids and returns a list of documents containing the conversation content. The _read_message() and _read_channel() methods are used to read the messages and channels respectively.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 8, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"8": {"text": "The SlackReader class is a reader for the GPT-Index library. It reads conversations from Slack channels and returns a list of documents containing the conversation content. It requires a Slack token, either provided as an argument or set as an environment variable. The load_data() method takes a list of channel ids and returns a list of documents containing the conversation content. The _read_message() and _read_channel() methods are used to read the messages and channels respectively.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 8, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"a0db9d42d0b3dcf85ce915984e4159a8d57fd656": {"text": "\"\"\"Slack reader.\"\"\"\nimport logging\nimport os\nimport time\nfrom typing import List, Optional\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\n\nclass SlackReader(BaseReader):\n    \"\"\"Slack reader.\n\n    Reads conversations from channels.\n\n    Args:\n        slack_token (Optional[str]): Slack token. If not provided, we\n            assume the environment variable `SLACK_BOT_TOKEN` is set.\n\n    \"\"\"\n\n    def __init__(self, slack_token: Optional[str] = None) -> None:\n        \"\"\"Initialize with parameters.\"\"\"\n        try:\n            from slack_sdk import WebClient\n        except ImportError:\n            raise ValueError(\n                \"`slack_sdk` package not found, please run `pip install slack_sdk`\"\n            )\n        if slack_token is None:\n            slack_token = os.environ[\"SLACK_BOT_TOKEN\"]\n            if slack_token is None:\n                raise ValueError(\n                    \"Must specify `slack_token` or set environment \"\n                    \"variable `SLACK_BOT_TOKEN`.\"\n                )\n        self.client = WebClient(token=slack_token)\n        res = self.client.api_test()\n        if not res[\"ok\"]:\n            raise ValueError(f\"Error initializing Slack API: {res['error']}\")\n\n    def _read_message(self, channel_id: str, message_ts: str) -> str:\n        from slack_sdk.errors import SlackApiError\n\n        \"\"\"Read a message.\"\"\"\n\n        messages_text = []\n        next_cursor = None\n        while True:\n            try:\n                # https://slack.com/api/conversations.replies\n                # List all replies to a message, including the message itself.\n                result = self.client.conversations_replies(\n                    channel=channel_id, ts=message_ts, cursor=next_cursor\n                )\n                messages = result[\"messages\"]\n                for message in messages:\n                    messages_text.append(message[\"text\"])\n\n                if not result[\"has_more\"]:\n                    break\n\n                next_cursor = result[\"response_metadata\"][\"next_cursor\"]\n            except SlackApiError as e:\n                if e.response[\"error\"] == \"ratelimited\":\n                    logging.error(\n                        \"Rate limit error reached, sleeping for: {} seconds\".format(\n                            e.response.headers[\"retry-after\"]\n                        )\n                    )\n                    time.sleep(int(e.response.headers[\"retry-after\"]))\n                else:\n                    logging.error(\"Error parsing conversation replies: {}\".format(e))\n\n        return \"\\n\\n\".join(messages_text)\n\n    def _read_channel(self, channel_id: str) -> str:\n        from slack_sdk.errors import SlackApiError\n\n        \"\"\"Read a channel.\"\"\"\n\n        result_messages = []\n        next_cursor = None\n        while True:\n            try:\n                # Call the conversations.history method using the WebClient\n                # conversations.history returns the first 100 messages by default\n                # These results are paginated,\n                # see: https://api.slack.com/methods/conversations.history$pagination\n                result = self.client.conversations_history(\n                    channel=channel_id, cursor=next_cursor\n                )\n                conversation_history = result[\"messages\"]\n                # Print results\n                logging.info(\n                    \"{} messages found in {}\".format(len(conversation_history), id)\n                )\n                for message in conversation_history:\n                    result_messages.append(\n                        self._read_message(channel_id, message[\"ts\"])\n                    )\n\n                if not result[\"has_more\"]:\n                    break\n                next_cursor = result[\"response_metadata\"][\"next_cursor\"]\n\n            except SlackApiError as e:\n                if e.response[\"error\"] == \"ratelimited\":\n                    logging.error(\n                        \"Rate limit error reached, sleeping for: {} seconds\".format(\n                            e.response.headers[\"retry-after\"]\n                        )\n                    )\n                    time.sleep(int(e.response.headers[\"retry-after\"]))\n                else:\n                    logging.error(\"Error parsing conversation replies: {}\".format(e))\n\n        return \"\\n\\n\".join(result_messages)\n\n    def load_data(self, channel_ids: List[str]) -> List[Document]:\n        \"\"\"Load data from the input directory.\n\n        Args:\n            channel_ids (List[str]): List of channel ids to read.\n\n        Returns:\n            List[Document]: List of documents.\n\n        \"\"\"\n        results = []\n        for channel_id in channel_ids:\n            channel_content = self._read_channel(channel_id)\n            results.append(\n                Document(channel_content, extra_info={\"channel\": channel_id})\n            )\n        return results\n\n\nif __name__ == \"__main__\":\n    reader = SlackReader()\n    logging.info(reader.load_data(channel_ids=[\"C04DC2VUY3F\"]))\n", "doc_id": "a0db9d42d0b3dcf85ce915984e4159a8d57fd656", "embedding": null, "extra_info": {"file_path": "gpt_index/readers/slack.py", "file_name": "slack.py"}, "__type__": "Document"}, "7ec4e42b-7b85-43fd-8be6-b25b3d34bdf3": {"text": "\nThe SlackReader class is a reader for the GPT-Index library that reads conversations from Slack channels. It requires a Slack token, either provided as an argument or set as an environment variable. The load_data() method takes a list of channel ids and returns a list of documents containing the conversation content. The _read_message() and _read_channel() methods are used to read the messages and channels respectively. The _read_message() method reads a single message and returns the text of the message, while the _read_channel() method reads all messages in a channel and returns the text of all messages in the channel. The SlackReader class provides a convenient way to read conversations from Slack channels and store them as documents, making it easy to access and analyze the data.", "doc_id": "7ec4e42b-7b85-43fd-8be6-b25b3d34bdf3", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Slack reader.\"\"\"\nimport logging\nimport os\nimport time\nfrom typing import List, Optional\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\n\nclass SlackReader(BaseReader):\n    \"\"\"Slack reader.\n\n    Reads conversations from channels.\n\n    Args:\n        slack_token (Optional[str]): Slack token. If not provided, we\n            assume the environment variable `SLACK_BOT_TOKEN` is set.\n\n    \"\"\"\n\n    def __init__(self, slack_token: Optional[str] = None) -> None:\n        \"\"\"Initialize with parameters.\"\"\"\n        try:\n            from slack_sdk import WebClient\n        except ImportError:\n            raise ValueError(\n                \"`slack_sdk` package not found, please run `pip install slack_sdk`\"\n            )\n        if slack_token is None:\n            slack_token =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/slack.py", "file_name": "slack.py"}, "index": 0, "child_indices": [], "ref_doc_id": "a0db9d42d0b3dcf85ce915984e4159a8d57fd656", "node_info": null}, "1": {"text": "is None:\n            slack_token = os.environ[\"SLACK_BOT_TOKEN\"]\n            if slack_token is None:\n                raise ValueError(\n                    \"Must specify `slack_token` or set environment \"\n                    \"variable `SLACK_BOT_TOKEN`.\"\n                )\n        self.client = WebClient(token=slack_token)\n        res = self.client.api_test()\n        if not res[\"ok\"]:\n            raise ValueError(f\"Error initializing Slack API: {res['error']}\")\n\n    def _read_message(self, channel_id: str, message_ts: str) -> str:\n        from slack_sdk.errors import SlackApiError\n\n        \"\"\"Read a message.\"\"\"\n\n        messages_text = []\n        next_cursor = None\n        while True:\n   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/slack.py", "file_name": "slack.py"}, "index": 1, "child_indices": [], "ref_doc_id": "a0db9d42d0b3dcf85ce915984e4159a8d57fd656", "node_info": null}, "2": {"text": "= None\n        while True:\n            try:\n                # https://slack.com/api/conversations.replies\n                # List all replies to a message, including the message itself.\n                result = self.client.conversations_replies(\n                    channel=channel_id, ts=message_ts, cursor=next_cursor\n                )\n                messages = result[\"messages\"]\n                for message in messages:\n                    messages_text.append(message[\"text\"])\n\n                if not result[\"has_more\"]:\n                    break\n\n                next_cursor = result[\"response_metadata\"][\"next_cursor\"]\n            except SlackApiError", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/slack.py", "file_name": "slack.py"}, "index": 2, "child_indices": [], "ref_doc_id": "a0db9d42d0b3dcf85ce915984e4159a8d57fd656", "node_info": null}, "3": {"text": "           except SlackApiError as e:\n                if e.response[\"error\"] == \"ratelimited\":\n                    logging.error(\n                        \"Rate limit error reached, sleeping for: {} seconds\".format(\n                            e.response.headers[\"retry-after\"]\n                        )\n                    )\n                    time.sleep(int(e.response.headers[\"retry-after\"]))\n                else:\n                    logging.error(\"Error parsing conversation replies: {}\".format(e))\n\n        return \"\\n\\n\".join(messages_text)\n\n    def _read_channel(self, channel_id: str) -> str:\n        from", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/slack.py", "file_name": "slack.py"}, "index": 3, "child_indices": [], "ref_doc_id": "a0db9d42d0b3dcf85ce915984e4159a8d57fd656", "node_info": null}, "4": {"text": "channel_id: str) -> str:\n        from slack_sdk.errors import SlackApiError\n\n        \"\"\"Read a channel.\"\"\"\n\n        result_messages = []\n        next_cursor = None\n        while True:\n            try:\n                # Call the conversations.history method using the WebClient\n                # conversations.history returns the first 100 messages by default\n                # These results are paginated,\n                # see: https://api.slack.com/methods/conversations.history$pagination\n                result = self.client.conversations_history(\n                    channel=channel_id, cursor=next_cursor\n                )\n                conversation_history = result[\"messages\"]\n                # Print results\n    ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/slack.py", "file_name": "slack.py"}, "index": 4, "child_indices": [], "ref_doc_id": "a0db9d42d0b3dcf85ce915984e4159a8d57fd656", "node_info": null}, "5": {"text": "            # Print results\n                logging.info(\n                    \"{} messages found in {}\".format(len(conversation_history), id)\n                )\n                for message in conversation_history:\n                    result_messages.append(\n                        self._read_message(channel_id, message[\"ts\"])\n                    )\n\n                if not result[\"has_more\"]:\n                    break\n                next_cursor = result[\"response_metadata\"][\"next_cursor\"]\n\n            except SlackApiError as e:\n                if e.response[\"error\"] == \"ratelimited\":\n              ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/slack.py", "file_name": "slack.py"}, "index": 5, "child_indices": [], "ref_doc_id": "a0db9d42d0b3dcf85ce915984e4159a8d57fd656", "node_info": null}, "6": {"text": "== \"ratelimited\":\n                    logging.error(\n                        \"Rate limit error reached, sleeping for: {} seconds\".format(\n                            e.response.headers[\"retry-after\"]\n                        )\n                    )\n                    time.sleep(int(e.response.headers[\"retry-after\"]))\n                else:\n                    logging.error(\"Error parsing conversation replies: {}\".format(e))\n\n        return \"\\n\\n\".join(result_messages)\n\n    def load_data(self, channel_ids: List[str]) -> List[Document]:\n        \"\"\"Load data from the input directory.\n\n        Args:\n            channel_ids (List[str]): List of channel ids", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/slack.py", "file_name": "slack.py"}, "index": 6, "child_indices": [], "ref_doc_id": "a0db9d42d0b3dcf85ce915984e4159a8d57fd656", "node_info": null}, "7": {"text": "       channel_ids (List[str]): List of channel ids to read.\n\n        Returns:\n            List[Document]: List of documents.\n\n        \"\"\"\n        results = []\n        for channel_id in channel_ids:\n            channel_content = self._read_channel(channel_id)\n            results.append(\n                Document(channel_content, extra_info={\"channel\": channel_id})\n            )\n        return results\n\n\nif __name__ == \"__main__\":\n    reader = SlackReader()\n    logging.info(reader.load_data(channel_ids=[\"C04DC2VUY3F\"]))\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/slack.py", "file_name": "slack.py"}, "index": 7, "child_indices": [], "ref_doc_id": "a0db9d42d0b3dcf85ce915984e4159a8d57fd656", "node_info": null}, "8": {"text": "The SlackReader class is a reader for the GPT-Index library. It reads conversations from Slack channels and returns a list of documents containing the conversation content. It requires a Slack token, either provided as an argument or set as an environment variable. The load_data() method takes a list of channel ids and returns a list of documents containing the conversation content. The _read_message() and _read_channel() methods are used to read the messages and channels respectively.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 8, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"8": {"text": "The SlackReader class is a reader for the GPT-Index library. It reads conversations from Slack channels and returns a list of documents containing the conversation content. It requires a Slack token, either provided as an argument or set as an environment variable. The load_data() method takes a list of channel ids and returns a list of documents containing the conversation content. The _read_message() and _read_channel() methods are used to read the messages and channels respectively.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 8, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}