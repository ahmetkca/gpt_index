{"index_struct": {"text": "\nThe StringIterableReader class is a reader that takes an iterable of strings and turns it into a list of Documents. It is used in the GPTTreeIndex class to query a given string and return a response. The load_data() function takes a list of strings as an argument and returns a list of Documents. The for loop iterates through the list of strings and appends each one to the results list as a Document. This allows the GPTTreeIndex class to quickly search through the list of strings and return a response. The StringIterableReader class is an efficient way to store and query strings, making it a useful tool for applications that require quick search capabilities.", "doc_id": "4208969f-8acb-4989-8990-46db76852e89", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Simple reader that turns an iterable of strings into a list of Documents.\"\"\"\nfrom typing import List\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\n\nclass StringIterableReader(BaseReader):\n    \"\"\"String Iterable Reader.\n\n    Gets a list of documents, given an iterable (e.g. list) of strings.\n\n    Example:\n        .. code-block:: python\n\n            from gpt_index import StringIterableReader, GPTTreeIndex\n\n            documents = StringIterableReader().load_data(\n                texts=[\"I went to the store\", \"I bought an apple\"])\n            index = GPTTreeIndex(documents)\n            index.query(\"what did I buy?\")\n\n            # response should be something like \"You bought an apple.\"\n    \"\"\"\n\n    def load_data(self, texts: List[str]) -> List[Document]:\n        \"\"\"Load the data.\"\"\"\n        results = []\n        for text in texts:\n  ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/string_iterable.py", "file_name": "string_iterable.py"}, "index": 0, "child_indices": [], "ref_doc_id": "62876b8e16ae2625adf3c433bdd1b3eaa70150c3", "node_info": null}, "1": {"text": "results = []\n        for text in texts:\n            results.append(Document(text))\n\n        return results\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/string_iterable.py", "file_name": "string_iterable.py"}, "index": 1, "child_indices": [], "ref_doc_id": "62876b8e16ae2625adf3c433bdd1b3eaa70150c3", "node_info": null}, "2": {"text": "The StringIterableReader class is a simple reader that turns an iterable of strings into a list of Documents. It is used in the GPTTreeIndex class to query a given string and return a response. The load_data() function takes a list of strings as an argument and returns a list of Documents. The for loop iterates through the list of strings and appends each one to the results list as a Document.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"2": {"text": "The StringIterableReader class is a simple reader that turns an iterable of strings into a list of Documents. It is used in the GPTTreeIndex class to query a given string and return a response. The load_data() function takes a list of strings as an argument and returns a list of Documents. The for loop iterates through the list of strings and appends each one to the results list as a Document.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"62876b8e16ae2625adf3c433bdd1b3eaa70150c3": {"text": "\"\"\"Simple reader that turns an iterable of strings into a list of Documents.\"\"\"\nfrom typing import List\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\n\nclass StringIterableReader(BaseReader):\n    \"\"\"String Iterable Reader.\n\n    Gets a list of documents, given an iterable (e.g. list) of strings.\n\n    Example:\n        .. code-block:: python\n\n            from gpt_index import StringIterableReader, GPTTreeIndex\n\n            documents = StringIterableReader().load_data(\n                texts=[\"I went to the store\", \"I bought an apple\"])\n            index = GPTTreeIndex(documents)\n            index.query(\"what did I buy?\")\n\n            # response should be something like \"You bought an apple.\"\n    \"\"\"\n\n    def load_data(self, texts: List[str]) -> List[Document]:\n        \"\"\"Load the data.\"\"\"\n        results = []\n        for text in texts:\n            results.append(Document(text))\n\n        return results\n", "doc_id": "62876b8e16ae2625adf3c433bdd1b3eaa70150c3", "embedding": null, "extra_info": {"file_path": "gpt_index/readers/string_iterable.py", "file_name": "string_iterable.py"}, "__type__": "Document"}, "4208969f-8acb-4989-8990-46db76852e89": {"text": "\nThe StringIterableReader class is a reader that takes an iterable of strings and turns it into a list of Documents. It is used in the GPTTreeIndex class to query a given string and return a response. The load_data() function takes a list of strings as an argument and returns a list of Documents. The for loop iterates through the list of strings and appends each one to the results list as a Document. This allows the GPTTreeIndex class to quickly search through the list of strings and return a response. The StringIterableReader class is an efficient way to store and query strings, making it a useful tool for applications that require quick search capabilities.", "doc_id": "4208969f-8acb-4989-8990-46db76852e89", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Simple reader that turns an iterable of strings into a list of Documents.\"\"\"\nfrom typing import List\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\n\nclass StringIterableReader(BaseReader):\n    \"\"\"String Iterable Reader.\n\n    Gets a list of documents, given an iterable (e.g. list) of strings.\n\n    Example:\n        .. code-block:: python\n\n            from gpt_index import StringIterableReader, GPTTreeIndex\n\n            documents = StringIterableReader().load_data(\n                texts=[\"I went to the store\", \"I bought an apple\"])\n            index = GPTTreeIndex(documents)\n            index.query(\"what did I buy?\")\n\n            # response should be something like \"You bought an apple.\"\n    \"\"\"\n\n    def load_data(self, texts: List[str]) -> List[Document]:\n        \"\"\"Load the data.\"\"\"\n        results = []\n        for text in texts:\n  ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/string_iterable.py", "file_name": "string_iterable.py"}, "index": 0, "child_indices": [], "ref_doc_id": "62876b8e16ae2625adf3c433bdd1b3eaa70150c3", "node_info": null}, "1": {"text": "results = []\n        for text in texts:\n            results.append(Document(text))\n\n        return results\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/string_iterable.py", "file_name": "string_iterable.py"}, "index": 1, "child_indices": [], "ref_doc_id": "62876b8e16ae2625adf3c433bdd1b3eaa70150c3", "node_info": null}, "2": {"text": "The StringIterableReader class is a simple reader that turns an iterable of strings into a list of Documents. It is used in the GPTTreeIndex class to query a given string and return a response. The load_data() function takes a list of strings as an argument and returns a list of Documents. The for loop iterates through the list of strings and appends each one to the results list as a Document.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"2": {"text": "The StringIterableReader class is a simple reader that turns an iterable of strings into a list of Documents. It is used in the GPTTreeIndex class to query a given string and return a response. The load_data() function takes a list of strings as an argument and returns a list of Documents. The for loop iterates through the list of strings and appends each one to the results list as a Document.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}