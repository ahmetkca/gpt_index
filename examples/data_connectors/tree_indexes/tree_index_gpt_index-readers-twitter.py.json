{"index_struct": {"text": "\nThe TwitterTweetReader class from the twitter.py file in the gpt_index/readers directory is used to read tweets from a user's twitter handle. It uses the tweepy library to access the Twitter API and retrieve the tweets. The class requires a bearer token from the Twitter API in order to access the tweets and also takes an optional argument for the number of tweets to be read. The load_data() function is used to read the tweets from the user's handle and return a list of Document objects containing the tweets. The class also contains a constructor which initializes the bearer token and the number of tweets to be read. The purpose of the code is to provide an easy way to access and read tweets from a user's twitter handle.", "doc_id": "942686a4-6cf1-42b5-ac9e-3474eb00de4e", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Simple reader that reads tweets of a twitter handle.\"\"\"\nfrom typing import Any, List, Optional\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\n\nclass TwitterTweetReader(BaseReader):\n    \"\"\"Twitter tweets reader.\n\n    Read tweets of user twitter handle.\n\n    Check 'https://developer.twitter.com/en/docs/twitter-api/\\\n        getting-started/getting-access-to-the-twitter-api' \\\n        on how to get access to twitter API.\n\n    Args:\n        bearer_token (str): bearer_token that you get from twitter API.\n        num_tweets (Optional[int]): Number of tweets for each user twitter handle.\\\n            Default is 100 tweets.\n    \"\"\"\n\n    def __init__(\n        self,\n        bearer_token: str,\n        num_tweets: Optional[int] = 100,\n    ) -> None:\n        \"\"\"Initialize with parameters.\"\"\"\n        self.bearer_token = bearer_token\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/twitter.py", "file_name": "twitter.py"}, "index": 0, "child_indices": [], "ref_doc_id": "ee0e8f78b27c1a62e466e13d35e9bbeea3b425e9", "node_info": null}, "1": {"text": " self.bearer_token = bearer_token\n        self.num_tweets = num_tweets\n\n    def load_data(\n        self, twitterhandles: List[str], **load_kwargs: Any\n    ) -> List[Document]:\n        \"\"\"Load tweets of twitter handles.\n\n        Args:\n            twitterhandles (List[str]): List of user twitter handles to read tweets.\n\n        \"\"\"\n        try:\n            import tweepy\n        except ImportError:\n            raise ValueError(\n                \"`tweepy` package not found, please run `pip install tweepy`\"\n            )\n\n        client = tweepy.Client(bearer_token=self.bearer_token)\n        results = []\n        for username in twitterhandles:\n            # tweets = api.user_timeline(screen_name=user, count=self.num_tweets)\n  ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/twitter.py", "file_name": "twitter.py"}, "index": 1, "child_indices": [], "ref_doc_id": "ee0e8f78b27c1a62e466e13d35e9bbeea3b425e9", "node_info": null}, "2": {"text": "count=self.num_tweets)\n            user = client.get_user(username=username)\n            tweets = client.get_users_tweets(user.data.id, max_results=self.num_tweets)\n            response = \" \"\n            for tweet in tweets.data:\n                response = response + tweet.text + \"\\n\"\n            results.append(Document(response))\n        return results\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/twitter.py", "file_name": "twitter.py"}, "index": 2, "child_indices": [], "ref_doc_id": "ee0e8f78b27c1a62e466e13d35e9bbeea3b425e9", "node_info": null}, "3": {"text": "TwitterTweetReader is a class from the file twitter.py in the gpt_index/readers directory. It is used to read tweets from a user's twitter handle. It requires a bearer token from the Twitter API in order to access the tweets. It also takes an optional argument for the number of tweets to be read. The load_data() function is used to read the tweets from the user's handle and return a list of Document objects containing the tweets.", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"3": {"text": "TwitterTweetReader is a class from the file twitter.py in the gpt_index/readers directory. It is used to read tweets from a user's twitter handle. It requires a bearer token from the Twitter API in order to access the tweets. It also takes an optional argument for the number of tweets to be read. The load_data() function is used to read the tweets from the user's handle and return a list of Document objects containing the tweets.", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"ee0e8f78b27c1a62e466e13d35e9bbeea3b425e9": {"text": "\"\"\"Simple reader that reads tweets of a twitter handle.\"\"\"\nfrom typing import Any, List, Optional\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\n\nclass TwitterTweetReader(BaseReader):\n    \"\"\"Twitter tweets reader.\n\n    Read tweets of user twitter handle.\n\n    Check 'https://developer.twitter.com/en/docs/twitter-api/\\\n        getting-started/getting-access-to-the-twitter-api' \\\n        on how to get access to twitter API.\n\n    Args:\n        bearer_token (str): bearer_token that you get from twitter API.\n        num_tweets (Optional[int]): Number of tweets for each user twitter handle.\\\n            Default is 100 tweets.\n    \"\"\"\n\n    def __init__(\n        self,\n        bearer_token: str,\n        num_tweets: Optional[int] = 100,\n    ) -> None:\n        \"\"\"Initialize with parameters.\"\"\"\n        self.bearer_token = bearer_token\n        self.num_tweets = num_tweets\n\n    def load_data(\n        self, twitterhandles: List[str], **load_kwargs: Any\n    ) -> List[Document]:\n        \"\"\"Load tweets of twitter handles.\n\n        Args:\n            twitterhandles (List[str]): List of user twitter handles to read tweets.\n\n        \"\"\"\n        try:\n            import tweepy\n        except ImportError:\n            raise ValueError(\n                \"`tweepy` package not found, please run `pip install tweepy`\"\n            )\n\n        client = tweepy.Client(bearer_token=self.bearer_token)\n        results = []\n        for username in twitterhandles:\n            # tweets = api.user_timeline(screen_name=user, count=self.num_tweets)\n            user = client.get_user(username=username)\n            tweets = client.get_users_tweets(user.data.id, max_results=self.num_tweets)\n            response = \" \"\n            for tweet in tweets.data:\n                response = response + tweet.text + \"\\n\"\n            results.append(Document(response))\n        return results\n", "doc_id": "ee0e8f78b27c1a62e466e13d35e9bbeea3b425e9", "embedding": null, "extra_info": {"file_path": "gpt_index/readers/twitter.py", "file_name": "twitter.py"}, "__type__": "Document"}, "942686a4-6cf1-42b5-ac9e-3474eb00de4e": {"text": "\nThe TwitterTweetReader class from the twitter.py file in the gpt_index/readers directory is used to read tweets from a user's twitter handle. It uses the tweepy library to access the Twitter API and retrieve the tweets. The class requires a bearer token from the Twitter API in order to access the tweets and also takes an optional argument for the number of tweets to be read. The load_data() function is used to read the tweets from the user's handle and return a list of Document objects containing the tweets. The class also contains a constructor which initializes the bearer token and the number of tweets to be read. The purpose of the code is to provide an easy way to access and read tweets from a user's twitter handle.", "doc_id": "942686a4-6cf1-42b5-ac9e-3474eb00de4e", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Simple reader that reads tweets of a twitter handle.\"\"\"\nfrom typing import Any, List, Optional\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\n\nclass TwitterTweetReader(BaseReader):\n    \"\"\"Twitter tweets reader.\n\n    Read tweets of user twitter handle.\n\n    Check 'https://developer.twitter.com/en/docs/twitter-api/\\\n        getting-started/getting-access-to-the-twitter-api' \\\n        on how to get access to twitter API.\n\n    Args:\n        bearer_token (str): bearer_token that you get from twitter API.\n        num_tweets (Optional[int]): Number of tweets for each user twitter handle.\\\n            Default is 100 tweets.\n    \"\"\"\n\n    def __init__(\n        self,\n        bearer_token: str,\n        num_tweets: Optional[int] = 100,\n    ) -> None:\n        \"\"\"Initialize with parameters.\"\"\"\n        self.bearer_token = bearer_token\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/twitter.py", "file_name": "twitter.py"}, "index": 0, "child_indices": [], "ref_doc_id": "ee0e8f78b27c1a62e466e13d35e9bbeea3b425e9", "node_info": null}, "1": {"text": " self.bearer_token = bearer_token\n        self.num_tweets = num_tweets\n\n    def load_data(\n        self, twitterhandles: List[str], **load_kwargs: Any\n    ) -> List[Document]:\n        \"\"\"Load tweets of twitter handles.\n\n        Args:\n            twitterhandles (List[str]): List of user twitter handles to read tweets.\n\n        \"\"\"\n        try:\n            import tweepy\n        except ImportError:\n            raise ValueError(\n                \"`tweepy` package not found, please run `pip install tweepy`\"\n            )\n\n        client = tweepy.Client(bearer_token=self.bearer_token)\n        results = []\n        for username in twitterhandles:\n            # tweets = api.user_timeline(screen_name=user, count=self.num_tweets)\n  ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/twitter.py", "file_name": "twitter.py"}, "index": 1, "child_indices": [], "ref_doc_id": "ee0e8f78b27c1a62e466e13d35e9bbeea3b425e9", "node_info": null}, "2": {"text": "count=self.num_tweets)\n            user = client.get_user(username=username)\n            tweets = client.get_users_tweets(user.data.id, max_results=self.num_tweets)\n            response = \" \"\n            for tweet in tweets.data:\n                response = response + tweet.text + \"\\n\"\n            results.append(Document(response))\n        return results\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/twitter.py", "file_name": "twitter.py"}, "index": 2, "child_indices": [], "ref_doc_id": "ee0e8f78b27c1a62e466e13d35e9bbeea3b425e9", "node_info": null}, "3": {"text": "TwitterTweetReader is a class from the file twitter.py in the gpt_index/readers directory. It is used to read tweets from a user's twitter handle. It requires a bearer token from the Twitter API in order to access the tweets. It also takes an optional argument for the number of tweets to be read. The load_data() function is used to read the tweets from the user's handle and return a list of Document objects containing the tweets.", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"3": {"text": "TwitterTweetReader is a class from the file twitter.py in the gpt_index/readers directory. It is used to read tweets from a user's twitter handle. It requires a bearer token from the Twitter API in order to access the tweets. It also takes an optional argument for the number of tweets to be read. The load_data() function is used to read the tweets from the user's handle and return a list of Document objects containing the tweets.", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}