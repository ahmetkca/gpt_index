{"index_struct": {"text": "\nThe WeaviateReader class is a subclass of the BaseReader class used to retrieve documents from Weaviate through vector lookup. It takes two parameters, a host and an auth_client_secret, and uses the weaviate package to query the Weaviate database. The load_data() method takes four parameters, class_name, properties, graphql_query, and separate_documents, and returns a list of Document objects. It can either construct a GraphQL query using the class_name and properties parameters, or use the graphql_query parameter directly. The WeaviateReader class allows for the option to concatenate retrieved documents into one Document object, or to return separate Document objects per document. The purpose of this code is to provide an easy way to query the Weaviate database and retrieve documents in a structured format.", "doc_id": "b73164d8-aca8-400f-95e7-cfe1d6b89781", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Weaviate reader.\"\"\"\n\nfrom typing import Any, List, Optional\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\n\nclass WeaviateReader(BaseReader):\n    \"\"\"Weaviate reader.\n\n    Retrieves documents from Weaviate through vector lookup. Allows option\n    to concatenate retrieved documents into one Document, or to return\n    separate Document objects per document.\n\n    Args:\n        host (str): host.\n        auth_client_secret (Optional[weaviate.auth.AuthCredentials]):\n            auth_client_secret.\n    \"\"\"\n\n    def __init__(\n        self,\n        host: str,\n        auth_client_secret: Optional[Any] = None,\n    ) -> None:\n        \"\"\"Initialize with parameters.\"\"\"\n        try:\n            import weaviate  # noqa: F401\n            from weaviate import Client  # noqa: F401\n            from weaviate.auth import", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/weaviate/reader.py", "file_name": "reader.py"}, "index": 0, "child_indices": [], "ref_doc_id": "9fb7548dd341b7bbe79a3a28e6bf3fd7ef78c44d", "node_info": null}, "1": {"text": "           from weaviate.auth import AuthCredentials  # noqa: F401\n        except ImportError:\n            raise ValueError(\n                \"`weaviate` package not found, please run `pip install weaviate-client`\"\n            )\n\n        self.client: Client = Client(host, auth_client_secret=auth_client_secret)\n\n    def load_data(\n        self,\n        class_name: Optional[str] = None,\n        properties: Optional[List[str]] = None,\n        graphql_query: Optional[str] = None,\n        separate_documents: Optional[bool] = True,\n    ) -> List[Document]:\n        \"\"\"Load data from Weaviate.\n\n        If `graphql_query` is not found in load_kwargs, we assume that\n        `class_name` and `properties` are provided.\n\n        Args:\n            class_name (Optional[str]): class_name to retrieve", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/weaviate/reader.py", "file_name": "reader.py"}, "index": 1, "child_indices": [], "ref_doc_id": "9fb7548dd341b7bbe79a3a28e6bf3fd7ef78c44d", "node_info": null}, "2": {"text": "     class_name (Optional[str]): class_name to retrieve documents from.\n            properties (Optional[List[str]]): properties to retrieve from documents.\n            graphql_query (Optional[str]): Raw GraphQL Query.\n                We assume that the query is a Get query.\n            separate_documents (Optional[bool]): Whether to return separate\n                documents. Defaults to True.\n\n        Returns:\n            List[Document]: A list of documents.\n\n        \"\"\"\n        if class_name is not None and properties is not None:\n            props_txt = \"\\n\".join(properties)\n            graphql_query = f\"\"\"\n            {{\n                Get {{\n                    {class_name} {{\n                       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/weaviate/reader.py", "file_name": "reader.py"}, "index": 2, "child_indices": [], "ref_doc_id": "9fb7548dd341b7bbe79a3a28e6bf3fd7ef78c44d", "node_info": null}, "3": {"text": "                    {props_txt}\n                    }}\n                }}\n            }}\n            \"\"\"\n        elif graphql_query is not None:\n            pass\n        else:\n            raise ValueError(\n                \"Either `class_name` and `properties` must be specified, \"\n                \"or `graphql_query` must be specified.\"\n            )\n\n        response = self.client.query.raw(graphql_query)\n        if \"errors\" in response:\n            raise ValueError(\"Invalid query, got errors: {}\".format(response[\"errors\"]))\n\n        data_response = response[\"data\"]\n        if \"Get\" not in data_response:\n            raise ValueError(\"Invalid query response, must be a Get", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/weaviate/reader.py", "file_name": "reader.py"}, "index": 3, "child_indices": [], "ref_doc_id": "9fb7548dd341b7bbe79a3a28e6bf3fd7ef78c44d", "node_info": null}, "4": {"text": "        raise ValueError(\"Invalid query response, must be a Get query.\")\n\n        if class_name is None:\n            # infer class_name if only graphql_query was provided\n            class_name = list(data_response[\"Get\"].keys())[0]\n        entries = data_response[\"Get\"][class_name]\n        documents = []\n        for entry in entries:\n            embedding = None\n            # for each entry, join properties into <property>:<value>\n            # separated by newlines\n            text_list = []\n            for k, v in entry.items():\n                if k == \"_additional\":\n                    if \"vector\" in v:\n                        embedding = v[\"vector\"]\n                    continue\n     ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/weaviate/reader.py", "file_name": "reader.py"}, "index": 4, "child_indices": [], "ref_doc_id": "9fb7548dd341b7bbe79a3a28e6bf3fd7ef78c44d", "node_info": null}, "5": {"text": "             continue\n                text_list.append(f\"{k}: {v}\")\n\n            text = \"\\n\".join(text_list)\n            documents.append(Document(text=text, embedding=embedding))\n\n        if not separate_documents:\n            # join all documents into one\n            text_list = [doc.get_text() for doc in documents]\n            text = \"\\n\\n\".join(text_list)\n            documents = [Document(text=text)]\n\n        return documents\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/weaviate/reader.py", "file_name": "reader.py"}, "index": 5, "child_indices": [], "ref_doc_id": "9fb7548dd341b7bbe79a3a28e6bf3fd7ef78c44d", "node_info": null}, "6": {"text": "The WeaviateReader class is a subclass of the BaseReader class, and is used to retrieve documents from Weaviate through vector lookup. It allows for the option to concatenate retrieved documents into one Document object, or to return separate Document objects per document. The class takes two parameters, a host and an auth_client_secret, and uses the weaviate package to query the Weaviate database. The load_data() method takes four parameters, class_name, properties, graphql_query, and separate_documents, and returns a list of Document objects. It can either use the class_name and properties parameters to construct a GraphQL query, or use the graphql_query parameter directly. It then parses the response from the query and creates Document objects from the retrieved data.", "doc_id": null, "embedding": null, "extra_info": null, "index": 6, "child_indices": [0, 1, 2, 3, 4, 5], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"6": {"text": "The WeaviateReader class is a subclass of the BaseReader class, and is used to retrieve documents from Weaviate through vector lookup. It allows for the option to concatenate retrieved documents into one Document object, or to return separate Document objects per document. The class takes two parameters, a host and an auth_client_secret, and uses the weaviate package to query the Weaviate database. The load_data() method takes four parameters, class_name, properties, graphql_query, and separate_documents, and returns a list of Document objects. It can either use the class_name and properties parameters to construct a GraphQL query, or use the graphql_query parameter directly. It then parses the response from the query and creates Document objects from the retrieved data.", "doc_id": null, "embedding": null, "extra_info": null, "index": 6, "child_indices": [0, 1, 2, 3, 4, 5], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"9fb7548dd341b7bbe79a3a28e6bf3fd7ef78c44d": {"text": "\"\"\"Weaviate reader.\"\"\"\n\nfrom typing import Any, List, Optional\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\n\nclass WeaviateReader(BaseReader):\n    \"\"\"Weaviate reader.\n\n    Retrieves documents from Weaviate through vector lookup. Allows option\n    to concatenate retrieved documents into one Document, or to return\n    separate Document objects per document.\n\n    Args:\n        host (str): host.\n        auth_client_secret (Optional[weaviate.auth.AuthCredentials]):\n            auth_client_secret.\n    \"\"\"\n\n    def __init__(\n        self,\n        host: str,\n        auth_client_secret: Optional[Any] = None,\n    ) -> None:\n        \"\"\"Initialize with parameters.\"\"\"\n        try:\n            import weaviate  # noqa: F401\n            from weaviate import Client  # noqa: F401\n            from weaviate.auth import AuthCredentials  # noqa: F401\n        except ImportError:\n            raise ValueError(\n                \"`weaviate` package not found, please run `pip install weaviate-client`\"\n            )\n\n        self.client: Client = Client(host, auth_client_secret=auth_client_secret)\n\n    def load_data(\n        self,\n        class_name: Optional[str] = None,\n        properties: Optional[List[str]] = None,\n        graphql_query: Optional[str] = None,\n        separate_documents: Optional[bool] = True,\n    ) -> List[Document]:\n        \"\"\"Load data from Weaviate.\n\n        If `graphql_query` is not found in load_kwargs, we assume that\n        `class_name` and `properties` are provided.\n\n        Args:\n            class_name (Optional[str]): class_name to retrieve documents from.\n            properties (Optional[List[str]]): properties to retrieve from documents.\n            graphql_query (Optional[str]): Raw GraphQL Query.\n                We assume that the query is a Get query.\n            separate_documents (Optional[bool]): Whether to return separate\n                documents. Defaults to True.\n\n        Returns:\n            List[Document]: A list of documents.\n\n        \"\"\"\n        if class_name is not None and properties is not None:\n            props_txt = \"\\n\".join(properties)\n            graphql_query = f\"\"\"\n            {{\n                Get {{\n                    {class_name} {{\n                        {props_txt}\n                    }}\n                }}\n            }}\n            \"\"\"\n        elif graphql_query is not None:\n            pass\n        else:\n            raise ValueError(\n                \"Either `class_name` and `properties` must be specified, \"\n                \"or `graphql_query` must be specified.\"\n            )\n\n        response = self.client.query.raw(graphql_query)\n        if \"errors\" in response:\n            raise ValueError(\"Invalid query, got errors: {}\".format(response[\"errors\"]))\n\n        data_response = response[\"data\"]\n        if \"Get\" not in data_response:\n            raise ValueError(\"Invalid query response, must be a Get query.\")\n\n        if class_name is None:\n            # infer class_name if only graphql_query was provided\n            class_name = list(data_response[\"Get\"].keys())[0]\n        entries = data_response[\"Get\"][class_name]\n        documents = []\n        for entry in entries:\n            embedding = None\n            # for each entry, join properties into <property>:<value>\n            # separated by newlines\n            text_list = []\n            for k, v in entry.items():\n                if k == \"_additional\":\n                    if \"vector\" in v:\n                        embedding = v[\"vector\"]\n                    continue\n                text_list.append(f\"{k}: {v}\")\n\n            text = \"\\n\".join(text_list)\n            documents.append(Document(text=text, embedding=embedding))\n\n        if not separate_documents:\n            # join all documents into one\n            text_list = [doc.get_text() for doc in documents]\n            text = \"\\n\\n\".join(text_list)\n            documents = [Document(text=text)]\n\n        return documents\n", "doc_id": "9fb7548dd341b7bbe79a3a28e6bf3fd7ef78c44d", "embedding": null, "extra_info": {"file_path": "gpt_index/readers/weaviate/reader.py", "file_name": "reader.py"}, "__type__": "Document"}, "b73164d8-aca8-400f-95e7-cfe1d6b89781": {"text": "\nThe WeaviateReader class is a subclass of the BaseReader class used to retrieve documents from Weaviate through vector lookup. It takes two parameters, a host and an auth_client_secret, and uses the weaviate package to query the Weaviate database. The load_data() method takes four parameters, class_name, properties, graphql_query, and separate_documents, and returns a list of Document objects. It can either construct a GraphQL query using the class_name and properties parameters, or use the graphql_query parameter directly. The WeaviateReader class allows for the option to concatenate retrieved documents into one Document object, or to return separate Document objects per document. The purpose of this code is to provide an easy way to query the Weaviate database and retrieve documents in a structured format.", "doc_id": "b73164d8-aca8-400f-95e7-cfe1d6b89781", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Weaviate reader.\"\"\"\n\nfrom typing import Any, List, Optional\n\nfrom gpt_index.readers.base import BaseReader\nfrom gpt_index.readers.schema.base import Document\n\n\nclass WeaviateReader(BaseReader):\n    \"\"\"Weaviate reader.\n\n    Retrieves documents from Weaviate through vector lookup. Allows option\n    to concatenate retrieved documents into one Document, or to return\n    separate Document objects per document.\n\n    Args:\n        host (str): host.\n        auth_client_secret (Optional[weaviate.auth.AuthCredentials]):\n            auth_client_secret.\n    \"\"\"\n\n    def __init__(\n        self,\n        host: str,\n        auth_client_secret: Optional[Any] = None,\n    ) -> None:\n        \"\"\"Initialize with parameters.\"\"\"\n        try:\n            import weaviate  # noqa: F401\n            from weaviate import Client  # noqa: F401\n            from weaviate.auth import", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/weaviate/reader.py", "file_name": "reader.py"}, "index": 0, "child_indices": [], "ref_doc_id": "9fb7548dd341b7bbe79a3a28e6bf3fd7ef78c44d", "node_info": null}, "1": {"text": "           from weaviate.auth import AuthCredentials  # noqa: F401\n        except ImportError:\n            raise ValueError(\n                \"`weaviate` package not found, please run `pip install weaviate-client`\"\n            )\n\n        self.client: Client = Client(host, auth_client_secret=auth_client_secret)\n\n    def load_data(\n        self,\n        class_name: Optional[str] = None,\n        properties: Optional[List[str]] = None,\n        graphql_query: Optional[str] = None,\n        separate_documents: Optional[bool] = True,\n    ) -> List[Document]:\n        \"\"\"Load data from Weaviate.\n\n        If `graphql_query` is not found in load_kwargs, we assume that\n        `class_name` and `properties` are provided.\n\n        Args:\n            class_name (Optional[str]): class_name to retrieve", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/weaviate/reader.py", "file_name": "reader.py"}, "index": 1, "child_indices": [], "ref_doc_id": "9fb7548dd341b7bbe79a3a28e6bf3fd7ef78c44d", "node_info": null}, "2": {"text": "     class_name (Optional[str]): class_name to retrieve documents from.\n            properties (Optional[List[str]]): properties to retrieve from documents.\n            graphql_query (Optional[str]): Raw GraphQL Query.\n                We assume that the query is a Get query.\n            separate_documents (Optional[bool]): Whether to return separate\n                documents. Defaults to True.\n\n        Returns:\n            List[Document]: A list of documents.\n\n        \"\"\"\n        if class_name is not None and properties is not None:\n            props_txt = \"\\n\".join(properties)\n            graphql_query = f\"\"\"\n            {{\n                Get {{\n                    {class_name} {{\n                       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/weaviate/reader.py", "file_name": "reader.py"}, "index": 2, "child_indices": [], "ref_doc_id": "9fb7548dd341b7bbe79a3a28e6bf3fd7ef78c44d", "node_info": null}, "3": {"text": "                    {props_txt}\n                    }}\n                }}\n            }}\n            \"\"\"\n        elif graphql_query is not None:\n            pass\n        else:\n            raise ValueError(\n                \"Either `class_name` and `properties` must be specified, \"\n                \"or `graphql_query` must be specified.\"\n            )\n\n        response = self.client.query.raw(graphql_query)\n        if \"errors\" in response:\n            raise ValueError(\"Invalid query, got errors: {}\".format(response[\"errors\"]))\n\n        data_response = response[\"data\"]\n        if \"Get\" not in data_response:\n            raise ValueError(\"Invalid query response, must be a Get", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/weaviate/reader.py", "file_name": "reader.py"}, "index": 3, "child_indices": [], "ref_doc_id": "9fb7548dd341b7bbe79a3a28e6bf3fd7ef78c44d", "node_info": null}, "4": {"text": "        raise ValueError(\"Invalid query response, must be a Get query.\")\n\n        if class_name is None:\n            # infer class_name if only graphql_query was provided\n            class_name = list(data_response[\"Get\"].keys())[0]\n        entries = data_response[\"Get\"][class_name]\n        documents = []\n        for entry in entries:\n            embedding = None\n            # for each entry, join properties into <property>:<value>\n            # separated by newlines\n            text_list = []\n            for k, v in entry.items():\n                if k == \"_additional\":\n                    if \"vector\" in v:\n                        embedding = v[\"vector\"]\n                    continue\n     ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/weaviate/reader.py", "file_name": "reader.py"}, "index": 4, "child_indices": [], "ref_doc_id": "9fb7548dd341b7bbe79a3a28e6bf3fd7ef78c44d", "node_info": null}, "5": {"text": "             continue\n                text_list.append(f\"{k}: {v}\")\n\n            text = \"\\n\".join(text_list)\n            documents.append(Document(text=text, embedding=embedding))\n\n        if not separate_documents:\n            # join all documents into one\n            text_list = [doc.get_text() for doc in documents]\n            text = \"\\n\\n\".join(text_list)\n            documents = [Document(text=text)]\n\n        return documents\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/weaviate/reader.py", "file_name": "reader.py"}, "index": 5, "child_indices": [], "ref_doc_id": "9fb7548dd341b7bbe79a3a28e6bf3fd7ef78c44d", "node_info": null}, "6": {"text": "The WeaviateReader class is a subclass of the BaseReader class, and is used to retrieve documents from Weaviate through vector lookup. It allows for the option to concatenate retrieved documents into one Document object, or to return separate Document objects per document. The class takes two parameters, a host and an auth_client_secret, and uses the weaviate package to query the Weaviate database. The load_data() method takes four parameters, class_name, properties, graphql_query, and separate_documents, and returns a list of Document objects. It can either use the class_name and properties parameters to construct a GraphQL query, or use the graphql_query parameter directly. It then parses the response from the query and creates Document objects from the retrieved data.", "doc_id": null, "embedding": null, "extra_info": null, "index": 6, "child_indices": [0, 1, 2, 3, 4, 5], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"6": {"text": "The WeaviateReader class is a subclass of the BaseReader class, and is used to retrieve documents from Weaviate through vector lookup. It allows for the option to concatenate retrieved documents into one Document object, or to return separate Document objects per document. The class takes two parameters, a host and an auth_client_secret, and uses the weaviate package to query the Weaviate database. The load_data() method takes four parameters, class_name, properties, graphql_query, and separate_documents, and returns a list of Document objects. It can either use the class_name and properties parameters to construct a GraphQL query, or use the graphql_query parameter directly. It then parses the response from the query and creates Document objects from the retrieved data.", "doc_id": null, "embedding": null, "extra_info": null, "index": 6, "child_indices": [0, 1, 2, 3, 4, 5], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}