{"index_struct": {"text": "\nThis code file contains functions that allow users to interact with the Weaviate knowledge graph API. The functions generate unique class prefixes, validate the Weaviate library, parse responses from Weaviate, and retrieve entries from Weaviate by their ID. Data structures used include dictionaries, lists, and sets. The get_default_class_prefix() function generates a unique class prefix for a given set of IDs, the validate_client() function checks if the Weaviate library is installed and imports it, the parse_get_response() function parses a response from Weaviate, and the get_by_id() function retrieves an entry from Weaviate by its ID. The code provides a way to access and retrieve data from the Weaviate API.", "doc_id": "f8740c52-4d69-4c14-b783-520bfa8ce58c", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Weaviate utils.\"\"\"\n\nfrom typing import Any, Dict, List, Set, cast\n\nfrom gpt_index.utils import get_new_int_id\n\nDEFAULT_CLASS_PREFIX_STUB = \"Gpt_Index\"\n\n\ndef get_default_class_prefix(current_id_set: Set = set()) -> str:\n    \"\"\"Get default class prefix.\"\"\"\n    return DEFAULT_CLASS_PREFIX_STUB + \"_\" + str(get_new_int_id(current_id_set))\n\n\ndef validate_client(client: Any) -> None:\n    \"\"\"Validate client and import weaviate library.\"\"\"\n    try:\n        import weaviate  # noqa: F401\n        from weaviate import Client\n\n        client = cast(Client, client)\n    except ImportError:\n        raise ValueError(\n            \"Weaviate is not installed. \"\n            \"Please install it with `pip install weaviate-client`.\"\n        )\n    cast(Client, client)\n\n\ndef parse_get_response(response: Dict) -> Dict:\n    \"\"\"Parse get response from Weaviate.\"\"\"\n    if \"errors\"", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/weaviate/utils.py", "file_name": "utils.py"}, "index": 0, "child_indices": [], "ref_doc_id": "82a86f061d187eb61fee194b2b8aa7c6d5b8930e", "node_info": null}, "1": {"text": " \"\"\"Parse get response from Weaviate.\"\"\"\n    if \"errors\" in response:\n        raise ValueError(\"Invalid query, got errors: {}\".format(response[\"errors\"]))\n    data_response = response[\"data\"]\n    if \"Get\" not in data_response:\n        raise ValueError(\"Invalid query response, must be a Get query.\")\n\n    return data_response[\"Get\"]\n\n\ndef get_by_id(\n    client: Any, object_id: str, class_name: str, properties: List[str]\n) -> Dict:\n    \"\"\"Get response by id from Weaviate.\"\"\"\n    validate_client(client)\n\n    where_filter = {\"path\": [\"id\"], \"operator\": \"Equal\", \"valueString\": object_id}\n    query_result = (\n        client.query.get(class_name, properties)\n        .with_where(where_filter)\n        .with_additional([\"id\", \"vector\"])\n        .do()\n    )\n\n    parsed_result = parse_get_response(query_result)\n    entries = parsed_result[class_name]\n    if len(entries) == 0:\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/weaviate/utils.py", "file_name": "utils.py"}, "index": 1, "child_indices": [], "ref_doc_id": "82a86f061d187eb61fee194b2b8aa7c6d5b8930e", "node_info": null}, "2": {"text": "   if len(entries) == 0:\n        raise ValueError(\"No entry found for the given id\")\n    elif len(entries) > 1:\n        raise ValueError(\"More than one entry found for the given id\")\n    return entries[0]\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/weaviate/utils.py", "file_name": "utils.py"}, "index": 2, "child_indices": [], "ref_doc_id": "82a86f061d187eb61fee194b2b8aa7c6d5b8930e", "node_info": null}, "3": {"text": "This code file contains functions related to Weaviate, a knowledge graph API. The functions include get_default_class_prefix(), which generates a unique class prefix for a given set of IDs; validate_client(), which checks if the Weaviate library is installed and imports it; parse_get_response(), which parses a response from Weaviate; and get_by_id(), which retrieves an entry from Weaviate by its ID. Data structures used include dictionaries, lists, and sets.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"3": {"text": "This code file contains functions related to Weaviate, a knowledge graph API. The functions include get_default_class_prefix(), which generates a unique class prefix for a given set of IDs; validate_client(), which checks if the Weaviate library is installed and imports it; parse_get_response(), which parses a response from Weaviate; and get_by_id(), which retrieves an entry from Weaviate by its ID. Data structures used include dictionaries, lists, and sets.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"82a86f061d187eb61fee194b2b8aa7c6d5b8930e": {"text": "\"\"\"Weaviate utils.\"\"\"\n\nfrom typing import Any, Dict, List, Set, cast\n\nfrom gpt_index.utils import get_new_int_id\n\nDEFAULT_CLASS_PREFIX_STUB = \"Gpt_Index\"\n\n\ndef get_default_class_prefix(current_id_set: Set = set()) -> str:\n    \"\"\"Get default class prefix.\"\"\"\n    return DEFAULT_CLASS_PREFIX_STUB + \"_\" + str(get_new_int_id(current_id_set))\n\n\ndef validate_client(client: Any) -> None:\n    \"\"\"Validate client and import weaviate library.\"\"\"\n    try:\n        import weaviate  # noqa: F401\n        from weaviate import Client\n\n        client = cast(Client, client)\n    except ImportError:\n        raise ValueError(\n            \"Weaviate is not installed. \"\n            \"Please install it with `pip install weaviate-client`.\"\n        )\n    cast(Client, client)\n\n\ndef parse_get_response(response: Dict) -> Dict:\n    \"\"\"Parse get response from Weaviate.\"\"\"\n    if \"errors\" in response:\n        raise ValueError(\"Invalid query, got errors: {}\".format(response[\"errors\"]))\n    data_response = response[\"data\"]\n    if \"Get\" not in data_response:\n        raise ValueError(\"Invalid query response, must be a Get query.\")\n\n    return data_response[\"Get\"]\n\n\ndef get_by_id(\n    client: Any, object_id: str, class_name: str, properties: List[str]\n) -> Dict:\n    \"\"\"Get response by id from Weaviate.\"\"\"\n    validate_client(client)\n\n    where_filter = {\"path\": [\"id\"], \"operator\": \"Equal\", \"valueString\": object_id}\n    query_result = (\n        client.query.get(class_name, properties)\n        .with_where(where_filter)\n        .with_additional([\"id\", \"vector\"])\n        .do()\n    )\n\n    parsed_result = parse_get_response(query_result)\n    entries = parsed_result[class_name]\n    if len(entries) == 0:\n        raise ValueError(\"No entry found for the given id\")\n    elif len(entries) > 1:\n        raise ValueError(\"More than one entry found for the given id\")\n    return entries[0]\n", "doc_id": "82a86f061d187eb61fee194b2b8aa7c6d5b8930e", "embedding": null, "extra_info": {"file_path": "gpt_index/readers/weaviate/utils.py", "file_name": "utils.py"}, "__type__": "Document"}, "f8740c52-4d69-4c14-b783-520bfa8ce58c": {"text": "\nThis code file contains functions that allow users to interact with the Weaviate knowledge graph API. The functions generate unique class prefixes, validate the Weaviate library, parse responses from Weaviate, and retrieve entries from Weaviate by their ID. Data structures used include dictionaries, lists, and sets. The get_default_class_prefix() function generates a unique class prefix for a given set of IDs, the validate_client() function checks if the Weaviate library is installed and imports it, the parse_get_response() function parses a response from Weaviate, and the get_by_id() function retrieves an entry from Weaviate by its ID. The code provides a way to access and retrieve data from the Weaviate API.", "doc_id": "f8740c52-4d69-4c14-b783-520bfa8ce58c", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Weaviate utils.\"\"\"\n\nfrom typing import Any, Dict, List, Set, cast\n\nfrom gpt_index.utils import get_new_int_id\n\nDEFAULT_CLASS_PREFIX_STUB = \"Gpt_Index\"\n\n\ndef get_default_class_prefix(current_id_set: Set = set()) -> str:\n    \"\"\"Get default class prefix.\"\"\"\n    return DEFAULT_CLASS_PREFIX_STUB + \"_\" + str(get_new_int_id(current_id_set))\n\n\ndef validate_client(client: Any) -> None:\n    \"\"\"Validate client and import weaviate library.\"\"\"\n    try:\n        import weaviate  # noqa: F401\n        from weaviate import Client\n\n        client = cast(Client, client)\n    except ImportError:\n        raise ValueError(\n            \"Weaviate is not installed. \"\n            \"Please install it with `pip install weaviate-client`.\"\n        )\n    cast(Client, client)\n\n\ndef parse_get_response(response: Dict) -> Dict:\n    \"\"\"Parse get response from Weaviate.\"\"\"\n    if \"errors\"", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/weaviate/utils.py", "file_name": "utils.py"}, "index": 0, "child_indices": [], "ref_doc_id": "82a86f061d187eb61fee194b2b8aa7c6d5b8930e", "node_info": null}, "1": {"text": " \"\"\"Parse get response from Weaviate.\"\"\"\n    if \"errors\" in response:\n        raise ValueError(\"Invalid query, got errors: {}\".format(response[\"errors\"]))\n    data_response = response[\"data\"]\n    if \"Get\" not in data_response:\n        raise ValueError(\"Invalid query response, must be a Get query.\")\n\n    return data_response[\"Get\"]\n\n\ndef get_by_id(\n    client: Any, object_id: str, class_name: str, properties: List[str]\n) -> Dict:\n    \"\"\"Get response by id from Weaviate.\"\"\"\n    validate_client(client)\n\n    where_filter = {\"path\": [\"id\"], \"operator\": \"Equal\", \"valueString\": object_id}\n    query_result = (\n        client.query.get(class_name, properties)\n        .with_where(where_filter)\n        .with_additional([\"id\", \"vector\"])\n        .do()\n    )\n\n    parsed_result = parse_get_response(query_result)\n    entries = parsed_result[class_name]\n    if len(entries) == 0:\n       ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/weaviate/utils.py", "file_name": "utils.py"}, "index": 1, "child_indices": [], "ref_doc_id": "82a86f061d187eb61fee194b2b8aa7c6d5b8930e", "node_info": null}, "2": {"text": "   if len(entries) == 0:\n        raise ValueError(\"No entry found for the given id\")\n    elif len(entries) > 1:\n        raise ValueError(\"More than one entry found for the given id\")\n    return entries[0]\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/readers/weaviate/utils.py", "file_name": "utils.py"}, "index": 2, "child_indices": [], "ref_doc_id": "82a86f061d187eb61fee194b2b8aa7c6d5b8930e", "node_info": null}, "3": {"text": "This code file contains functions related to Weaviate, a knowledge graph API. The functions include get_default_class_prefix(), which generates a unique class prefix for a given set of IDs; validate_client(), which checks if the Weaviate library is installed and imports it; parse_get_response(), which parses a response from Weaviate; and get_by_id(), which retrieves an entry from Weaviate by its ID. Data structures used include dictionaries, lists, and sets.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"3": {"text": "This code file contains functions related to Weaviate, a knowledge graph API. The functions include get_default_class_prefix(), which generates a unique class prefix for a given set of IDs; validate_client(), which checks if the Weaviate library is installed and imports it; parse_get_response(), which parses a response from Weaviate; and get_by_id(), which retrieves an entry from Weaviate by its ID. Data structures used include dictionaries, lists, and sets.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 3, "child_indices": [0, 1, 2], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}