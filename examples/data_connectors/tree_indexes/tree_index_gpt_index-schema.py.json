{"index_struct": {"text": "\nThe schema.py file contains the BaseDocument class, which provides a generic abstract interface for capturing and manipulating data. It contains fields such as text, doc_id, embedding, and extra_info, as well as methods such as get_type, get_text, get_doc_id, get_embedding, and extra_info_str. The purpose of this code is to provide a unified structure for data structures, allowing for easier storage and manipulation of data. The get_type method is used to get the type of the document, while the get_text, get_doc_id, and get_embedding methods are used to retrieve the text, doc_id, and embedding of the document, respectively. The extra_info_str method is used to get a string representation of the extra_info field. This code provides a unified structure for data structures, allowing for easier storage and manipulation of data.", "doc_id": "989cfb89-5aa7-48c8-a363-09a716dfbb4d", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Base schema for data structures.\"\"\"\nfrom abc import abstractmethod\nfrom dataclasses import dataclass\nfrom typing import Any, Dict, List, Optional\n\nfrom dataclasses_json import DataClassJsonMixin\n\n\n@dataclass\nclass BaseDocument(DataClassJsonMixin):\n    \"\"\"Base document.\n\n    Generic abstract interfaces that captures both index structs\n    as well as documents.\n\n    \"\"\"\n\n    # TODO: consolidate fields from Document/IndexStruct into base class\n    text: Optional[str] = None\n    doc_id: Optional[str] = None\n    embedding: Optional[List[float]] = None\n\n    # extra fields\n    extra_info: Optional[Dict[str, Any]] = None\n\n    @classmethod\n    @abstractmethod\n    def get_type(cls) -> str:\n        \"\"\"Get Document type.\"\"\"\n\n    def get_text(self) -> str:\n        \"\"\"Get text.\"\"\"\n        if self.text is None:\n            raise ValueError(\"text field not set.\")\n        return self.text\n\n    def get_doc_id(self) -> str:\n        \"\"\"Get doc_id.\"\"\"\n    ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/schema.py", "file_name": "schema.py"}, "index": 0, "child_indices": [], "ref_doc_id": "ec467e5a74f81e11b21a7965c94c1986708445d6", "node_info": null}, "1": {"text": "       \"\"\"Get doc_id.\"\"\"\n        if self.doc_id is None:\n            raise ValueError(\"doc_id not set.\")\n        return self.doc_id\n\n    @property\n    def is_doc_id_none(self) -> bool:\n        \"\"\"Check if doc_id is None.\"\"\"\n        return self.doc_id is None\n\n    def get_embedding(self) -> List[float]:\n        \"\"\"Get embedding.\n\n        Errors if embedding is None.\n\n        \"\"\"\n        if self.embedding is None:\n            raise ValueError(\"embedding not set.\")\n        return self.embedding\n\n    @property\n    def extra_info_str(self) -> Optional[str]:\n        \"\"\"Extra info string.\"\"\"\n        if self.extra_info is None:\n            return None\n\n        return \"\\n\".join([f\"{k}: {str(v)}\" for k, v in self.extra_info.items()])\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/schema.py", "file_name": "schema.py"}, "index": 1, "child_indices": [], "ref_doc_id": "ec467e5a74f81e11b21a7965c94c1986708445d6", "node_info": null}, "2": {"text": "This code file contains the BaseDocument class, which is used as a base schema for data structures. It contains fields such as text, doc_id, embedding, and extra_info. It also contains methods such as get_type, get_text, get_doc_id, get_embedding, and extra_info_str. The purpose of this code is to provide a generic abstract interface for capturing both index structs and documents.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"2": {"text": "This code file contains the BaseDocument class, which is used as a base schema for data structures. It contains fields such as text, doc_id, embedding, and extra_info. It also contains methods such as get_type, get_text, get_doc_id, get_embedding, and extra_info_str. The purpose of this code is to provide a generic abstract interface for capturing both index structs and documents.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"ec467e5a74f81e11b21a7965c94c1986708445d6": {"text": "\"\"\"Base schema for data structures.\"\"\"\nfrom abc import abstractmethod\nfrom dataclasses import dataclass\nfrom typing import Any, Dict, List, Optional\n\nfrom dataclasses_json import DataClassJsonMixin\n\n\n@dataclass\nclass BaseDocument(DataClassJsonMixin):\n    \"\"\"Base document.\n\n    Generic abstract interfaces that captures both index structs\n    as well as documents.\n\n    \"\"\"\n\n    # TODO: consolidate fields from Document/IndexStruct into base class\n    text: Optional[str] = None\n    doc_id: Optional[str] = None\n    embedding: Optional[List[float]] = None\n\n    # extra fields\n    extra_info: Optional[Dict[str, Any]] = None\n\n    @classmethod\n    @abstractmethod\n    def get_type(cls) -> str:\n        \"\"\"Get Document type.\"\"\"\n\n    def get_text(self) -> str:\n        \"\"\"Get text.\"\"\"\n        if self.text is None:\n            raise ValueError(\"text field not set.\")\n        return self.text\n\n    def get_doc_id(self) -> str:\n        \"\"\"Get doc_id.\"\"\"\n        if self.doc_id is None:\n            raise ValueError(\"doc_id not set.\")\n        return self.doc_id\n\n    @property\n    def is_doc_id_none(self) -> bool:\n        \"\"\"Check if doc_id is None.\"\"\"\n        return self.doc_id is None\n\n    def get_embedding(self) -> List[float]:\n        \"\"\"Get embedding.\n\n        Errors if embedding is None.\n\n        \"\"\"\n        if self.embedding is None:\n            raise ValueError(\"embedding not set.\")\n        return self.embedding\n\n    @property\n    def extra_info_str(self) -> Optional[str]:\n        \"\"\"Extra info string.\"\"\"\n        if self.extra_info is None:\n            return None\n\n        return \"\\n\".join([f\"{k}: {str(v)}\" for k, v in self.extra_info.items()])\n", "doc_id": "ec467e5a74f81e11b21a7965c94c1986708445d6", "embedding": null, "extra_info": {"file_path": "gpt_index/schema.py", "file_name": "schema.py"}, "__type__": "Document"}, "989cfb89-5aa7-48c8-a363-09a716dfbb4d": {"text": "\nThe schema.py file contains the BaseDocument class, which provides a generic abstract interface for capturing and manipulating data. It contains fields such as text, doc_id, embedding, and extra_info, as well as methods such as get_type, get_text, get_doc_id, get_embedding, and extra_info_str. The purpose of this code is to provide a unified structure for data structures, allowing for easier storage and manipulation of data. The get_type method is used to get the type of the document, while the get_text, get_doc_id, and get_embedding methods are used to retrieve the text, doc_id, and embedding of the document, respectively. The extra_info_str method is used to get a string representation of the extra_info field. This code provides a unified structure for data structures, allowing for easier storage and manipulation of data.", "doc_id": "989cfb89-5aa7-48c8-a363-09a716dfbb4d", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Base schema for data structures.\"\"\"\nfrom abc import abstractmethod\nfrom dataclasses import dataclass\nfrom typing import Any, Dict, List, Optional\n\nfrom dataclasses_json import DataClassJsonMixin\n\n\n@dataclass\nclass BaseDocument(DataClassJsonMixin):\n    \"\"\"Base document.\n\n    Generic abstract interfaces that captures both index structs\n    as well as documents.\n\n    \"\"\"\n\n    # TODO: consolidate fields from Document/IndexStruct into base class\n    text: Optional[str] = None\n    doc_id: Optional[str] = None\n    embedding: Optional[List[float]] = None\n\n    # extra fields\n    extra_info: Optional[Dict[str, Any]] = None\n\n    @classmethod\n    @abstractmethod\n    def get_type(cls) -> str:\n        \"\"\"Get Document type.\"\"\"\n\n    def get_text(self) -> str:\n        \"\"\"Get text.\"\"\"\n        if self.text is None:\n            raise ValueError(\"text field not set.\")\n        return self.text\n\n    def get_doc_id(self) -> str:\n        \"\"\"Get doc_id.\"\"\"\n    ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/schema.py", "file_name": "schema.py"}, "index": 0, "child_indices": [], "ref_doc_id": "ec467e5a74f81e11b21a7965c94c1986708445d6", "node_info": null}, "1": {"text": "       \"\"\"Get doc_id.\"\"\"\n        if self.doc_id is None:\n            raise ValueError(\"doc_id not set.\")\n        return self.doc_id\n\n    @property\n    def is_doc_id_none(self) -> bool:\n        \"\"\"Check if doc_id is None.\"\"\"\n        return self.doc_id is None\n\n    def get_embedding(self) -> List[float]:\n        \"\"\"Get embedding.\n\n        Errors if embedding is None.\n\n        \"\"\"\n        if self.embedding is None:\n            raise ValueError(\"embedding not set.\")\n        return self.embedding\n\n    @property\n    def extra_info_str(self) -> Optional[str]:\n        \"\"\"Extra info string.\"\"\"\n        if self.extra_info is None:\n            return None\n\n        return \"\\n\".join([f\"{k}: {str(v)}\" for k, v in self.extra_info.items()])\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/schema.py", "file_name": "schema.py"}, "index": 1, "child_indices": [], "ref_doc_id": "ec467e5a74f81e11b21a7965c94c1986708445d6", "node_info": null}, "2": {"text": "This code file contains the BaseDocument class, which is used as a base schema for data structures. It contains fields such as text, doc_id, embedding, and extra_info. It also contains methods such as get_type, get_text, get_doc_id, get_embedding, and extra_info_str. The purpose of this code is to provide a generic abstract interface for capturing both index structs and documents.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"2": {"text": "This code file contains the BaseDocument class, which is used as a base schema for data structures. It contains fields such as text, doc_id, embedding, and extra_info. It also contains methods such as get_type, get_text, get_doc_id, get_embedding, and extra_info_str. The purpose of this code is to provide a generic abstract interface for capturing both index structs and documents.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}