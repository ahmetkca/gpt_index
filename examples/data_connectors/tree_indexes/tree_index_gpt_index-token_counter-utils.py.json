{"index_struct": {"text": "\nThis code file contains a utility function, mock_extract_keywords_response, which extracts keywords from a given text chunk. The function takes in a text chunk, an optional maximum number of keywords, and a boolean value for filtering stopwords. It returns a string of keywords separated by commas, without filtering out stopwords. The mock_extract_keywords_response function is a modified version of the simple_extract_keywords function from the keyword_table.utils module. The purpose of this code is to provide a utility for extracting keywords from a given text chunk without filtering out stopwords, allowing for more accurate keyword extraction.", "doc_id": "34691df1-07fb-4cea-99d1-1a6e275cef33", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Token predictor utils.\"\"\"\nfrom typing import Optional\n\nfrom gpt_index.indices.keyword_table.utils import simple_extract_keywords\n\n\ndef mock_extract_keywords_response(\n    text_chunk: str, max_keywords: Optional[int] = None, filter_stopwords: bool = True\n) -> str:\n    \"\"\"Extract keywords mock response.\n\n    Same as simple_extract_keywords but without filtering stopwords.\n\n    \"\"\"\n    return \",\".join(\n        simple_extract_keywords(\n            text_chunk, max_keywords=max_keywords, filter_stopwords=False\n        )\n    )\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/token_counter/utils.py", "file_name": "utils.py"}, "index": 0, "child_indices": [], "ref_doc_id": "fe6d373401194b3dab89e747b4126550d5204a27", "node_info": null}, "1": {"text": "This code file contains a utility function for extracting keywords from a given text chunk. The function, mock_extract_keywords_response, is a modified version of the simple_extract_keywords function from the keyword_table.utils module. The mock_extract_keywords_response function does not filter out stopwords, unlike the simple_extract_keywords function. The function takes in a text chunk, an optional maximum number of keywords, and a boolean value for filtering stopwords. It returns a string of keywords separated by commas. \n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 1, "child_indices": [0], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"1": {"text": "This code file contains a utility function for extracting keywords from a given text chunk. The function, mock_extract_keywords_response, is a modified version of the simple_extract_keywords function from the keyword_table.utils module. The mock_extract_keywords_response function does not filter out stopwords, unlike the simple_extract_keywords function. The function takes in a text chunk, an optional maximum number of keywords, and a boolean value for filtering stopwords. It returns a string of keywords separated by commas. \n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 1, "child_indices": [0], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"fe6d373401194b3dab89e747b4126550d5204a27": {"text": "\"\"\"Token predictor utils.\"\"\"\nfrom typing import Optional\n\nfrom gpt_index.indices.keyword_table.utils import simple_extract_keywords\n\n\ndef mock_extract_keywords_response(\n    text_chunk: str, max_keywords: Optional[int] = None, filter_stopwords: bool = True\n) -> str:\n    \"\"\"Extract keywords mock response.\n\n    Same as simple_extract_keywords but without filtering stopwords.\n\n    \"\"\"\n    return \",\".join(\n        simple_extract_keywords(\n            text_chunk, max_keywords=max_keywords, filter_stopwords=False\n        )\n    )\n", "doc_id": "fe6d373401194b3dab89e747b4126550d5204a27", "embedding": null, "extra_info": {"file_path": "gpt_index/token_counter/utils.py", "file_name": "utils.py"}, "__type__": "Document"}, "34691df1-07fb-4cea-99d1-1a6e275cef33": {"text": "\nThis code file contains a utility function, mock_extract_keywords_response, which extracts keywords from a given text chunk. The function takes in a text chunk, an optional maximum number of keywords, and a boolean value for filtering stopwords. It returns a string of keywords separated by commas, without filtering out stopwords. The mock_extract_keywords_response function is a modified version of the simple_extract_keywords function from the keyword_table.utils module. The purpose of this code is to provide a utility for extracting keywords from a given text chunk without filtering out stopwords, allowing for more accurate keyword extraction.", "doc_id": "34691df1-07fb-4cea-99d1-1a6e275cef33", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Token predictor utils.\"\"\"\nfrom typing import Optional\n\nfrom gpt_index.indices.keyword_table.utils import simple_extract_keywords\n\n\ndef mock_extract_keywords_response(\n    text_chunk: str, max_keywords: Optional[int] = None, filter_stopwords: bool = True\n) -> str:\n    \"\"\"Extract keywords mock response.\n\n    Same as simple_extract_keywords but without filtering stopwords.\n\n    \"\"\"\n    return \",\".join(\n        simple_extract_keywords(\n            text_chunk, max_keywords=max_keywords, filter_stopwords=False\n        )\n    )\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "gpt_index/token_counter/utils.py", "file_name": "utils.py"}, "index": 0, "child_indices": [], "ref_doc_id": "fe6d373401194b3dab89e747b4126550d5204a27", "node_info": null}, "1": {"text": "This code file contains a utility function for extracting keywords from a given text chunk. The function, mock_extract_keywords_response, is a modified version of the simple_extract_keywords function from the keyword_table.utils module. The mock_extract_keywords_response function does not filter out stopwords, unlike the simple_extract_keywords function. The function takes in a text chunk, an optional maximum number of keywords, and a boolean value for filtering stopwords. It returns a string of keywords separated by commas. \n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 1, "child_indices": [0], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"1": {"text": "This code file contains a utility function for extracting keywords from a given text chunk. The function, mock_extract_keywords_response, is a modified version of the simple_extract_keywords function from the keyword_table.utils module. The mock_extract_keywords_response function does not filter out stopwords, unlike the simple_extract_keywords function. The function takes in a text chunk, an optional maximum number of keywords, and a boolean value for filtering stopwords. It returns a string of keywords separated by commas. \n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 1, "child_indices": [0], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}