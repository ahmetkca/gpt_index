{"index_struct": {"text": "\nThis code file contains a shared decorator used to patch functions for testing purposes. The decorator wraps the given function and patches the TokenTextSplitter, LLMPredictor, and other functions with mock functions. These mock functions simulate the behavior of the original functions, but return predetermined values instead. This allows for the testing of the code without having to use the actual functions, making it easier to identify and fix any errors.", "doc_id": "15da853c-8276-4d6e-a0c7-82a147ff7b77", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Shared decorator.\"\"\"\nimport functools\nfrom typing import Any, Callable\nfrom unittest.mock import patch\n\nfrom gpt_index.langchain_helpers.chain_wrapper import LLMPredictor\nfrom gpt_index.langchain_helpers.text_splitter import TokenTextSplitter\nfrom tests.mock_utils.mock_predict import mock_llmpredictor_predict\nfrom tests.mock_utils.mock_text_splitter import (\n    mock_token_splitter_newline,\n    mock_token_splitter_newline_with_overlaps,\n)\n\n\ndef patch_common(f: Callable) -> Callable:\n    \"\"\"Create patch decorator with common mocks.\"\"\"\n\n    @patch.object(\n        TokenTextSplitter, \"split_text\", side_effect=mock_token_splitter_newline\n    )\n    @patch.object(\n        TokenTextSplitter,\n        \"split_text_with_overlaps\",\n        side_effect=mock_token_splitter_newline_with_overlaps,\n    )\n    @patch.object(LLMPredictor, \"total_tokens_used\", return_value=0)\n   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/mock_utils/mock_decorator.py", "file_name": "mock_decorator.py"}, "index": 0, "child_indices": [], "ref_doc_id": "ce69c63dfad837fbe436965bac2049338e5fd9e5", "node_info": null}, "1": {"text": "\"total_tokens_used\", return_value=0)\n    @patch.object(LLMPredictor, \"predict\", side_effect=mock_llmpredictor_predict)\n    @patch.object(LLMPredictor, \"__init__\", return_value=None)\n    @functools.wraps(f)\n    def functor(*args: Any, **kwargs: Any) -> Any:\n        return f(*args, **kwargs)\n\n    return functor\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/mock_utils/mock_decorator.py", "file_name": "mock_decorator.py"}, "index": 1, "child_indices": [], "ref_doc_id": "ce69c63dfad837fbe436965bac2049338e5fd9e5", "node_info": null}, "2": {"text": "This code file contains a shared decorator used for testing purposes. It patches the TokenTextSplitter, LLMPredictor, and other functions with mock functions to simulate their behavior. The purpose of this is to allow for testing of the code without having to use the actual functions. The decorator wraps the given function and returns it with the patched functions.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"2": {"text": "This code file contains a shared decorator used for testing purposes. It patches the TokenTextSplitter, LLMPredictor, and other functions with mock functions to simulate their behavior. The purpose of this is to allow for testing of the code without having to use the actual functions. The decorator wraps the given function and returns it with the patched functions.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"ce69c63dfad837fbe436965bac2049338e5fd9e5": {"text": "\"\"\"Shared decorator.\"\"\"\nimport functools\nfrom typing import Any, Callable\nfrom unittest.mock import patch\n\nfrom gpt_index.langchain_helpers.chain_wrapper import LLMPredictor\nfrom gpt_index.langchain_helpers.text_splitter import TokenTextSplitter\nfrom tests.mock_utils.mock_predict import mock_llmpredictor_predict\nfrom tests.mock_utils.mock_text_splitter import (\n    mock_token_splitter_newline,\n    mock_token_splitter_newline_with_overlaps,\n)\n\n\ndef patch_common(f: Callable) -> Callable:\n    \"\"\"Create patch decorator with common mocks.\"\"\"\n\n    @patch.object(\n        TokenTextSplitter, \"split_text\", side_effect=mock_token_splitter_newline\n    )\n    @patch.object(\n        TokenTextSplitter,\n        \"split_text_with_overlaps\",\n        side_effect=mock_token_splitter_newline_with_overlaps,\n    )\n    @patch.object(LLMPredictor, \"total_tokens_used\", return_value=0)\n    @patch.object(LLMPredictor, \"predict\", side_effect=mock_llmpredictor_predict)\n    @patch.object(LLMPredictor, \"__init__\", return_value=None)\n    @functools.wraps(f)\n    def functor(*args: Any, **kwargs: Any) -> Any:\n        return f(*args, **kwargs)\n\n    return functor\n", "doc_id": "ce69c63dfad837fbe436965bac2049338e5fd9e5", "embedding": null, "extra_info": {"file_path": "tests/mock_utils/mock_decorator.py", "file_name": "mock_decorator.py"}, "__type__": "Document"}, "15da853c-8276-4d6e-a0c7-82a147ff7b77": {"text": "\nThis code file contains a shared decorator used to patch functions for testing purposes. The decorator wraps the given function and patches the TokenTextSplitter, LLMPredictor, and other functions with mock functions. These mock functions simulate the behavior of the original functions, but return predetermined values instead. This allows for the testing of the code without having to use the actual functions, making it easier to identify and fix any errors.", "doc_id": "15da853c-8276-4d6e-a0c7-82a147ff7b77", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Shared decorator.\"\"\"\nimport functools\nfrom typing import Any, Callable\nfrom unittest.mock import patch\n\nfrom gpt_index.langchain_helpers.chain_wrapper import LLMPredictor\nfrom gpt_index.langchain_helpers.text_splitter import TokenTextSplitter\nfrom tests.mock_utils.mock_predict import mock_llmpredictor_predict\nfrom tests.mock_utils.mock_text_splitter import (\n    mock_token_splitter_newline,\n    mock_token_splitter_newline_with_overlaps,\n)\n\n\ndef patch_common(f: Callable) -> Callable:\n    \"\"\"Create patch decorator with common mocks.\"\"\"\n\n    @patch.object(\n        TokenTextSplitter, \"split_text\", side_effect=mock_token_splitter_newline\n    )\n    @patch.object(\n        TokenTextSplitter,\n        \"split_text_with_overlaps\",\n        side_effect=mock_token_splitter_newline_with_overlaps,\n    )\n    @patch.object(LLMPredictor, \"total_tokens_used\", return_value=0)\n   ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/mock_utils/mock_decorator.py", "file_name": "mock_decorator.py"}, "index": 0, "child_indices": [], "ref_doc_id": "ce69c63dfad837fbe436965bac2049338e5fd9e5", "node_info": null}, "1": {"text": "\"total_tokens_used\", return_value=0)\n    @patch.object(LLMPredictor, \"predict\", side_effect=mock_llmpredictor_predict)\n    @patch.object(LLMPredictor, \"__init__\", return_value=None)\n    @functools.wraps(f)\n    def functor(*args: Any, **kwargs: Any) -> Any:\n        return f(*args, **kwargs)\n\n    return functor\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/mock_utils/mock_decorator.py", "file_name": "mock_decorator.py"}, "index": 1, "child_indices": [], "ref_doc_id": "ce69c63dfad837fbe436965bac2049338e5fd9e5", "node_info": null}, "2": {"text": "This code file contains a shared decorator used for testing purposes. It patches the TokenTextSplitter, LLMPredictor, and other functions with mock functions to simulate their behavior. The purpose of this is to allow for testing of the code without having to use the actual functions. The decorator wraps the given function and returns it with the patched functions.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"2": {"text": "This code file contains a shared decorator used for testing purposes. It patches the TokenTextSplitter, LLMPredictor, and other functions with mock functions to simulate their behavior. The purpose of this is to allow for testing of the code without having to use the actual functions. The decorator wraps the given function and returns it with the patched functions.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}