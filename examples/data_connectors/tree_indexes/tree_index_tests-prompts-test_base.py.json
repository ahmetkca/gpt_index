{"index_struct": {"text": "\nThis code file contains tests for the Prompt class, which is used to create and validate prompts. The TestPrompt class is a subclass of Prompt and has two input variables, \"text\" and \"foo\". The purpose of the code is to ensure that prompts are valid and can be created and formatted correctly. The test_prompt_validate() function tests that the prompt is valid and raises an error if it is missing required values or has extraneous values. The test_partial_format() function tests that a partially formatted prompt can be created and formatted with additional values. The test_from_prompt() function tests that a new prompt can be created from a partially formatted prompt. The test_from_langchain_prompt() function tests that a prompt can be created from a langchain prompt and raises an error if the input variables do not match. The code uses algorithms and data structures to validate and create prompts, and the functions and classes are related to each other in order to achieve the desired functionality.", "doc_id": "75158c83-c0bd-4482-8038-694d9ee09226", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Test prompts.\"\"\"\n\nfrom typing import List\n\nimport pytest\nfrom langchain import PromptTemplate\n\nfrom gpt_index.prompts.base import Prompt\n\n\nclass TestPrompt(Prompt):\n    \"\"\"Test prompt class.\"\"\"\n\n    input_variables: List[str] = [\"text\", \"foo\"]\n\n\ndef test_prompt_validate() -> None:\n    \"\"\"Test prompt validate.\"\"\"\n    # assert passes\n    prompt_txt = \"hello {text} {foo}\"\n    TestPrompt(prompt_txt)\n\n    # assert fails (missing required values)\n    with pytest.raises(ValueError):\n        prompt_txt = \"hello {tmp}\"\n        TestPrompt(prompt_txt)\n\n    # assert fails (extraneous values)\n    with pytest.raises(ValueError):\n        prompt_txt = \"hello {text} {foo} {text2}\"\n        TestPrompt(prompt_txt)\n\n\ndef test_partial_format() -> None:\n    \"\"\"Test partial format.\"\"\"\n    prompt_txt = \"hello {text} {foo}\"\n    prompt = TestPrompt(prompt_txt)\n\n    prompt_fmt =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/prompts/test_base.py", "file_name": "test_base.py"}, "index": 0, "child_indices": [], "ref_doc_id": "e4b5eca71db3211c5ea203a9274fc6029bb553be", "node_info": null}, "1": {"text": "= TestPrompt(prompt_txt)\n\n    prompt_fmt = prompt.partial_format(foo=\"bar\")\n\n    assert isinstance(prompt_fmt, TestPrompt)\n    assert prompt_fmt.format(text=\"world\") == \"hello world bar\"\n\n\ndef test_from_prompt() -> None:\n    \"\"\"Test new prompt from a partially formatted prompt.\"\"\"\n\n    class TestPromptTextOnly(Prompt):\n        \"\"\"Test prompt class.\"\"\"\n\n        input_variables: List[str] = [\"text\"]\n\n    prompt_txt = \"hello {text} {foo}\"\n    prompt = TestPrompt(prompt_txt)\n    prompt_fmt = prompt.partial_format(foo=\"bar\")\n\n    prompt_new = TestPromptTextOnly.from_prompt(prompt_fmt)\n    assert isinstance(prompt_new, TestPromptTextOnly)\n\n    assert prompt_new.format(text=\"world2\") == \"hello world2 bar\"\n\n\ndef test_from_langchain_prompt() -> None:\n    \"\"\"Test from langchain prompt.\"\"\"\n    prompt_txt = \"hello {text} {foo}\"\n    prompt = PromptTemplate(input_variables=[\"text\", \"foo\"],", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/prompts/test_base.py", "file_name": "test_base.py"}, "index": 1, "child_indices": [], "ref_doc_id": "e4b5eca71db3211c5ea203a9274fc6029bb553be", "node_info": null}, "2": {"text": "  prompt = PromptTemplate(input_variables=[\"text\", \"foo\"], template=prompt_txt)\n    prompt_new = TestPrompt.from_langchain_prompt(prompt)\n\n    assert isinstance(prompt_new, TestPrompt)\n    assert prompt_new.prompt == prompt\n    assert prompt_new.format(text=\"world2\", foo=\"bar\") == \"hello world2 bar\"\n\n    # test errors if langchain prompt input var doesn't match\n    with pytest.raises(ValueError):\n        prompt_txt = \"hello {text} {foo} {tmp}\"\n        prompt = PromptTemplate(\n            input_variables=[\"text\", \"foo\", \"tmp\"], template=prompt_txt\n        )\n        TestPrompt.from_langchain_prompt(prompt)\n\n    # test errors if we specify both template and langchain prompt\n    with pytest.raises(ValueError):\n        prompt_txt = \"hello {text} {foo}\"\n        prompt = PromptTemplate(input_variables=[\"text\", \"foo\"], template=prompt_txt)\n        TestPrompt(template=prompt_txt,", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/prompts/test_base.py", "file_name": "test_base.py"}, "index": 2, "child_indices": [], "ref_doc_id": "e4b5eca71db3211c5ea203a9274fc6029bb553be", "node_info": null}, "3": {"text": "       TestPrompt(template=prompt_txt, langchain_prompt=prompt)\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/prompts/test_base.py", "file_name": "test_base.py"}, "index": 3, "child_indices": [], "ref_doc_id": "e4b5eca71db3211c5ea203a9274fc6029bb553be", "node_info": null}, "4": {"text": "This code file contains tests for the Prompt class, which is used to create and validate prompts. The TestPrompt class is a subclass of Prompt and has two input variables, \"text\" and \"foo\". The test_prompt_validate() function tests that the prompt is valid and raises an error if it is missing required values or has extraneous values. The test_partial_format() function tests that a partially formatted prompt can be created and formatted with additional values. The test_from_prompt() function tests that a new prompt can be created from a partially formatted prompt. The test_from_langchain_prompt() function tests that a prompt can be created from a langchain prompt and raises an error if the input variables do not match.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"4": {"text": "This code file contains tests for the Prompt class, which is used to create and validate prompts. The TestPrompt class is a subclass of Prompt and has two input variables, \"text\" and \"foo\". The test_prompt_validate() function tests that the prompt is valid and raises an error if it is missing required values or has extraneous values. The test_partial_format() function tests that a partially formatted prompt can be created and formatted with additional values. The test_from_prompt() function tests that a new prompt can be created from a partially formatted prompt. The test_from_langchain_prompt() function tests that a prompt can be created from a langchain prompt and raises an error if the input variables do not match.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"e4b5eca71db3211c5ea203a9274fc6029bb553be": {"text": "\"\"\"Test prompts.\"\"\"\n\nfrom typing import List\n\nimport pytest\nfrom langchain import PromptTemplate\n\nfrom gpt_index.prompts.base import Prompt\n\n\nclass TestPrompt(Prompt):\n    \"\"\"Test prompt class.\"\"\"\n\n    input_variables: List[str] = [\"text\", \"foo\"]\n\n\ndef test_prompt_validate() -> None:\n    \"\"\"Test prompt validate.\"\"\"\n    # assert passes\n    prompt_txt = \"hello {text} {foo}\"\n    TestPrompt(prompt_txt)\n\n    # assert fails (missing required values)\n    with pytest.raises(ValueError):\n        prompt_txt = \"hello {tmp}\"\n        TestPrompt(prompt_txt)\n\n    # assert fails (extraneous values)\n    with pytest.raises(ValueError):\n        prompt_txt = \"hello {text} {foo} {text2}\"\n        TestPrompt(prompt_txt)\n\n\ndef test_partial_format() -> None:\n    \"\"\"Test partial format.\"\"\"\n    prompt_txt = \"hello {text} {foo}\"\n    prompt = TestPrompt(prompt_txt)\n\n    prompt_fmt = prompt.partial_format(foo=\"bar\")\n\n    assert isinstance(prompt_fmt, TestPrompt)\n    assert prompt_fmt.format(text=\"world\") == \"hello world bar\"\n\n\ndef test_from_prompt() -> None:\n    \"\"\"Test new prompt from a partially formatted prompt.\"\"\"\n\n    class TestPromptTextOnly(Prompt):\n        \"\"\"Test prompt class.\"\"\"\n\n        input_variables: List[str] = [\"text\"]\n\n    prompt_txt = \"hello {text} {foo}\"\n    prompt = TestPrompt(prompt_txt)\n    prompt_fmt = prompt.partial_format(foo=\"bar\")\n\n    prompt_new = TestPromptTextOnly.from_prompt(prompt_fmt)\n    assert isinstance(prompt_new, TestPromptTextOnly)\n\n    assert prompt_new.format(text=\"world2\") == \"hello world2 bar\"\n\n\ndef test_from_langchain_prompt() -> None:\n    \"\"\"Test from langchain prompt.\"\"\"\n    prompt_txt = \"hello {text} {foo}\"\n    prompt = PromptTemplate(input_variables=[\"text\", \"foo\"], template=prompt_txt)\n    prompt_new = TestPrompt.from_langchain_prompt(prompt)\n\n    assert isinstance(prompt_new, TestPrompt)\n    assert prompt_new.prompt == prompt\n    assert prompt_new.format(text=\"world2\", foo=\"bar\") == \"hello world2 bar\"\n\n    # test errors if langchain prompt input var doesn't match\n    with pytest.raises(ValueError):\n        prompt_txt = \"hello {text} {foo} {tmp}\"\n        prompt = PromptTemplate(\n            input_variables=[\"text\", \"foo\", \"tmp\"], template=prompt_txt\n        )\n        TestPrompt.from_langchain_prompt(prompt)\n\n    # test errors if we specify both template and langchain prompt\n    with pytest.raises(ValueError):\n        prompt_txt = \"hello {text} {foo}\"\n        prompt = PromptTemplate(input_variables=[\"text\", \"foo\"], template=prompt_txt)\n        TestPrompt(template=prompt_txt, langchain_prompt=prompt)\n", "doc_id": "e4b5eca71db3211c5ea203a9274fc6029bb553be", "embedding": null, "extra_info": {"file_path": "tests/prompts/test_base.py", "file_name": "test_base.py"}, "__type__": "Document"}, "75158c83-c0bd-4482-8038-694d9ee09226": {"text": "\nThis code file contains tests for the Prompt class, which is used to create and validate prompts. The TestPrompt class is a subclass of Prompt and has two input variables, \"text\" and \"foo\". The purpose of the code is to ensure that prompts are valid and can be created and formatted correctly. The test_prompt_validate() function tests that the prompt is valid and raises an error if it is missing required values or has extraneous values. The test_partial_format() function tests that a partially formatted prompt can be created and formatted with additional values. The test_from_prompt() function tests that a new prompt can be created from a partially formatted prompt. The test_from_langchain_prompt() function tests that a prompt can be created from a langchain prompt and raises an error if the input variables do not match. The code uses algorithms and data structures to validate and create prompts, and the functions and classes are related to each other in order to achieve the desired functionality.", "doc_id": "75158c83-c0bd-4482-8038-694d9ee09226", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Test prompts.\"\"\"\n\nfrom typing import List\n\nimport pytest\nfrom langchain import PromptTemplate\n\nfrom gpt_index.prompts.base import Prompt\n\n\nclass TestPrompt(Prompt):\n    \"\"\"Test prompt class.\"\"\"\n\n    input_variables: List[str] = [\"text\", \"foo\"]\n\n\ndef test_prompt_validate() -> None:\n    \"\"\"Test prompt validate.\"\"\"\n    # assert passes\n    prompt_txt = \"hello {text} {foo}\"\n    TestPrompt(prompt_txt)\n\n    # assert fails (missing required values)\n    with pytest.raises(ValueError):\n        prompt_txt = \"hello {tmp}\"\n        TestPrompt(prompt_txt)\n\n    # assert fails (extraneous values)\n    with pytest.raises(ValueError):\n        prompt_txt = \"hello {text} {foo} {text2}\"\n        TestPrompt(prompt_txt)\n\n\ndef test_partial_format() -> None:\n    \"\"\"Test partial format.\"\"\"\n    prompt_txt = \"hello {text} {foo}\"\n    prompt = TestPrompt(prompt_txt)\n\n    prompt_fmt =", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/prompts/test_base.py", "file_name": "test_base.py"}, "index": 0, "child_indices": [], "ref_doc_id": "e4b5eca71db3211c5ea203a9274fc6029bb553be", "node_info": null}, "1": {"text": "= TestPrompt(prompt_txt)\n\n    prompt_fmt = prompt.partial_format(foo=\"bar\")\n\n    assert isinstance(prompt_fmt, TestPrompt)\n    assert prompt_fmt.format(text=\"world\") == \"hello world bar\"\n\n\ndef test_from_prompt() -> None:\n    \"\"\"Test new prompt from a partially formatted prompt.\"\"\"\n\n    class TestPromptTextOnly(Prompt):\n        \"\"\"Test prompt class.\"\"\"\n\n        input_variables: List[str] = [\"text\"]\n\n    prompt_txt = \"hello {text} {foo}\"\n    prompt = TestPrompt(prompt_txt)\n    prompt_fmt = prompt.partial_format(foo=\"bar\")\n\n    prompt_new = TestPromptTextOnly.from_prompt(prompt_fmt)\n    assert isinstance(prompt_new, TestPromptTextOnly)\n\n    assert prompt_new.format(text=\"world2\") == \"hello world2 bar\"\n\n\ndef test_from_langchain_prompt() -> None:\n    \"\"\"Test from langchain prompt.\"\"\"\n    prompt_txt = \"hello {text} {foo}\"\n    prompt = PromptTemplate(input_variables=[\"text\", \"foo\"],", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/prompts/test_base.py", "file_name": "test_base.py"}, "index": 1, "child_indices": [], "ref_doc_id": "e4b5eca71db3211c5ea203a9274fc6029bb553be", "node_info": null}, "2": {"text": "  prompt = PromptTemplate(input_variables=[\"text\", \"foo\"], template=prompt_txt)\n    prompt_new = TestPrompt.from_langchain_prompt(prompt)\n\n    assert isinstance(prompt_new, TestPrompt)\n    assert prompt_new.prompt == prompt\n    assert prompt_new.format(text=\"world2\", foo=\"bar\") == \"hello world2 bar\"\n\n    # test errors if langchain prompt input var doesn't match\n    with pytest.raises(ValueError):\n        prompt_txt = \"hello {text} {foo} {tmp}\"\n        prompt = PromptTemplate(\n            input_variables=[\"text\", \"foo\", \"tmp\"], template=prompt_txt\n        )\n        TestPrompt.from_langchain_prompt(prompt)\n\n    # test errors if we specify both template and langchain prompt\n    with pytest.raises(ValueError):\n        prompt_txt = \"hello {text} {foo}\"\n        prompt = PromptTemplate(input_variables=[\"text\", \"foo\"], template=prompt_txt)\n        TestPrompt(template=prompt_txt,", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/prompts/test_base.py", "file_name": "test_base.py"}, "index": 2, "child_indices": [], "ref_doc_id": "e4b5eca71db3211c5ea203a9274fc6029bb553be", "node_info": null}, "3": {"text": "       TestPrompt(template=prompt_txt, langchain_prompt=prompt)\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/prompts/test_base.py", "file_name": "test_base.py"}, "index": 3, "child_indices": [], "ref_doc_id": "e4b5eca71db3211c5ea203a9274fc6029bb553be", "node_info": null}, "4": {"text": "This code file contains tests for the Prompt class, which is used to create and validate prompts. The TestPrompt class is a subclass of Prompt and has two input variables, \"text\" and \"foo\". The test_prompt_validate() function tests that the prompt is valid and raises an error if it is missing required values or has extraneous values. The test_partial_format() function tests that a partially formatted prompt can be created and formatted with additional values. The test_from_prompt() function tests that a new prompt can be created from a partially formatted prompt. The test_from_langchain_prompt() function tests that a prompt can be created from a langchain prompt and raises an error if the input variables do not match.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"4": {"text": "This code file contains tests for the Prompt class, which is used to create and validate prompts. The TestPrompt class is a subclass of Prompt and has two input variables, \"text\" and \"foo\". The test_prompt_validate() function tests that the prompt is valid and raises an error if it is missing required values or has extraneous values. The test_partial_format() function tests that a partially formatted prompt can be created and formatted with additional values. The test_from_prompt() function tests that a new prompt can be created from a partially formatted prompt. The test_from_langchain_prompt() function tests that a prompt can be created from a langchain prompt and raises an error if the input variables do not match.\n\"\"\"", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}