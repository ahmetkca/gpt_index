{"index_struct": {"text": "\nThis code file tests the SimpleDirectoryReader class from the gpt_index.readers.file.base module. The SimpleDirectoryReader class is used to read files from a directory and its subdirectories, and can be configured to exclude hidden files and to only read files with certain extensions. The code tests the reader's ability to read multiple files, limit the number of files read, and add file metadata to documents. It also tests the reader's ability to concatenate files, in which case no metadata is added. The TemporaryDirectory class is used to create temporary directories and files for testing purposes, and the input_files attribute is used to check the number of files read and the names of the files. The code asserts that the reader is able to read the correct number of files and that the file metadata is added correctly.", "doc_id": "b50331a8-a6b0-499e-a9ac-84e658f277a5", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Test file reader.\"\"\"\n\nfrom tempfile import TemporaryDirectory\nfrom typing import Any, Dict\n\nfrom gpt_index.readers.file.base import SimpleDirectoryReader\n\n\ndef test_recursive() -> None:\n    \"\"\"Test simple directory reader in recursive mode.\"\"\"\n    # test recursive\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with TemporaryDirectory(dir=tmp_dir) as tmp_sub_dir:\n            with open(f\"{tmp_sub_dir}/test2.txt\", \"w\") as f:\n                f.write(\"test2\")\n            with TemporaryDirectory(dir=tmp_sub_dir) as tmp_sub_sub_dir:\n                with open(f\"{tmp_sub_sub_dir}/test3.txt\", \"w\") as f:\n                    f.write(\"test3\")\n                with", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 0, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "1": {"text": "               with open(f\"{tmp_sub_sub_dir}/test4.txt\", \"w\") as f:\n                    f.write(\"test4\")\n\n                    reader = SimpleDirectoryReader(tmp_dir, recursive=True)\n                    input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 4\n                    assert set(input_file_names) == {\n                        \"test1.txt\",\n                        \"test2.txt\",\n                        \"test3.txt\",\n                        \"test4.txt\",\n                    }\n\n    # test", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 1, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "2": {"text": "             }\n\n    # test that recursive=False works\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with TemporaryDirectory(dir=tmp_dir) as tmp_sub_dir:\n            with open(f\"{tmp_sub_dir}/test2.txt\", \"w\") as f:\n                f.write(\"test2\")\n            with TemporaryDirectory(dir=tmp_sub_dir) as tmp_sub_sub_dir:\n                with open(f\"{tmp_sub_sub_dir}/test3.txt\", \"w\") as f:\n                    f.write(\"test3\")\n                with open(f\"{tmp_sub_sub_dir}/test4.txt\", \"w\") as f:\n                    f.write(\"test4\")\n\n    ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 2, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "3": {"text": "        f.write(\"test4\")\n\n                    reader = SimpleDirectoryReader(tmp_dir, recursive=False)\n                    input_file_names = [f.name for f in reader.input_files]\n                    print(reader.input_files)\n                    assert len(reader.input_files) == 1\n                    assert set(input_file_names) == {\n                        \"test1.txt\",\n                    }\n\n    # test recursive with .md files\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.md\", \"w\") as f:\n            f.write(\"test1\")\n        with TemporaryDirectory(dir=tmp_dir) as tmp_sub_dir:\n            with", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 3, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "4": {"text": "as tmp_sub_dir:\n            with open(f\"{tmp_sub_dir}/test2.txt\", \"w\") as f:\n                f.write(\"test2\")\n            with TemporaryDirectory(dir=tmp_sub_dir) as tmp_sub_sub_dir:\n                with open(f\"{tmp_sub_sub_dir}/test3.md\", \"w\") as f:\n                    f.write(\"test3\")\n                with open(f\"{tmp_sub_sub_dir}/test4.txt\", \"w\") as f:\n                    f.write(\"test4\")\n\n                    reader = SimpleDirectoryReader(\n                        tmp_dir, recursive=True, required_exts=[\".md\"]\n                    )\n                    input_file_names", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 4, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "5": {"text": "               input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 2\n                    assert set(input_file_names) == {\n                        \"test1.md\",\n                        \"test3.md\",\n                    }\n\n\ndef test_nonrecursive() -> None:\n    \"\"\"Test simple non-recursive directory reader.\"\"\"\n    # test nonrecursive\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with open(f\"{tmp_dir}/test2.txt\", \"w\") as f:\n            f.write(\"test2\")\n        with open(f\"{tmp_dir}/test3.txt\",", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 5, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "6": {"text": "    with open(f\"{tmp_dir}/test3.txt\", \"w\") as f:\n            f.write(\"test3\")\n        with open(f\"{tmp_dir}/test4.txt\", \"w\") as f:\n            f.write(\"test4\")\n        with open(f\"{tmp_dir}/.test5.txt\", \"w\") as f:\n            f.write(\"test5\")\n\n        # test exclude hidden\n        reader = SimpleDirectoryReader(tmp_dir, recursive=False)\n        input_file_names = [f.name for f in reader.input_files]\n        assert len(reader.input_files) == 4\n        assert input_file_names == [\"test1.txt\", \"test2.txt\", \"test3.txt\", \"test4.txt\"]\n\n        # test include hidden\n        reader = SimpleDirectoryReader(tmp_dir, recursive=False, exclude_hidden=False)\n        input_file_names = [f.name for f in reader.input_files]\n        assert len(reader.input_files) ==", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 6, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "7": {"text": "       assert len(reader.input_files) == 5\n        assert input_file_names == [\n            \".test5.txt\",\n            \"test1.txt\",\n            \"test2.txt\",\n            \"test3.txt\",\n            \"test4.txt\",\n        ]\n\n\ndef test_required_exts() -> None:\n    \"\"\"Test extension filter.\"\"\"\n    # test nonrecursive\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with open(f\"{tmp_dir}/test2.md\", \"w\") as f:\n            f.write(\"test2\")\n        with open(f\"{tmp_dir}/test3.tmp\", \"w\") as f:\n            f.write(\"test3\")\n        with open(f\"{tmp_dir}/test4.json\",", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 7, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "8": {"text": "    with open(f\"{tmp_dir}/test4.json\", \"w\") as f:\n            f.write(\"test4\")\n        with open(f\"{tmp_dir}/test5.json\", \"w\") as f:\n            f.write(\"test5\")\n\n        # test exclude hidden\n        reader = SimpleDirectoryReader(tmp_dir, required_exts=[\".json\"])\n        input_file_names = [f.name for f in reader.input_files]\n        assert len(reader.input_files) == 2\n        assert input_file_names == [\"test4.json\", \"test5.json\"]\n\n\ndef test_num_files_limit() -> None:\n    \"\"\"Test num files limit.\"\"\"\n    # test num_files_limit (with recursion)\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with TemporaryDirectory(dir=tmp_dir) as tmp_sub_dir:\n            with", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 8, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "9": {"text": "as tmp_sub_dir:\n            with open(f\"{tmp_sub_dir}/test2.txt\", \"w\") as f:\n                f.write(\"test2\")\n            with open(f\"{tmp_sub_dir}/test3.txt\", \"w\") as f:\n                f.write(\"test3\")\n            with TemporaryDirectory(dir=tmp_sub_dir) as tmp_sub_sub_dir:\n                with open(f\"{tmp_sub_sub_dir}/test4.txt\", \"w\") as f:\n                    f.write(\"test4\")\n\n                    reader = SimpleDirectoryReader(\n                        tmp_dir, recursive=True, num_files_limit=2\n                    )\n                    input_file_names = [f.name for f in", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 9, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "10": {"text": "       input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 2\n                    assert set(input_file_names) == {\n                        \"test1.txt\",\n                        \"test2.txt\",\n                    }\n\n                    reader = SimpleDirectoryReader(\n                        tmp_dir, recursive=True, num_files_limit=3\n                    )\n                    input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 3\n                    assert", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 10, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "11": {"text": "                   assert set(input_file_names) == {\n                        \"test1.txt\",\n                        \"test2.txt\",\n                        \"test3.txt\",\n                    }\n\n                    reader = SimpleDirectoryReader(\n                        tmp_dir, recursive=True, num_files_limit=4\n                    )\n                    input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 4\n                    assert set(input_file_names) == {\n                     ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 11, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "12": {"text": "                      \"test1.txt\",\n                        \"test2.txt\",\n                        \"test3.txt\",\n                        \"test4.txt\",\n                    }\n\n\ndef test_file_metadata() -> None:\n    \"\"\"Test if file metadata is added to Document.\"\"\"\n    # test file_metadata\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with open(f\"{tmp_dir}/test2.txt\", \"w\") as f:\n            f.write(\"test2\")\n        with open(f\"{tmp_dir}/test3.txt\", \"w\") as f:\n            f.write(\"test3\")\n\n        test_author = \"Bruce", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 12, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "13": {"text": "       test_author = \"Bruce Wayne\"\n\n        def filename_to_metadata(filename: str) -> Dict[str, Any]:\n            return {\"filename\": filename, \"author\": test_author}\n\n        reader = SimpleDirectoryReader(tmp_dir, file_metadata=filename_to_metadata)\n\n        documents = reader.load_data()\n\n        for d in documents:\n            assert d.extra_info is not None and d.extra_info[\"author\"] == test_author\n\n        # There should be no metadata if we choose to concatenate files\n        documents = reader.load_data(concatenate=True)\n\n        for d in documents:\n            assert d.extra_info is None\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 13, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "14": {"text": "This code file tests the SimpleDirectoryReader class from the gpt_index.readers.file.base module. It tests the reader in both recursive and non-recursive modes, as well as with different file extensions and a limit on the number of files. The TemporaryDirectory class is used to create temporary directories and files for testing purposes. The SimpleDirectoryReader class is used to read the files in the temporary directories and the input_files attribute is used to check the number of files read and the names of the files.", "doc_id": null, "embedding": null, "extra_info": null, "index": 14, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], "ref_doc_id": null, "node_info": null}, "15": {"text": "This code file tests the functionality of the SimpleDirectoryReader class, which reads files from a given directory. It tests the reader's ability to read multiple files, limit the number of files read, and add file metadata to documents. It also tests the reader's ability to concatenate files, in which case no metadata is added. The code uses a TemporaryDirectory to create test files, and asserts that the reader is able to read the correct number of files and that the file metadata is added correctly.", "doc_id": null, "embedding": null, "extra_info": null, "index": 15, "child_indices": [10, 11, 12, 13], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"14": {"text": "This code file tests the SimpleDirectoryReader class from the gpt_index.readers.file.base module. It tests the reader in both recursive and non-recursive modes, as well as with different file extensions and a limit on the number of files. The TemporaryDirectory class is used to create temporary directories and files for testing purposes. The SimpleDirectoryReader class is used to read the files in the temporary directories and the input_files attribute is used to check the number of files read and the names of the files.", "doc_id": null, "embedding": null, "extra_info": null, "index": 14, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], "ref_doc_id": null, "node_info": null}, "15": {"text": "This code file tests the functionality of the SimpleDirectoryReader class, which reads files from a given directory. It tests the reader's ability to read multiple files, limit the number of files read, and add file metadata to documents. It also tests the reader's ability to concatenate files, in which case no metadata is added. The code uses a TemporaryDirectory to create test files, and asserts that the reader is able to read the correct number of files and that the file metadata is added correctly.", "doc_id": null, "embedding": null, "extra_info": null, "index": 15, "child_indices": [10, 11, 12, 13], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"808ff010c8376b1ee787cab26b9817eab331054f": {"text": "\"\"\"Test file reader.\"\"\"\n\nfrom tempfile import TemporaryDirectory\nfrom typing import Any, Dict\n\nfrom gpt_index.readers.file.base import SimpleDirectoryReader\n\n\ndef test_recursive() -> None:\n    \"\"\"Test simple directory reader in recursive mode.\"\"\"\n    # test recursive\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with TemporaryDirectory(dir=tmp_dir) as tmp_sub_dir:\n            with open(f\"{tmp_sub_dir}/test2.txt\", \"w\") as f:\n                f.write(\"test2\")\n            with TemporaryDirectory(dir=tmp_sub_dir) as tmp_sub_sub_dir:\n                with open(f\"{tmp_sub_sub_dir}/test3.txt\", \"w\") as f:\n                    f.write(\"test3\")\n                with open(f\"{tmp_sub_sub_dir}/test4.txt\", \"w\") as f:\n                    f.write(\"test4\")\n\n                    reader = SimpleDirectoryReader(tmp_dir, recursive=True)\n                    input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 4\n                    assert set(input_file_names) == {\n                        \"test1.txt\",\n                        \"test2.txt\",\n                        \"test3.txt\",\n                        \"test4.txt\",\n                    }\n\n    # test that recursive=False works\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with TemporaryDirectory(dir=tmp_dir) as tmp_sub_dir:\n            with open(f\"{tmp_sub_dir}/test2.txt\", \"w\") as f:\n                f.write(\"test2\")\n            with TemporaryDirectory(dir=tmp_sub_dir) as tmp_sub_sub_dir:\n                with open(f\"{tmp_sub_sub_dir}/test3.txt\", \"w\") as f:\n                    f.write(\"test3\")\n                with open(f\"{tmp_sub_sub_dir}/test4.txt\", \"w\") as f:\n                    f.write(\"test4\")\n\n                    reader = SimpleDirectoryReader(tmp_dir, recursive=False)\n                    input_file_names = [f.name for f in reader.input_files]\n                    print(reader.input_files)\n                    assert len(reader.input_files) == 1\n                    assert set(input_file_names) == {\n                        \"test1.txt\",\n                    }\n\n    # test recursive with .md files\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.md\", \"w\") as f:\n            f.write(\"test1\")\n        with TemporaryDirectory(dir=tmp_dir) as tmp_sub_dir:\n            with open(f\"{tmp_sub_dir}/test2.txt\", \"w\") as f:\n                f.write(\"test2\")\n            with TemporaryDirectory(dir=tmp_sub_dir) as tmp_sub_sub_dir:\n                with open(f\"{tmp_sub_sub_dir}/test3.md\", \"w\") as f:\n                    f.write(\"test3\")\n                with open(f\"{tmp_sub_sub_dir}/test4.txt\", \"w\") as f:\n                    f.write(\"test4\")\n\n                    reader = SimpleDirectoryReader(\n                        tmp_dir, recursive=True, required_exts=[\".md\"]\n                    )\n                    input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 2\n                    assert set(input_file_names) == {\n                        \"test1.md\",\n                        \"test3.md\",\n                    }\n\n\ndef test_nonrecursive() -> None:\n    \"\"\"Test simple non-recursive directory reader.\"\"\"\n    # test nonrecursive\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with open(f\"{tmp_dir}/test2.txt\", \"w\") as f:\n            f.write(\"test2\")\n        with open(f\"{tmp_dir}/test3.txt\", \"w\") as f:\n            f.write(\"test3\")\n        with open(f\"{tmp_dir}/test4.txt\", \"w\") as f:\n            f.write(\"test4\")\n        with open(f\"{tmp_dir}/.test5.txt\", \"w\") as f:\n            f.write(\"test5\")\n\n        # test exclude hidden\n        reader = SimpleDirectoryReader(tmp_dir, recursive=False)\n        input_file_names = [f.name for f in reader.input_files]\n        assert len(reader.input_files) == 4\n        assert input_file_names == [\"test1.txt\", \"test2.txt\", \"test3.txt\", \"test4.txt\"]\n\n        # test include hidden\n        reader = SimpleDirectoryReader(tmp_dir, recursive=False, exclude_hidden=False)\n        input_file_names = [f.name for f in reader.input_files]\n        assert len(reader.input_files) == 5\n        assert input_file_names == [\n            \".test5.txt\",\n            \"test1.txt\",\n            \"test2.txt\",\n            \"test3.txt\",\n            \"test4.txt\",\n        ]\n\n\ndef test_required_exts() -> None:\n    \"\"\"Test extension filter.\"\"\"\n    # test nonrecursive\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with open(f\"{tmp_dir}/test2.md\", \"w\") as f:\n            f.write(\"test2\")\n        with open(f\"{tmp_dir}/test3.tmp\", \"w\") as f:\n            f.write(\"test3\")\n        with open(f\"{tmp_dir}/test4.json\", \"w\") as f:\n            f.write(\"test4\")\n        with open(f\"{tmp_dir}/test5.json\", \"w\") as f:\n            f.write(\"test5\")\n\n        # test exclude hidden\n        reader = SimpleDirectoryReader(tmp_dir, required_exts=[\".json\"])\n        input_file_names = [f.name for f in reader.input_files]\n        assert len(reader.input_files) == 2\n        assert input_file_names == [\"test4.json\", \"test5.json\"]\n\n\ndef test_num_files_limit() -> None:\n    \"\"\"Test num files limit.\"\"\"\n    # test num_files_limit (with recursion)\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with TemporaryDirectory(dir=tmp_dir) as tmp_sub_dir:\n            with open(f\"{tmp_sub_dir}/test2.txt\", \"w\") as f:\n                f.write(\"test2\")\n            with open(f\"{tmp_sub_dir}/test3.txt\", \"w\") as f:\n                f.write(\"test3\")\n            with TemporaryDirectory(dir=tmp_sub_dir) as tmp_sub_sub_dir:\n                with open(f\"{tmp_sub_sub_dir}/test4.txt\", \"w\") as f:\n                    f.write(\"test4\")\n\n                    reader = SimpleDirectoryReader(\n                        tmp_dir, recursive=True, num_files_limit=2\n                    )\n                    input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 2\n                    assert set(input_file_names) == {\n                        \"test1.txt\",\n                        \"test2.txt\",\n                    }\n\n                    reader = SimpleDirectoryReader(\n                        tmp_dir, recursive=True, num_files_limit=3\n                    )\n                    input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 3\n                    assert set(input_file_names) == {\n                        \"test1.txt\",\n                        \"test2.txt\",\n                        \"test3.txt\",\n                    }\n\n                    reader = SimpleDirectoryReader(\n                        tmp_dir, recursive=True, num_files_limit=4\n                    )\n                    input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 4\n                    assert set(input_file_names) == {\n                        \"test1.txt\",\n                        \"test2.txt\",\n                        \"test3.txt\",\n                        \"test4.txt\",\n                    }\n\n\ndef test_file_metadata() -> None:\n    \"\"\"Test if file metadata is added to Document.\"\"\"\n    # test file_metadata\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with open(f\"{tmp_dir}/test2.txt\", \"w\") as f:\n            f.write(\"test2\")\n        with open(f\"{tmp_dir}/test3.txt\", \"w\") as f:\n            f.write(\"test3\")\n\n        test_author = \"Bruce Wayne\"\n\n        def filename_to_metadata(filename: str) -> Dict[str, Any]:\n            return {\"filename\": filename, \"author\": test_author}\n\n        reader = SimpleDirectoryReader(tmp_dir, file_metadata=filename_to_metadata)\n\n        documents = reader.load_data()\n\n        for d in documents:\n            assert d.extra_info is not None and d.extra_info[\"author\"] == test_author\n\n        # There should be no metadata if we choose to concatenate files\n        documents = reader.load_data(concatenate=True)\n\n        for d in documents:\n            assert d.extra_info is None\n", "doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "__type__": "Document"}, "b50331a8-a6b0-499e-a9ac-84e658f277a5": {"text": "\nThis code file tests the SimpleDirectoryReader class from the gpt_index.readers.file.base module. The SimpleDirectoryReader class is used to read files from a directory and its subdirectories, and can be configured to exclude hidden files and to only read files with certain extensions. The code tests the reader's ability to read multiple files, limit the number of files read, and add file metadata to documents. It also tests the reader's ability to concatenate files, in which case no metadata is added. The TemporaryDirectory class is used to create temporary directories and files for testing purposes, and the input_files attribute is used to check the number of files read and the names of the files. The code asserts that the reader is able to read the correct number of files and that the file metadata is added correctly.", "doc_id": "b50331a8-a6b0-499e-a9ac-84e658f277a5", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Test file reader.\"\"\"\n\nfrom tempfile import TemporaryDirectory\nfrom typing import Any, Dict\n\nfrom gpt_index.readers.file.base import SimpleDirectoryReader\n\n\ndef test_recursive() -> None:\n    \"\"\"Test simple directory reader in recursive mode.\"\"\"\n    # test recursive\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with TemporaryDirectory(dir=tmp_dir) as tmp_sub_dir:\n            with open(f\"{tmp_sub_dir}/test2.txt\", \"w\") as f:\n                f.write(\"test2\")\n            with TemporaryDirectory(dir=tmp_sub_dir) as tmp_sub_sub_dir:\n                with open(f\"{tmp_sub_sub_dir}/test3.txt\", \"w\") as f:\n                    f.write(\"test3\")\n                with", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 0, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "1": {"text": "               with open(f\"{tmp_sub_sub_dir}/test4.txt\", \"w\") as f:\n                    f.write(\"test4\")\n\n                    reader = SimpleDirectoryReader(tmp_dir, recursive=True)\n                    input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 4\n                    assert set(input_file_names) == {\n                        \"test1.txt\",\n                        \"test2.txt\",\n                        \"test3.txt\",\n                        \"test4.txt\",\n                    }\n\n    # test", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 1, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "2": {"text": "             }\n\n    # test that recursive=False works\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with TemporaryDirectory(dir=tmp_dir) as tmp_sub_dir:\n            with open(f\"{tmp_sub_dir}/test2.txt\", \"w\") as f:\n                f.write(\"test2\")\n            with TemporaryDirectory(dir=tmp_sub_dir) as tmp_sub_sub_dir:\n                with open(f\"{tmp_sub_sub_dir}/test3.txt\", \"w\") as f:\n                    f.write(\"test3\")\n                with open(f\"{tmp_sub_sub_dir}/test4.txt\", \"w\") as f:\n                    f.write(\"test4\")\n\n    ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 2, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "3": {"text": "        f.write(\"test4\")\n\n                    reader = SimpleDirectoryReader(tmp_dir, recursive=False)\n                    input_file_names = [f.name for f in reader.input_files]\n                    print(reader.input_files)\n                    assert len(reader.input_files) == 1\n                    assert set(input_file_names) == {\n                        \"test1.txt\",\n                    }\n\n    # test recursive with .md files\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.md\", \"w\") as f:\n            f.write(\"test1\")\n        with TemporaryDirectory(dir=tmp_dir) as tmp_sub_dir:\n            with", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 3, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "4": {"text": "as tmp_sub_dir:\n            with open(f\"{tmp_sub_dir}/test2.txt\", \"w\") as f:\n                f.write(\"test2\")\n            with TemporaryDirectory(dir=tmp_sub_dir) as tmp_sub_sub_dir:\n                with open(f\"{tmp_sub_sub_dir}/test3.md\", \"w\") as f:\n                    f.write(\"test3\")\n                with open(f\"{tmp_sub_sub_dir}/test4.txt\", \"w\") as f:\n                    f.write(\"test4\")\n\n                    reader = SimpleDirectoryReader(\n                        tmp_dir, recursive=True, required_exts=[\".md\"]\n                    )\n                    input_file_names", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 4, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "5": {"text": "               input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 2\n                    assert set(input_file_names) == {\n                        \"test1.md\",\n                        \"test3.md\",\n                    }\n\n\ndef test_nonrecursive() -> None:\n    \"\"\"Test simple non-recursive directory reader.\"\"\"\n    # test nonrecursive\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with open(f\"{tmp_dir}/test2.txt\", \"w\") as f:\n            f.write(\"test2\")\n        with open(f\"{tmp_dir}/test3.txt\",", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 5, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "6": {"text": "    with open(f\"{tmp_dir}/test3.txt\", \"w\") as f:\n            f.write(\"test3\")\n        with open(f\"{tmp_dir}/test4.txt\", \"w\") as f:\n            f.write(\"test4\")\n        with open(f\"{tmp_dir}/.test5.txt\", \"w\") as f:\n            f.write(\"test5\")\n\n        # test exclude hidden\n        reader = SimpleDirectoryReader(tmp_dir, recursive=False)\n        input_file_names = [f.name for f in reader.input_files]\n        assert len(reader.input_files) == 4\n        assert input_file_names == [\"test1.txt\", \"test2.txt\", \"test3.txt\", \"test4.txt\"]\n\n        # test include hidden\n        reader = SimpleDirectoryReader(tmp_dir, recursive=False, exclude_hidden=False)\n        input_file_names = [f.name for f in reader.input_files]\n        assert len(reader.input_files) ==", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 6, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "7": {"text": "       assert len(reader.input_files) == 5\n        assert input_file_names == [\n            \".test5.txt\",\n            \"test1.txt\",\n            \"test2.txt\",\n            \"test3.txt\",\n            \"test4.txt\",\n        ]\n\n\ndef test_required_exts() -> None:\n    \"\"\"Test extension filter.\"\"\"\n    # test nonrecursive\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with open(f\"{tmp_dir}/test2.md\", \"w\") as f:\n            f.write(\"test2\")\n        with open(f\"{tmp_dir}/test3.tmp\", \"w\") as f:\n            f.write(\"test3\")\n        with open(f\"{tmp_dir}/test4.json\",", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 7, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "8": {"text": "    with open(f\"{tmp_dir}/test4.json\", \"w\") as f:\n            f.write(\"test4\")\n        with open(f\"{tmp_dir}/test5.json\", \"w\") as f:\n            f.write(\"test5\")\n\n        # test exclude hidden\n        reader = SimpleDirectoryReader(tmp_dir, required_exts=[\".json\"])\n        input_file_names = [f.name for f in reader.input_files]\n        assert len(reader.input_files) == 2\n        assert input_file_names == [\"test4.json\", \"test5.json\"]\n\n\ndef test_num_files_limit() -> None:\n    \"\"\"Test num files limit.\"\"\"\n    # test num_files_limit (with recursion)\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with TemporaryDirectory(dir=tmp_dir) as tmp_sub_dir:\n            with", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 8, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "9": {"text": "as tmp_sub_dir:\n            with open(f\"{tmp_sub_dir}/test2.txt\", \"w\") as f:\n                f.write(\"test2\")\n            with open(f\"{tmp_sub_dir}/test3.txt\", \"w\") as f:\n                f.write(\"test3\")\n            with TemporaryDirectory(dir=tmp_sub_dir) as tmp_sub_sub_dir:\n                with open(f\"{tmp_sub_sub_dir}/test4.txt\", \"w\") as f:\n                    f.write(\"test4\")\n\n                    reader = SimpleDirectoryReader(\n                        tmp_dir, recursive=True, num_files_limit=2\n                    )\n                    input_file_names = [f.name for f in", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 9, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "10": {"text": "       input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 2\n                    assert set(input_file_names) == {\n                        \"test1.txt\",\n                        \"test2.txt\",\n                    }\n\n                    reader = SimpleDirectoryReader(\n                        tmp_dir, recursive=True, num_files_limit=3\n                    )\n                    input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 3\n                    assert", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 10, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "11": {"text": "                   assert set(input_file_names) == {\n                        \"test1.txt\",\n                        \"test2.txt\",\n                        \"test3.txt\",\n                    }\n\n                    reader = SimpleDirectoryReader(\n                        tmp_dir, recursive=True, num_files_limit=4\n                    )\n                    input_file_names = [f.name for f in reader.input_files]\n                    assert len(reader.input_files) == 4\n                    assert set(input_file_names) == {\n                     ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 11, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "12": {"text": "                      \"test1.txt\",\n                        \"test2.txt\",\n                        \"test3.txt\",\n                        \"test4.txt\",\n                    }\n\n\ndef test_file_metadata() -> None:\n    \"\"\"Test if file metadata is added to Document.\"\"\"\n    # test file_metadata\n    with TemporaryDirectory() as tmp_dir:\n        with open(f\"{tmp_dir}/test1.txt\", \"w\") as f:\n            f.write(\"test1\")\n        with open(f\"{tmp_dir}/test2.txt\", \"w\") as f:\n            f.write(\"test2\")\n        with open(f\"{tmp_dir}/test3.txt\", \"w\") as f:\n            f.write(\"test3\")\n\n        test_author = \"Bruce", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 12, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "13": {"text": "       test_author = \"Bruce Wayne\"\n\n        def filename_to_metadata(filename: str) -> Dict[str, Any]:\n            return {\"filename\": filename, \"author\": test_author}\n\n        reader = SimpleDirectoryReader(tmp_dir, file_metadata=filename_to_metadata)\n\n        documents = reader.load_data()\n\n        for d in documents:\n            assert d.extra_info is not None and d.extra_info[\"author\"] == test_author\n\n        # There should be no metadata if we choose to concatenate files\n        documents = reader.load_data(concatenate=True)\n\n        for d in documents:\n            assert d.extra_info is None\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/readers/test_file.py", "file_name": "test_file.py"}, "index": 13, "child_indices": [], "ref_doc_id": "808ff010c8376b1ee787cab26b9817eab331054f", "node_info": null}, "14": {"text": "This code file tests the SimpleDirectoryReader class from the gpt_index.readers.file.base module. It tests the reader in both recursive and non-recursive modes, as well as with different file extensions and a limit on the number of files. The TemporaryDirectory class is used to create temporary directories and files for testing purposes. The SimpleDirectoryReader class is used to read the files in the temporary directories and the input_files attribute is used to check the number of files read and the names of the files.", "doc_id": null, "embedding": null, "extra_info": null, "index": 14, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], "ref_doc_id": null, "node_info": null}, "15": {"text": "This code file tests the functionality of the SimpleDirectoryReader class, which reads files from a given directory. It tests the reader's ability to read multiple files, limit the number of files read, and add file metadata to documents. It also tests the reader's ability to concatenate files, in which case no metadata is added. The code uses a TemporaryDirectory to create test files, and asserts that the reader is able to read the correct number of files and that the file metadata is added correctly.", "doc_id": null, "embedding": null, "extra_info": null, "index": 15, "child_indices": [10, 11, 12, 13], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"14": {"text": "This code file tests the SimpleDirectoryReader class from the gpt_index.readers.file.base module. It tests the reader in both recursive and non-recursive modes, as well as with different file extensions and a limit on the number of files. The TemporaryDirectory class is used to create temporary directories and files for testing purposes. The SimpleDirectoryReader class is used to read the files in the temporary directories and the input_files attribute is used to check the number of files read and the names of the files.", "doc_id": null, "embedding": null, "extra_info": null, "index": 14, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], "ref_doc_id": null, "node_info": null}, "15": {"text": "This code file tests the functionality of the SimpleDirectoryReader class, which reads files from a given directory. It tests the reader's ability to read multiple files, limit the number of files read, and add file metadata to documents. It also tests the reader's ability to concatenate files, in which case no metadata is added. The code uses a TemporaryDirectory to create test files, and asserts that the reader is able to read the correct number of files and that the file metadata is added correctly.", "doc_id": null, "embedding": null, "extra_info": null, "index": 15, "child_indices": [10, 11, 12, 13], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}