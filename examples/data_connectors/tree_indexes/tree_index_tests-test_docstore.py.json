{"index_struct": {"text": "\nThis code file tests the DocumentStore class from the gpt_index library. It creates two documents, a Document and a Node, and stores them in a DocumentStore. It then tests the get_document() method to ensure that the documents are retrieved correctly. Additionally, it tests the serialize_to_dict() and load_from_dict() methods to ensure that the documents are serialized and deserialized correctly. The purpose of this code is to ensure that the DocumentStore class is functioning properly and that documents can be stored, retrieved, and serialized/deserialized correctly. The code uses the DocumentStore class to store documents, the get_document() method to retrieve documents, the serialize_to_dict() and load_from_dict() methods to serialize and deserialize documents, and the Document and Node classes to create documents. The code tests the functionality of the DocumentStore class to ensure that documents can be stored, retrieved, and serialized/deserialized correctly.", "doc_id": "e796c260-fe60-4f4c-bca6-3d3768338120", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Test docstore.\"\"\"\n\nfrom typing import Dict, Type\n\nfrom gpt_index.data_structs.data_structs import IndexStruct, Node\nfrom gpt_index.docstore import DocumentStore\nfrom gpt_index.readers.schema.base import Document\n\n\ndef test_docstore() -> None:\n    \"\"\"Test docstore.\"\"\"\n    doc = Document(\"hello world\", doc_id=\"d1\", extra_info={\"foo\": \"bar\"})\n    node = Node(\"my node\", doc_id=\"d2\", node_info={\"node\": \"info\"})\n\n    type_to_struct: Dict[str, Type[IndexStruct]] = {\"node\": Node}\n\n    # test get document\n    docstore = DocumentStore.from_documents([doc, node])\n    gd1 = docstore.get_document(\"d1\")\n    assert gd1 == doc\n    gd2 = docstore.get_document(\"d2\")\n    assert gd2 == node\n\n    # test serialize/deserialize\n    doc_dict = docstore.serialize_to_dict()\n    assert doc_dict[\"docs\"] == {\n        \"d1\": {\n            \"text\": \"hello world\",\n            \"doc_id\": \"d1\",\n     ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/test_docstore.py", "file_name": "test_docstore.py"}, "index": 0, "child_indices": [], "ref_doc_id": "5542097578c1b4bdfd1108235f4f7c42f54f7a1c", "node_info": null}, "1": {"text": "     \"doc_id\": \"d1\",\n            \"embedding\": None,\n            \"extra_info\": {\"foo\": \"bar\"},\n            \"__type__\": \"Document\",\n        },\n        \"d2\": {\n            \"text\": \"my node\",\n            \"doc_id\": \"d2\",\n            \"embedding\": None,\n            \"extra_info\": None,\n            \"node_info\": {\"node\": \"info\"},\n            \"index\": 0,\n            \"child_indices\": [],\n            \"ref_doc_id\": None,\n            \"__type__\": \"node\",\n        },\n    }\n\n    docstore_loaded = DocumentStore.load_from_dict(doc_dict, type_to_struct)\n    assert docstore_loaded == docstore\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/test_docstore.py", "file_name": "test_docstore.py"}, "index": 1, "child_indices": [], "ref_doc_id": "5542097578c1b4bdfd1108235f4f7c42f54f7a1c", "node_info": null}, "2": {"text": "This code file tests the DocumentStore class from the gpt_index library. It creates two documents, a Document and a Node, and stores them in a DocumentStore. It then tests the get_document() method to ensure that the documents are retrieved correctly. Finally, it tests the serialize_to_dict() and load_from_dict() methods to ensure that the documents are serialized and deserialized correctly.", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"2": {"text": "This code file tests the DocumentStore class from the gpt_index library. It creates two documents, a Document and a Node, and stores them in a DocumentStore. It then tests the get_document() method to ensure that the documents are retrieved correctly. Finally, it tests the serialize_to_dict() and load_from_dict() methods to ensure that the documents are serialized and deserialized correctly.", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"5542097578c1b4bdfd1108235f4f7c42f54f7a1c": {"text": "\"\"\"Test docstore.\"\"\"\n\nfrom typing import Dict, Type\n\nfrom gpt_index.data_structs.data_structs import IndexStruct, Node\nfrom gpt_index.docstore import DocumentStore\nfrom gpt_index.readers.schema.base import Document\n\n\ndef test_docstore() -> None:\n    \"\"\"Test docstore.\"\"\"\n    doc = Document(\"hello world\", doc_id=\"d1\", extra_info={\"foo\": \"bar\"})\n    node = Node(\"my node\", doc_id=\"d2\", node_info={\"node\": \"info\"})\n\n    type_to_struct: Dict[str, Type[IndexStruct]] = {\"node\": Node}\n\n    # test get document\n    docstore = DocumentStore.from_documents([doc, node])\n    gd1 = docstore.get_document(\"d1\")\n    assert gd1 == doc\n    gd2 = docstore.get_document(\"d2\")\n    assert gd2 == node\n\n    # test serialize/deserialize\n    doc_dict = docstore.serialize_to_dict()\n    assert doc_dict[\"docs\"] == {\n        \"d1\": {\n            \"text\": \"hello world\",\n            \"doc_id\": \"d1\",\n            \"embedding\": None,\n            \"extra_info\": {\"foo\": \"bar\"},\n            \"__type__\": \"Document\",\n        },\n        \"d2\": {\n            \"text\": \"my node\",\n            \"doc_id\": \"d2\",\n            \"embedding\": None,\n            \"extra_info\": None,\n            \"node_info\": {\"node\": \"info\"},\n            \"index\": 0,\n            \"child_indices\": [],\n            \"ref_doc_id\": None,\n            \"__type__\": \"node\",\n        },\n    }\n\n    docstore_loaded = DocumentStore.load_from_dict(doc_dict, type_to_struct)\n    assert docstore_loaded == docstore\n", "doc_id": "5542097578c1b4bdfd1108235f4f7c42f54f7a1c", "embedding": null, "extra_info": {"file_path": "tests/test_docstore.py", "file_name": "test_docstore.py"}, "__type__": "Document"}, "e796c260-fe60-4f4c-bca6-3d3768338120": {"text": "\nThis code file tests the DocumentStore class from the gpt_index library. It creates two documents, a Document and a Node, and stores them in a DocumentStore. It then tests the get_document() method to ensure that the documents are retrieved correctly. Additionally, it tests the serialize_to_dict() and load_from_dict() methods to ensure that the documents are serialized and deserialized correctly. The purpose of this code is to ensure that the DocumentStore class is functioning properly and that documents can be stored, retrieved, and serialized/deserialized correctly. The code uses the DocumentStore class to store documents, the get_document() method to retrieve documents, the serialize_to_dict() and load_from_dict() methods to serialize and deserialize documents, and the Document and Node classes to create documents. The code tests the functionality of the DocumentStore class to ensure that documents can be stored, retrieved, and serialized/deserialized correctly.", "doc_id": "e796c260-fe60-4f4c-bca6-3d3768338120", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Test docstore.\"\"\"\n\nfrom typing import Dict, Type\n\nfrom gpt_index.data_structs.data_structs import IndexStruct, Node\nfrom gpt_index.docstore import DocumentStore\nfrom gpt_index.readers.schema.base import Document\n\n\ndef test_docstore() -> None:\n    \"\"\"Test docstore.\"\"\"\n    doc = Document(\"hello world\", doc_id=\"d1\", extra_info={\"foo\": \"bar\"})\n    node = Node(\"my node\", doc_id=\"d2\", node_info={\"node\": \"info\"})\n\n    type_to_struct: Dict[str, Type[IndexStruct]] = {\"node\": Node}\n\n    # test get document\n    docstore = DocumentStore.from_documents([doc, node])\n    gd1 = docstore.get_document(\"d1\")\n    assert gd1 == doc\n    gd2 = docstore.get_document(\"d2\")\n    assert gd2 == node\n\n    # test serialize/deserialize\n    doc_dict = docstore.serialize_to_dict()\n    assert doc_dict[\"docs\"] == {\n        \"d1\": {\n            \"text\": \"hello world\",\n            \"doc_id\": \"d1\",\n     ", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/test_docstore.py", "file_name": "test_docstore.py"}, "index": 0, "child_indices": [], "ref_doc_id": "5542097578c1b4bdfd1108235f4f7c42f54f7a1c", "node_info": null}, "1": {"text": "     \"doc_id\": \"d1\",\n            \"embedding\": None,\n            \"extra_info\": {\"foo\": \"bar\"},\n            \"__type__\": \"Document\",\n        },\n        \"d2\": {\n            \"text\": \"my node\",\n            \"doc_id\": \"d2\",\n            \"embedding\": None,\n            \"extra_info\": None,\n            \"node_info\": {\"node\": \"info\"},\n            \"index\": 0,\n            \"child_indices\": [],\n            \"ref_doc_id\": None,\n            \"__type__\": \"node\",\n        },\n    }\n\n    docstore_loaded = DocumentStore.load_from_dict(doc_dict, type_to_struct)\n    assert docstore_loaded == docstore\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/test_docstore.py", "file_name": "test_docstore.py"}, "index": 1, "child_indices": [], "ref_doc_id": "5542097578c1b4bdfd1108235f4f7c42f54f7a1c", "node_info": null}, "2": {"text": "This code file tests the DocumentStore class from the gpt_index library. It creates two documents, a Document and a Node, and stores them in a DocumentStore. It then tests the get_document() method to ensure that the documents are retrieved correctly. Finally, it tests the serialize_to_dict() and load_from_dict() methods to ensure that the documents are serialized and deserialized correctly.", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"2": {"text": "This code file tests the DocumentStore class from the gpt_index library. It creates two documents, a Document and a Node, and stores them in a DocumentStore. It then tests the get_document() method to ensure that the documents are retrieved correctly. Finally, it tests the serialize_to_dict() and load_from_dict() methods to ensure that the documents are serialized and deserialized correctly.", "doc_id": null, "embedding": null, "extra_info": null, "index": 2, "child_indices": [0, 1], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}