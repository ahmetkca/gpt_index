{"index_struct": {"text": "\nThis code file tests the utils module of the gpt_index package. It tests the tokenizer function to make sure it correctly tokenizes a given string, and the retry_on_exceptions_with_backoff function to make sure it has the correct number of attempts and works with conditional exceptions. The code uses the globals_helper module, the ErrorToRetry class, and the retry_on_exceptions_with_backoff function. It also defines a ConditionalException class and a fn_with_exception function. The purpose of the code is to ensure that the utils module functions correctly by testing the tokenizer and retry_on_exceptions_with_backoff functions. The tokenizer is tested to make sure it correctly tokenizes a given string, and the retry_on_exceptions_with_backoff function is tested to make sure it has the correct number of attempts and works with conditional exceptions.", "doc_id": "1bb39526-71eb-427c-b4cf-0b4d786031b4", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Test utils.\"\"\"\n\nfrom typing import Optional, Type, Union\n\nimport pytest\n\nfrom gpt_index.utils import (\n    ErrorToRetry,\n    globals_helper,\n    retry_on_exceptions_with_backoff,\n)\n\n\ndef test_tokenizer() -> None:\n    \"\"\"Make sure tokenizer works.\n\n    NOTE: we use a different tokenizer for python >= 3.9.\n\n    \"\"\"\n    text = \"hello world foo bar\"\n    tokenizer = globals_helper.tokenizer\n    assert len(tokenizer(text)) == 4\n\n\ncall_count = 0\n\n\ndef fn_with_exception(\n    exception_cls: Optional[Union[Type[Exception], Exception]]\n) -> bool:\n    \"\"\"Return true unless exception is specified.\"\"\"\n    global call_count\n    call_count += 1\n    if exception_cls:\n        raise exception_cls\n    return True\n\n\nclass ConditionalException(Exception):\n    \"\"\"Exception that contains retry attribute.\"\"\"\n\n    def __init__(self, should_retry: bool) -> None:\n        \"\"\"Initialize with parameters.\"\"\"\n        self.should_retry = should_retry\n\n\ndef", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/test_utils.py", "file_name": "test_utils.py"}, "index": 0, "child_indices": [], "ref_doc_id": "e53db54622ade21e7df6c38eaab8124ceeac9497", "node_info": null}, "1": {"text": "      self.should_retry = should_retry\n\n\ndef test_retry_on_exceptions_with_backoff() -> None:\n    \"\"\"Make sure retry function has accurate number of attempts.\"\"\"\n    global call_count\n    assert fn_with_exception(None)\n\n    call_count = 0\n    with pytest.raises(ValueError):\n        fn_with_exception(ValueError)\n    assert call_count == 1\n\n    call_count = 0\n    with pytest.raises(ValueError):\n        retry_on_exceptions_with_backoff(\n            lambda: fn_with_exception(ValueError),\n            [ErrorToRetry(ValueError)],\n            max_tries=3,\n            min_backoff_secs=0.0,\n        )\n    assert call_count == 3\n\n    # different exception will not get retried\n    call_count = 0\n    with pytest.raises(TypeError):\n        retry_on_exceptions_with_backoff(\n            lambda:", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/test_utils.py", "file_name": "test_utils.py"}, "index": 1, "child_indices": [], "ref_doc_id": "e53db54622ade21e7df6c38eaab8124ceeac9497", "node_info": null}, "2": {"text": "           lambda: fn_with_exception(TypeError),\n            [ErrorToRetry(ValueError)],\n            max_tries=3,\n        )\n    assert call_count == 1\n\n\ndef test_retry_on_conditional_exceptions() -> None:\n    \"\"\"Make sure retry function works on conditional exceptions.\"\"\"\n    global call_count\n    call_count = 0\n    with pytest.raises(ConditionalException):\n        retry_on_exceptions_with_backoff(\n            lambda: fn_with_exception(ConditionalException(True)),\n            [ErrorToRetry(ConditionalException, lambda e: e.should_retry)],\n            max_tries=3,\n            min_backoff_secs=0.0,\n        )\n    assert call_count == 3\n\n    call_count = 0\n    with pytest.raises(ConditionalException):\n        retry_on_exceptions_with_backoff(\n            lambda:", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/test_utils.py", "file_name": "test_utils.py"}, "index": 2, "child_indices": [], "ref_doc_id": "e53db54622ade21e7df6c38eaab8124ceeac9497", "node_info": null}, "3": {"text": "           lambda: fn_with_exception(ConditionalException(False)),\n            [ErrorToRetry(ConditionalException, lambda e: e.should_retry)],\n            max_tries=3,\n            min_backoff_secs=0.0,\n        )\n    assert call_count == 1\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/test_utils.py", "file_name": "test_utils.py"}, "index": 3, "child_indices": [], "ref_doc_id": "e53db54622ade21e7df6c38eaab8124ceeac9497", "node_info": null}, "4": {"text": "This code file tests the utils module of the gpt_index package. It tests the tokenizer function to make sure it works correctly, and tests the retry_on_exceptions_with_backoff function to make sure it has the correct number of attempts and works with conditional exceptions. The code uses the globals_helper module, the ErrorToRetry class, and the retry_on_exceptions_with_backoff function. It also defines a ConditionalException class and a fn_with_exception function. The purpose of the code is to test the functionality of the utils module.", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"4": {"text": "This code file tests the utils module of the gpt_index package. It tests the tokenizer function to make sure it works correctly, and tests the retry_on_exceptions_with_backoff function to make sure it has the correct number of attempts and works with conditional exceptions. The code uses the globals_helper module, the ErrorToRetry class, and the retry_on_exceptions_with_backoff function. It also defines a ConditionalException class and a fn_with_exception function. The purpose of the code is to test the functionality of the utils module.", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}}, "docstore": {"docs": {"e53db54622ade21e7df6c38eaab8124ceeac9497": {"text": "\"\"\"Test utils.\"\"\"\n\nfrom typing import Optional, Type, Union\n\nimport pytest\n\nfrom gpt_index.utils import (\n    ErrorToRetry,\n    globals_helper,\n    retry_on_exceptions_with_backoff,\n)\n\n\ndef test_tokenizer() -> None:\n    \"\"\"Make sure tokenizer works.\n\n    NOTE: we use a different tokenizer for python >= 3.9.\n\n    \"\"\"\n    text = \"hello world foo bar\"\n    tokenizer = globals_helper.tokenizer\n    assert len(tokenizer(text)) == 4\n\n\ncall_count = 0\n\n\ndef fn_with_exception(\n    exception_cls: Optional[Union[Type[Exception], Exception]]\n) -> bool:\n    \"\"\"Return true unless exception is specified.\"\"\"\n    global call_count\n    call_count += 1\n    if exception_cls:\n        raise exception_cls\n    return True\n\n\nclass ConditionalException(Exception):\n    \"\"\"Exception that contains retry attribute.\"\"\"\n\n    def __init__(self, should_retry: bool) -> None:\n        \"\"\"Initialize with parameters.\"\"\"\n        self.should_retry = should_retry\n\n\ndef test_retry_on_exceptions_with_backoff() -> None:\n    \"\"\"Make sure retry function has accurate number of attempts.\"\"\"\n    global call_count\n    assert fn_with_exception(None)\n\n    call_count = 0\n    with pytest.raises(ValueError):\n        fn_with_exception(ValueError)\n    assert call_count == 1\n\n    call_count = 0\n    with pytest.raises(ValueError):\n        retry_on_exceptions_with_backoff(\n            lambda: fn_with_exception(ValueError),\n            [ErrorToRetry(ValueError)],\n            max_tries=3,\n            min_backoff_secs=0.0,\n        )\n    assert call_count == 3\n\n    # different exception will not get retried\n    call_count = 0\n    with pytest.raises(TypeError):\n        retry_on_exceptions_with_backoff(\n            lambda: fn_with_exception(TypeError),\n            [ErrorToRetry(ValueError)],\n            max_tries=3,\n        )\n    assert call_count == 1\n\n\ndef test_retry_on_conditional_exceptions() -> None:\n    \"\"\"Make sure retry function works on conditional exceptions.\"\"\"\n    global call_count\n    call_count = 0\n    with pytest.raises(ConditionalException):\n        retry_on_exceptions_with_backoff(\n            lambda: fn_with_exception(ConditionalException(True)),\n            [ErrorToRetry(ConditionalException, lambda e: e.should_retry)],\n            max_tries=3,\n            min_backoff_secs=0.0,\n        )\n    assert call_count == 3\n\n    call_count = 0\n    with pytest.raises(ConditionalException):\n        retry_on_exceptions_with_backoff(\n            lambda: fn_with_exception(ConditionalException(False)),\n            [ErrorToRetry(ConditionalException, lambda e: e.should_retry)],\n            max_tries=3,\n            min_backoff_secs=0.0,\n        )\n    assert call_count == 1\n", "doc_id": "e53db54622ade21e7df6c38eaab8124ceeac9497", "embedding": null, "extra_info": {"file_path": "tests/test_utils.py", "file_name": "test_utils.py"}, "__type__": "Document"}, "1bb39526-71eb-427c-b4cf-0b4d786031b4": {"text": "\nThis code file tests the utils module of the gpt_index package. It tests the tokenizer function to make sure it correctly tokenizes a given string, and the retry_on_exceptions_with_backoff function to make sure it has the correct number of attempts and works with conditional exceptions. The code uses the globals_helper module, the ErrorToRetry class, and the retry_on_exceptions_with_backoff function. It also defines a ConditionalException class and a fn_with_exception function. The purpose of the code is to ensure that the utils module functions correctly by testing the tokenizer and retry_on_exceptions_with_backoff functions. The tokenizer is tested to make sure it correctly tokenizes a given string, and the retry_on_exceptions_with_backoff function is tested to make sure it has the correct number of attempts and works with conditional exceptions.", "doc_id": "1bb39526-71eb-427c-b4cf-0b4d786031b4", "embedding": null, "extra_info": null, "all_nodes": {"0": {"text": "\"\"\"Test utils.\"\"\"\n\nfrom typing import Optional, Type, Union\n\nimport pytest\n\nfrom gpt_index.utils import (\n    ErrorToRetry,\n    globals_helper,\n    retry_on_exceptions_with_backoff,\n)\n\n\ndef test_tokenizer() -> None:\n    \"\"\"Make sure tokenizer works.\n\n    NOTE: we use a different tokenizer for python >= 3.9.\n\n    \"\"\"\n    text = \"hello world foo bar\"\n    tokenizer = globals_helper.tokenizer\n    assert len(tokenizer(text)) == 4\n\n\ncall_count = 0\n\n\ndef fn_with_exception(\n    exception_cls: Optional[Union[Type[Exception], Exception]]\n) -> bool:\n    \"\"\"Return true unless exception is specified.\"\"\"\n    global call_count\n    call_count += 1\n    if exception_cls:\n        raise exception_cls\n    return True\n\n\nclass ConditionalException(Exception):\n    \"\"\"Exception that contains retry attribute.\"\"\"\n\n    def __init__(self, should_retry: bool) -> None:\n        \"\"\"Initialize with parameters.\"\"\"\n        self.should_retry = should_retry\n\n\ndef", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/test_utils.py", "file_name": "test_utils.py"}, "index": 0, "child_indices": [], "ref_doc_id": "e53db54622ade21e7df6c38eaab8124ceeac9497", "node_info": null}, "1": {"text": "      self.should_retry = should_retry\n\n\ndef test_retry_on_exceptions_with_backoff() -> None:\n    \"\"\"Make sure retry function has accurate number of attempts.\"\"\"\n    global call_count\n    assert fn_with_exception(None)\n\n    call_count = 0\n    with pytest.raises(ValueError):\n        fn_with_exception(ValueError)\n    assert call_count == 1\n\n    call_count = 0\n    with pytest.raises(ValueError):\n        retry_on_exceptions_with_backoff(\n            lambda: fn_with_exception(ValueError),\n            [ErrorToRetry(ValueError)],\n            max_tries=3,\n            min_backoff_secs=0.0,\n        )\n    assert call_count == 3\n\n    # different exception will not get retried\n    call_count = 0\n    with pytest.raises(TypeError):\n        retry_on_exceptions_with_backoff(\n            lambda:", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/test_utils.py", "file_name": "test_utils.py"}, "index": 1, "child_indices": [], "ref_doc_id": "e53db54622ade21e7df6c38eaab8124ceeac9497", "node_info": null}, "2": {"text": "           lambda: fn_with_exception(TypeError),\n            [ErrorToRetry(ValueError)],\n            max_tries=3,\n        )\n    assert call_count == 1\n\n\ndef test_retry_on_conditional_exceptions() -> None:\n    \"\"\"Make sure retry function works on conditional exceptions.\"\"\"\n    global call_count\n    call_count = 0\n    with pytest.raises(ConditionalException):\n        retry_on_exceptions_with_backoff(\n            lambda: fn_with_exception(ConditionalException(True)),\n            [ErrorToRetry(ConditionalException, lambda e: e.should_retry)],\n            max_tries=3,\n            min_backoff_secs=0.0,\n        )\n    assert call_count == 3\n\n    call_count = 0\n    with pytest.raises(ConditionalException):\n        retry_on_exceptions_with_backoff(\n            lambda:", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/test_utils.py", "file_name": "test_utils.py"}, "index": 2, "child_indices": [], "ref_doc_id": "e53db54622ade21e7df6c38eaab8124ceeac9497", "node_info": null}, "3": {"text": "           lambda: fn_with_exception(ConditionalException(False)),\n            [ErrorToRetry(ConditionalException, lambda e: e.should_retry)],\n            max_tries=3,\n            min_backoff_secs=0.0,\n        )\n    assert call_count == 1\n", "doc_id": null, "embedding": null, "extra_info": {"file_path": "tests/test_utils.py", "file_name": "test_utils.py"}, "index": 3, "child_indices": [], "ref_doc_id": "e53db54622ade21e7df6c38eaab8124ceeac9497", "node_info": null}, "4": {"text": "This code file tests the utils module of the gpt_index package. It tests the tokenizer function to make sure it works correctly, and tests the retry_on_exceptions_with_backoff function to make sure it has the correct number of attempts and works with conditional exceptions. The code uses the globals_helper module, the ErrorToRetry class, and the retry_on_exceptions_with_backoff function. It also defines a ConditionalException class and a fn_with_exception function. The purpose of the code is to test the functionality of the utils module.", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}, "root_nodes": {"4": {"text": "This code file tests the utils module of the gpt_index package. It tests the tokenizer function to make sure it works correctly, and tests the retry_on_exceptions_with_backoff function to make sure it has the correct number of attempts and works with conditional exceptions. The code uses the globals_helper module, the ErrorToRetry class, and the retry_on_exceptions_with_backoff function. It also defines a ConditionalException class and a fn_with_exception function. The purpose of the code is to test the functionality of the utils module.", "doc_id": null, "embedding": null, "extra_info": null, "index": 4, "child_indices": [0, 1, 2, 3], "ref_doc_id": null, "node_info": null}}, "__type__": "tree"}}}}